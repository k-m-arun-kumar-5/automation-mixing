

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Nov 22 18:01:16 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 1.44
    46                           ; Generated 14/09/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F887 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0094                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0097                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009A                     	;# 
   137  009B                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  009F                     	;# 
   142  0105                     	;# 
   143  0107                     	;# 
   144  0108                     	;# 
   145  0109                     	;# 
   146  010C                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  0185                     	;# 
   152  0187                     	;# 
   153  0188                     	;# 
   154  0189                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157                           
   158                           	psect	idataBANK0
   159  083A                     __pidataBANK0:	
   160                           
   161                           ;initializer for _cur_disp_lcd_loc
   162  083A  3480               	retlw	128
   163  083B  3400               	retlw	0
   164                           
   165                           ;initializer for _prescale_timer1
   166  083C  3401               	retlw	1
   167  083D  3400               	retlw	0
   168                           
   169                           	psect	idataBANK1
   170  1751                     __pidataBANK1:	
   171                           
   172                           ;initializer for _mix_process_enable_flag
   173  1751  3479               	retlw	121
   174                           
   175                           ;initializer for _cur_stage_time_expiry_flag
   176  1752  346E               	retlw	110
   177                           
   178                           ;initializer for _cur_stage_time_enable_flag
   179  1753  346E               	retlw	110
   180                           
   181                           ;initializer for _restart_sw_enable_flag
   182  1754  3479               	retlw	121
   183                           
   184                           	psect	idataBANK3
   185  083E                     __pidataBANK3:	
   186                           
   187                           ;initializer for Data_Num_Disp_LCD@F1792
   188  083E  3430               	retlw	48
   189  083F  3431               	retlw	49
   190  0840  3432               	retlw	50
   191  0841  3433               	retlw	51
   192  0842  3434               	retlw	52
   193  0843  3435               	retlw	53
   194  0844  3436               	retlw	54
   195  0845  3437               	retlw	55
   196  0846  3438               	retlw	56
   197  0847  3439               	retlw	57
   198  0848  3441               	retlw	65
   199  0849  3442               	retlw	66
   200  084A  3443               	retlw	67
   201  084B  3444               	retlw	68
   202  084C  3445               	retlw	69
   203  084D  3446               	retlw	70
   204                           
   205                           ;initializer for Data_Num_Disp_LCD@F1790
   206  084E  3430               	retlw	48
   207  084F  3431               	retlw	49
   208  0850  3432               	retlw	50
   209  0851  3433               	retlw	51
   210  0852  3434               	retlw	52
   211  0853  3435               	retlw	53
   212  0854  3436               	retlw	54
   213  0855  3437               	retlw	55
   214  0856  3438               	retlw	56
   215  0857  3439               	retlw	57
   216                           
   217                           ;initializer for _cur_line_disp_data
   218  0858  3401               	retlw	1
   219  0859  3400               	retlw	0
   220  085A  3401               	retlw	1
   221  085B  3400               	retlw	0
   222  085C  3401               	retlw	1
   223  085D  3400               	retlw	0
   224  085E  3402               	retlw	2
   225  085F  3400               	retlw	0
   226  0860  3402               	retlw	2
   227  0861  3400               	retlw	0
   228                           
   229                           ;initializer for _disp_status_time_or_error
   230  0862  3401               	retlw	1
   231  0863  3400               	retlw	0
   232  0864  3401               	retlw	1
   233  0865  3400               	retlw	0
   234  0866  3401               	retlw	1
   235  0867  3400               	retlw	0
   236  0868  3400               	retlw	0
   237  0869  3400               	retlw	0
   238                           
   239                           	psect	strings
   240  0800                     __pstrings:	
   241  0800                     stringtab:	
   242  0800                     __stringtab:	
   243  0800                     stringcode:	
   244                           ;	String table - string pointers are 1 byte each
   245                           
   246  0800                     stringdir:	
   247  0800  3008               	movlw	high stringdir
   248  0801  008A               	movwf	10
   249  0802  0804               	movf	4,w
   250  0803  0A84               	incf	4,f
   251  0804  0782               	addwf	2,f
   252  0805                     __stringbase:	
   253  0805  3400               	retlw	0
   254  0806                     __end_of__stringtab:	
   255  0806                     main@motor_rev_run_msg_disp:	
   256  0806  3452               	retlw	82
   257  0807  3445               	retlw	69
   258  0808  3456               	retlw	86
   259  0809  3400               	retlw	0
   260  080A                     __end_ofmain@motor_rev_run_msg_disp:	
   261  080A                     main@motor_fwd_run_msg_disp:	
   262  080A  3446               	retlw	70
   263  080B  3457               	retlw	87
   264  080C  3444               	retlw	68
   265  080D  3400               	retlw	0
   266  080E                     __end_ofmain@motor_fwd_run_msg_disp:	
   267  080E                     main@motor_off_msg_disp:	
   268  080E  344F               	retlw	79
   269  080F  3446               	retlw	70
   270  0810  3446               	retlw	70
   271  0811  3400               	retlw	0
   272  0812                     __end_ofmain@motor_off_msg_disp:	
   273  0812                     LCD_Const_Disp@vol_signal_rep_disp:	
   274  0812  3420               	retlw	32
   275  0813  3456               	retlw	86
   276  0814  346F               	retlw	111
   277  0815  346C               	retlw	108
   278  0816  3400               	retlw	0
   279  0817                     __end_ofLCD_Const_Disp@vol_signal_rep_disp:	
   280  0817                     Cur_Stage_Time_Proc@motor_msg_disp:	
   281  0817  3420               	retlw	32
   282  0818  344D               	retlw	77
   283  0819  343A               	retlw	58
   284  081A  3420               	retlw	32
   285  081B  3400               	retlw	0
   286  081C                     __end_ofCur_Stage_Time_Proc@motor_msg_disp:	
   287  081C                     Cur_Stage_Time_Proc@count_msg_disp:	
   288  081C  3420               	retlw	32
   289  081D  3443               	retlw	67
   290  081E  343A               	retlw	58
   291  081F  3400               	retlw	0
   292  0820                     __end_ofCur_Stage_Time_Proc@count_msg_disp:	
   293  0820                     LCD_Const_Disp@vessel_msg_disp:	
   294  0820  3456               	retlw	86
   295  0821  343A               	retlw	58
   296  0822  3400               	retlw	0
   297  0823                     __end_ofLCD_Const_Disp@vessel_msg_disp:	
   298  0823                     LCD_Const_Disp@reseveriour_msg_disp:	
   299  0823  3452               	retlw	82
   300  0824  343A               	retlw	58
   301  0825  3400               	retlw	0
   302  0826                     __end_ofLCD_Const_Disp@reseveriour_msg_disp:	
   303  0826                     Cur_Stage_Time_Proc@time_msg_disp:	
   304  0826  3454               	retlw	84
   305  0827  343A               	retlw	58
   306  0828  3400               	retlw	0
   307  0829                     __end_ofCur_Stage_Time_Proc@time_msg_disp:	
   308  0010                     _T1CON	set	16
   309  001E                     _ADRESH	set	30
   310  001F                     _ADCON0	set	31
   311  000E                     _TMR1L	set	14
   312  000F                     _TMR1H	set	15
   313  0009                     _PORTE	set	9
   314  0008                     _PORTD	set	8
   315  0007                     _PORTC	set	7
   316  0006                     _PORTB	set	6
   317  0005                     _PORTA	set	5
   318  0042                     _RD2	set	66
   319  0040                     _RD0	set	64
   320  0041                     _RD1	set	65
   321  0085                     _T1CKPS1	set	133
   322  0084                     _T1CKPS0	set	132
   323  00F9                     _GO	set	249
   324  0060                     _TMR1IF	set	96
   325  0049                     _RE1	set	73
   326  0048                     _RE0	set	72
   327  0046                     _RD6	set	70
   328  0045                     _RD5	set	69
   329  0044                     _RD4	set	68
   330  0036                     _RB6	set	54
   331  0035                     _RB5	set	53
   332  0034                     _RB4	set	52
   333  0033                     _RB3	set	51
   334  0032                     _RB2	set	50
   335  0031                     _RB1	set	49
   336  0037                     _RB7	set	55
   337  004A                     _RE2	set	74
   338  009E                     _ADRESL	set	158
   339  009F                     _ADCON1	set	159
   340  0089                     _TRISE	set	137
   341  0088                     _TRISD	set	136
   342  0087                     _TRISC	set	135
   343  0086                     _TRISB	set	134
   344  0085                     _TRISA	set	133
   345  0189                     _ANSELH	set	393
   346  0188                     _ANSEL	set	392
   347  0829                     STR_2:	
   348  0829  3453               	retlw	83	;'S'
   349  082A  3441               	retlw	65	;'A'
   350  082B  3400               	retlw	0
   351  082C                     STR_3:	
   352  082C  3457               	retlw	87	;'W'
   353  082D  3441               	retlw	65	;'A'
   354  082E  3400               	retlw	0
   355  082F                     STR_4:	
   356  082F  344F               	retlw	79	;'O'
   357  0830  344B               	retlw	75	;'K'
   358  0831  3400               	retlw	0
   359  0832                     STR_1:	
   360  0832  3443               	retlw	67	;'C'
   361  0833  344D               	retlw	77	;'M'
   362  0834  3400               	retlw	0
   363  0835                     STR_5:	
   364  0835  3425               	retlw	37	;'%'
   365  0836  3400               	retlw	0
   366                           
   367                           	psect	cinit
   368  07C3                     start_initialization:	
   369                           ; #config settings
   370                           
   371  07C3                     __initialization:	
   372                           
   373                           ; Initialize objects allocated to BANK3
   374  07C3  1783               	bsf	3,7	;select IRP bank2
   375  07C4  30BC               	movlw	low (__pdataBANK3+44)
   376  07C5  00FD               	movwf	btemp+-1
   377  07C6  3008               	movlw	high __pidataBANK3
   378  07C7  00FE               	movwf	btemp
   379  07C8  303E               	movlw	low __pidataBANK3
   380  07C9  00FF               	movwf	btemp+1
   381  07CA  3090               	movlw	low __pdataBANK3
   382  07CB  0084               	movwf	4
   383  07CC  160A  118A  277B  120A  118A  	fcall	init_ram0
   384                           
   385                           ; Initialize objects allocated to BANK1
   386  07D1  1383               	bcf	3,7	;select IRP bank0
   387  07D2  30EF               	movlw	low (__pdataBANK1+4)
   388  07D3  00FD               	movwf	btemp+-1
   389  07D4  3017               	movlw	high __pidataBANK1
   390  07D5  00FE               	movwf	btemp
   391  07D6  3051               	movlw	low __pidataBANK1
   392  07D7  00FF               	movwf	btemp+1
   393  07D8  30EB               	movlw	low __pdataBANK1
   394  07D9  0084               	movwf	4
   395  07DA  160A  118A  277B  120A  118A  	fcall	init_ram0
   396                           
   397                           ; Initialize objects allocated to BANK0
   398  07DF  306D               	movlw	low (__pdataBANK0+4)
   399  07E0  00FD               	movwf	btemp+-1
   400  07E1  3008               	movlw	high __pidataBANK0
   401  07E2  00FE               	movwf	btemp
   402  07E3  303A               	movlw	low __pidataBANK0
   403  07E4  00FF               	movwf	btemp+1
   404  07E5  3069               	movlw	low __pdataBANK0
   405  07E6  0084               	movwf	4
   406  07E7  160A  118A  277B  120A  118A  	fcall	init_ram0
   407                           
   408                           ; Clear objects allocated to BANK3
   409  07EC  1783               	bsf	3,7	;select IRP bank2
   410  07ED  30BC               	movlw	low __pbssBANK3
   411  07EE  0084               	movwf	4
   412  07EF  30C6               	movlw	low (__pbssBANK3+10)
   413  07F0  160A  118A  2755  120A  118A  	fcall	clear_ram0
   414                           
   415                           ; Clear objects allocated to BANK1
   416  07F5  1383               	bcf	3,7	;select IRP bank0
   417  07F6  30DE               	movlw	low __pbssBANK1
   418  07F7  0084               	movwf	4
   419  07F8  30EB               	movlw	low (__pbssBANK1+13)
   420  07F9  160A  118A  2755   	fcall	clear_ram0
   421  07FC                     end_of_initialization:	
   422                           ;End of C runtime variable initialization code
   423                           
   424  07FC                     __end_of__initialization:	
   425  07FC  0183               	clrf	3
   426  07FD  120A  158A  2AEC   	ljmp	_main	;jump to C main() function
   427                           
   428                           	psect	dataBANK0
   429  0069                     __pdataBANK0:	
   430  0069                     _cur_disp_lcd_loc:	
   431  0069                     	ds	2
   432  006B                     _prescale_timer1:	
   433  006B                     	ds	2
   434                           
   435                           	psect	bssBANK1
   436  00DE                     __pbssBANK1:	
   437  00DE                     _timer1_init:	
   438  00DE                     	ds	4
   439  00E2                     _count_left_vsl_fwd_rev_process:	
   440  00E2                     	ds	2
   441  00E4                     _cur_stage_time_left:	
   442  00E4                     	ds	2
   443  00E6                     _mix_fsm_state:	
   444  00E6                     	ds	2
   445  00E8                     _timer1_mode:	
   446  00E8                     	ds	2
   447  00EA                     _restart_pressed_flag:	
   448  00EA                     	ds	1
   449                           
   450                           	psect	dataBANK1
   451  00EB                     __pdataBANK1:	
   452  00EB                     _mix_process_enable_flag:	
   453  00EB                     	ds	1
   454  00EC                     _cur_stage_time_expiry_flag:	
   455  00EC                     	ds	1
   456  00ED                     _cur_stage_time_enable_flag:	
   457  00ED                     	ds	1
   458  00EE                     _restart_sw_enable_flag:	
   459  00EE                     	ds	1
   460                           
   461                           	psect	bssBANK3
   462  01BC                     __pbssBANK3:	
   463  01BC                     _num_calls_timer1:	
   464  01BC                     	ds	4
   465  01C0                     _vsl_run_fsm_state:	
   466  01C0                     	ds	2
   467  01C2                     _count_update_cur_stage_per_sec:	
   468  01C2                     	ds	2
   469  01C4                     _prescale_shift_timer1:	
   470  01C4                     	ds	2
   471                           
   472                           	psect	dataBANK3
   473  0190                     __pdataBANK3:	
   474  0190                     Data_Num_Disp_LCD@F1792:	
   475  0190                     	ds	16
   476  01A0                     Data_Num_Disp_LCD@F1790:	
   477  01A0                     	ds	10
   478  01AA                     _cur_line_disp_data:	
   479  01AA                     	ds	10
   480  01B4                     _disp_status_time_or_error:	
   481  01B4                     	ds	8
   482                           
   483                           	psect	inittext
   484  1777                     init_fetch0:	
   485                           ;	Called with low address in FSR and high address in W
   486                           
   487  1777  087E               	movf	126,w
   488  1778  008A               	movwf	10
   489  1779  087F               	movf	127,w
   490  177A  0082               	movwf	2
   491  177B                     init_ram0:	
   492                           ;Called with:
   493                           ;	high address of idata address in btemp 
   494                           ;	low address of idata address in btemp+1 
   495                           ;	low address of data in FSR
   496                           ;	high address + 1 of data in btemp-1
   497                           
   498  177B  2777  160A  118A   	fcall	init_fetch0
   499  177E  0080               	movwf	0
   500  177F  0A84               	incf	4,f
   501  1780  0804               	movf	4,w
   502  1781  067D               	xorwf	125,w
   503  1782  1903               	btfsc	3,2
   504  1783  3400               	retlw	0
   505  1784  0AFF               	incf	127,f
   506  1785  1903               	btfsc	3,2
   507  1786  0AFE               	incf	126,f
   508  1787  2F7B               	goto	init_ram0
   509                           
   510                           	psect	clrtext
   511  1755                     clear_ram0:	
   512                           ;	Called with FSR containing the base address, and
   513                           ;	W with the last address+1
   514                           
   515  1755  0064               	clrwdt	;clear the watchdog before getting into this loop
   516  1756                     clrloop0:	
   517  1756  0180               	clrf	0	;clear RAM location pointed to by FSR
   518  1757  0A84               	incf	4,f	;increment pointer
   519  1758  0604               	xorwf	4,w	;XOR with final address
   520  1759  1903               	btfsc	3,2	;have we reached the end yet?
   521  175A  3400               	retlw	0	;all done for this memory range, return
   522  175B  0604               	xorwf	4,w	;XOR again to restore value
   523  175C  2F56               	goto	clrloop0	;do the next byte
   524                           
   525                           	psect	cstackBANK1
   526  00A0                     __pcstackBANK1:	
   527  00A0                     Mix_Fsm_Proc@adc_value_rsvcmt_ch:	
   528                           
   529                           ; 4 bytes @ 0x0
   530  00A0                     	ds	4
   531  00A4                     Mix_Fsm_Proc@adc_value_rsvsand_ch:	
   532                           
   533                           ; 4 bytes @ 0x4
   534  00A4                     	ds	4
   535  00A8                     Mix_Fsm_Proc@adc_value_rsvwater_ch:	
   536                           
   537                           ; 4 bytes @ 0x8
   538  00A8                     	ds	4
   539  00AC                     Mix_Fsm_Proc@adc_value_vslcmt_ch:	
   540                           
   541                           ; 4 bytes @ 0xC
   542  00AC                     	ds	4
   543  00B0                     Mix_Fsm_Proc@adc_value_vslsand_ch:	
   544                           
   545                           ; 4 bytes @ 0x10
   546  00B0                     	ds	4
   547  00B4                     Mix_Fsm_Proc@adc_value_vslwater_ch:	
   548                           
   549                           ; 4 bytes @ 0x14
   550  00B4                     	ds	4
   551  00B8                     Mix_Fsm_Proc@analog_val_in_digital_frac_vslcmt_ch:	
   552                           
   553                           ; 4 bytes @ 0x18
   554  00B8                     	ds	4
   555  00BC                     Mix_Fsm_Proc@analog_val_in_digital_frac_vslsand_ch:	
   556                           
   557                           ; 4 bytes @ 0x1C
   558  00BC                     	ds	4
   559  00C0                     Mix_Fsm_Proc@analog_val_in_digital_frac_vslwater_ch:	
   560                           
   561                           ; 4 bytes @ 0x20
   562  00C0                     	ds	4
   563  00C4                     Mix_Fsm_Proc@adc_channel:	
   564                           
   565                           ; 2 bytes @ 0x24
   566  00C4                     	ds	2
   567  00C6                     Mix_Fsm_Proc@percent_frac_rsvcmt_ch:	
   568                           
   569                           ; 2 bytes @ 0x26
   570  00C6                     	ds	2
   571  00C8                     Mix_Fsm_Proc@percent_frac_rsvsand_ch:	
   572                           
   573                           ; 2 bytes @ 0x28
   574  00C8                     	ds	2
   575  00CA                     Mix_Fsm_Proc@percent_frac_rsvwater_ch:	
   576                           
   577                           ; 2 bytes @ 0x2A
   578  00CA                     	ds	2
   579  00CC                     Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch:	
   580                           
   581                           ; 4 bytes @ 0x2C
   582  00CC                     	ds	4
   583  00D0                     Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch:	
   584                           
   585                           ; 4 bytes @ 0x30
   586  00D0                     	ds	4
   587  00D4                     Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch:	
   588                           
   589                           ; 4 bytes @ 0x34
   590  00D4                     	ds	4
   591  00D8                     Mix_Fsm_Proc@percent_int_rsvcmt_ch:	
   592                           
   593                           ; 2 bytes @ 0x38
   594  00D8                     	ds	2
   595  00DA                     Mix_Fsm_Proc@percent_int_rsvsand_ch:	
   596                           
   597                           ; 2 bytes @ 0x3A
   598  00DA                     	ds	2
   599  00DC                     Mix_Fsm_Proc@percent_int_rsvwater_ch:	
   600                           
   601                           ; 2 bytes @ 0x3C
   602  00DC                     	ds	2
   603                           
   604                           	psect	cstackCOMMON
   605  0070                     __pcstackCOMMON:	
   606  0070                     ?_LCD_Init:	
   607  0070                     ?_LCD_Const_Disp:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_Reset_Process:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_Mix_Fsm_Proc:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_Cur_Stage_Time_Run_Proc:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_Stop_Timer1:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ??_Stop_Timer1:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_Write_LCD_Command:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_Delay_Time_ByCount:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_Data_Str_Disp_LCD:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_Cur_Stage_Time_Proc:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_Prescale_Timer1:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ??_Prescale_Timer1:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ?_Write_LCD_Data:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ??_Write_LCD_Data:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_main:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_Init_ADC_Channel:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ?___wmul:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ?___lmul:	
   659                           ; 2 bytes @ 0x0
   660                           
   661  0070                     ?___llmod:	
   662                           ; 4 bytes @ 0x0
   663                           
   664  0070                     Init_ADC_Channel@adc_channel:	
   665                           ; 4 bytes @ 0x0
   666                           
   667  0070                     Write_LCD_Command@cmd:	
   668                           ; 2 bytes @ 0x0
   669                           
   670  0070                     Delay_Time_ByCount@time_delay:	
   671                           ; 2 bytes @ 0x0
   672                           
   673  0070                     ___wmul@multiplier:	
   674                           ; 2 bytes @ 0x0
   675                           
   676  0070                     ___lmul@multiplier:	
   677                           ; 2 bytes @ 0x0
   678                           
   679  0070                     ___llmod@divisor:	
   680                           ; 4 bytes @ 0x0
   681                           
   682                           
   683                           ; 4 bytes @ 0x0
   684  0070                     	ds	2
   685  0072                     ??_Write_LCD_Command:	
   686  0072                     ??_Delay_Time_ByCount:	
   687                           ; 1 bytes @ 0x2
   688                           
   689  0072                     ??_Init_ADC_Channel:	
   690                           ; 1 bytes @ 0x2
   691                           
   692  0072                     ___wmul@multiplicand:	
   693                           ; 1 bytes @ 0x2
   694                           
   695                           
   696                           ; 2 bytes @ 0x2
   697  0072                     	ds	2
   698  0074                     ??___wmul:	
   699  0074                     Write_LCD_Data@ch:	
   700                           ; 1 bytes @ 0x4
   701                           
   702  0074                     Init_ADC_Channel@adc_channel_reg:	
   703                           ; 1 bytes @ 0x4
   704                           
   705  0074                     ___wmul@product:	
   706                           ; 2 bytes @ 0x4
   707                           
   708  0074                     ___lmul@multiplicand:	
   709                           ; 2 bytes @ 0x4
   710                           
   711  0074                     ___llmod@dividend:	
   712                           ; 4 bytes @ 0x4
   713                           
   714                           
   715                           ; 4 bytes @ 0x4
   716  0074                     	ds	1
   717  0075                     Write_LCD_Data@time_delay:	
   718                           
   719                           ; 4 bytes @ 0x5
   720  0075                     	ds	1
   721  0076                     ?_Read_ADC_Channel:	
   722  0076                     Read_ADC_Channel@adc_channel:	
   723                           ; 4 bytes @ 0x6
   724                           
   725  0076                     Write_LCD_Command@time_delay:	
   726                           ; 2 bytes @ 0x6
   727                           
   728                           
   729                           ; 4 bytes @ 0x6
   730  0076                     	ds	2
   731  0078                     ??___lmul:	
   732  0078                     ??___llmod:	
   733                           ; 1 bytes @ 0x8
   734                           
   735                           
   736                           ; 1 bytes @ 0x8
   737  0078                     	ds	1
   738  0079                     ??_Data_Str_Disp_LCD:	
   739  0079                     ___llmod@counter:	
   740                           ; 1 bytes @ 0x9
   741                           
   742  0079                     ___lmul@product:	
   743                           ; 1 bytes @ 0x9
   744                           
   745                           
   746                           ; 4 bytes @ 0x9
   747  0079                     	ds	1
   748  007A                     ??_LCD_Init:	
   749  007A                     ??_Read_ADC_Channel:	
   750                           ; 1 bytes @ 0xA
   751                           
   752  007A                     ?_Goto_XY_LCD_Disp:	
   753                           ; 1 bytes @ 0xA
   754                           
   755  007A                     Data_Str_Disp_LCD@char_ptr:	
   756                           ; 1 bytes @ 0xA
   757                           
   758  007A                     Goto_XY_LCD_Disp@start_line_num:	
   759                           ; 1 bytes @ 0xA
   760                           
   761                           
   762                           ; 2 bytes @ 0xA
   763  007A                     	ds	2
   764  007C                     Goto_XY_LCD_Disp@start_col_num:	
   765                           
   766                           ; 2 bytes @ 0xC
   767  007C                     	ds	1
   768  007D                     ??___lldiv:	
   769                           
   770                           ; 1 bytes @ 0xD
   771  007D                     	ds	1
   772  007E                     ??_LCD_Const_Disp:	
   773  007E                     ??_Goto_XY_LCD_Disp:	
   774                           ; 1 bytes @ 0xE
   775                           
   776                           
   777                           	psect	cstackBANK0
   778  0020                     __pcstackBANK0:	
   779                           ; 1 bytes @ 0xE
   780                           
   781  0020                     ?_Encoded_To_Actual_Analog_Val_Calc:	
   782  0020                     ?___lldiv:	
   783                           ; 1 bytes @ 0x0
   784                           
   785  0020                     Read_ADC_Channel@adc_value_most_byte:	
   786                           ; 4 bytes @ 0x0
   787                           
   788  0020                     Goto_XY_LCD_Disp@start_line_lcd:	
   789                           ; 2 bytes @ 0x0
   790                           
   791  0020                     Encoded_To_Actual_Analog_Val_Calc@adc_value:	
   792                           ; 2 bytes @ 0x0
   793                           
   794  0020                     ___lldiv@divisor:	
   795                           ; 4 bytes @ 0x0
   796                           
   797                           
   798                           ; 4 bytes @ 0x0
   799  0020                     	ds	2
   800  0022                     Goto_XY_LCD_Disp@start_col_lcd:	
   801  0022                     Read_ADC_Channel@adc_value_channel:	
   802                           ; 2 bytes @ 0x2
   803                           
   804                           
   805                           ; 4 bytes @ 0x2
   806  0022                     	ds	2
   807  0024                     ??_Reset_Process:	
   808  0024                     Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog:	
   809                           ; 1 bytes @ 0x4
   810                           
   811  0024                     ___lldiv@dividend:	
   812                           ; 4 bytes @ 0x4
   813                           
   814                           
   815                           ; 4 bytes @ 0x4
   816  0024                     	ds	2
   817  0026                     Read_ADC_Channel@adc_value_least_byte:	
   818                           
   819                           ; 2 bytes @ 0x6
   820  0026                     	ds	2
   821  0028                     Encoded_To_Actual_Analog_Val_Calc@min_input_analog:	
   822  0028                     ___lldiv@quotient:	
   823                           ; 2 bytes @ 0x8
   824                           
   825                           
   826                           ; 4 bytes @ 0x8
   827  0028                     	ds	2
   828  002A                     Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int:	
   829                           
   830                           ; 1 bytes @ 0xA
   831  002A                     	ds	1
   832  002B                     Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac:	
   833                           
   834                           ; 1 bytes @ 0xB
   835  002B                     	ds	1
   836  002C                     ??_Encoded_To_Actual_Analog_Val_Calc:	
   837  002C                     ___lldiv@counter:	
   838                           ; 1 bytes @ 0xC
   839                           
   840                           
   841                           ; 1 bytes @ 0xC
   842  002C                     	ds	1
   843  002D                     ?_Run_Timer1:	
   844  002D                     ?_Encoded_To_Percent_Calc:	
   845                           ; 1 bytes @ 0xD
   846                           
   847  002D                     ?_Data_Num_Disp_LCD:	
   848                           ; 1 bytes @ 0xD
   849                           
   850  002D                     Run_Timer1@set_timer1_mode:	
   851                           ; 1 bytes @ 0xD
   852                           
   853  002D                     Data_Num_Disp_LCD@lcd_datanum_disp_format:	
   854                           ; 2 bytes @ 0xD
   855                           
   856  002D                     Encoded_To_Percent_Calc@adc_value:	
   857                           ; 2 bytes @ 0xD
   858                           
   859                           
   860                           ; 4 bytes @ 0xD
   861  002D                     	ds	2
   862  002F                     ??_Run_Timer1:	
   863  002F                     Data_Num_Disp_LCD@lcd_disp_data_int:	
   864                           ; 1 bytes @ 0xF
   865                           
   866                           
   867                           ; 4 bytes @ 0xF
   868  002F                     	ds	2
   869  0031                     Encoded_To_Percent_Calc@percent_int:	
   870                           
   871                           ; 1 bytes @ 0x11
   872  0031                     	ds	1
   873  0032                     Encoded_To_Percent_Calc@percent_frac:	
   874                           
   875                           ; 1 bytes @ 0x12
   876  0032                     	ds	1
   877  0033                     ??_Encoded_To_Percent_Calc:	
   878  0033                     ??_Data_Num_Disp_LCD:	
   879                           ; 1 bytes @ 0x13
   880                           
   881                           
   882                           ; 1 bytes @ 0x13
   883  0033                     	ds	1
   884  0034                     Encoded_To_Actual_Analog_Val_Calc@remainder_val:	
   885                           
   886                           ; 4 bytes @ 0x14
   887  0034                     	ds	3
   888  0037                     Encoded_To_Percent_Calc@temp_percent_int:	
   889  0037                     Data_Num_Disp_LCD@hex_data:	
   890                           ; 4 bytes @ 0x17
   891                           
   892                           
   893                           ; 16 bytes @ 0x17
   894  0037                     	ds	4
   895  003B                     Encoded_To_Percent_Calc@remainder_val:	
   896                           
   897                           ; 2 bytes @ 0x1B
   898  003B                     	ds	12
   899  0047                     Data_Num_Disp_LCD@num_data:	
   900                           
   901                           ; 10 bytes @ 0x27
   902  0047                     	ds	10
   903  0051                     Data_Num_Disp_LCD@tens_thousand_digit:	
   904                           
   905                           ; 2 bytes @ 0x31
   906  0051                     	ds	2
   907  0053                     Data_Num_Disp_LCD@thousands_digit:	
   908                           
   909                           ; 2 bytes @ 0x33
   910  0053                     	ds	2
   911  0055                     Data_Num_Disp_LCD@hundreds_digit:	
   912                           
   913                           ; 2 bytes @ 0x35
   914  0055                     	ds	2
   915  0057                     Data_Num_Disp_LCD@tens_digit:	
   916                           
   917                           ; 2 bytes @ 0x37
   918  0057                     	ds	2
   919  0059                     Data_Num_Disp_LCD@unit_digit:	
   920                           
   921                           ; 2 bytes @ 0x39
   922  0059                     	ds	2
   923  005B                     Data_Num_Disp_LCD@num:	
   924                           
   925                           ; 4 bytes @ 0x3B
   926  005B                     	ds	4
   927  005F                     ??_Mix_Fsm_Proc:	
   928  005F                     ??_Cur_Stage_Time_Proc:	
   929                           ; 1 bytes @ 0x3F
   930                           
   931                           
   932                           ; 1 bytes @ 0x3F
   933  005F                     	ds	1
   934  0060                     ??_Cur_Stage_Time_Run_Proc:	
   935                           
   936                           ; 1 bytes @ 0x40
   937  0060                     	ds	8
   938  0068                     ??_main:	
   939                           
   940                           ; 1 bytes @ 0x48
   941  0068                     	ds	1
   942                           
   943                           	psect	maintext
   944  0AEC                     __pmaintext:	
   945 ;;
   946 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   947 ;;
   948 ;; *************** function _main *****************
   949 ;; Defined at:
   950 ;;		line 283 in file "adc7.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;		None
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  analog_val_i    4    0        unsigned long 
   955 ;;  analog_val_i    4    0        unsigned long 
   956 ;;  analog_val_i    4    0        unsigned long 
   957 ;;  analog_val_i    4    0        unsigned long 
   958 ;;  percent_frac    2    0        unsigned int 
   959 ;;  percent_int_    2    0        unsigned int 
   960 ;;  percent_frac    2    0        unsigned int 
   961 ;;  percent_int_    2    0        unsigned int 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : B00/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   971 ;;      Params:         0       0       0       0       0
   972 ;;      Locals:         0       0       0       0       0
   973 ;;      Temps:          0       1       0       0       0
   974 ;;      Totals:         0       1       0       0       0
   975 ;;Total ram usage:        1 bytes
   976 ;; Hardware stack levels required when called:    4
   977 ;; This function calls:
   978 ;;		_Cur_Stage_Time_Run_Proc
   979 ;;		_LCD_Const_Disp
   980 ;;		_LCD_Init
   981 ;;		_Mix_Fsm_Proc
   982 ;;		_Reset_Process
   983 ;; This function is called by:
   984 ;;		Startup code after reset
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           
   989                           ;psect for function _main
   990  0AEC                     _main:	
   991                           
   992                           ;adc7.c: 285: unsigned long analog_val_in_digital_int_ch0, analog_val_in_digital_frac_ch
      +                          0, analog_val_in_digital_int_ch1, analog_val_in_digital_frac_ch1;
   993                           ;adc7.c: 286: unsigned int percent_int_ch0, percent_frac_ch0, percent_int_ch1, percent_f
      +                          rac_ch1;
   994                           ;adc7.c: 287: const char motor_off_msg_disp[] = "OFF", motor_fwd_run_msg_disp[] = "FWD",
      +                          motor_rev_run_msg_disp[] = "REV";
   995                           ;adc7.c: 288: TRISA = 0x2F;
   996                           
   997                           ;incstack = 0
   998                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   999  0AEC  302F               	movlw	47
  1000  0AED  1683               	bsf	3,5	;RP0=1, select bank1
  1001  0AEE  1303               	bcf	3,6	;RP1=0, select bank1
  1002  0AEF  0085               	movwf	5	;volatile
  1003                           
  1004                           ;adc7.c: 289: PORTA = 0x00;
  1005  0AF0  1283               	bcf	3,5	;RP0=0, select bank0
  1006  0AF1  1303               	bcf	3,6	;RP1=0, select bank0
  1007  0AF2  0185               	clrf	5	;volatile
  1008                           
  1009                           ;adc7.c: 290: TRISB = 0x00;
  1010  0AF3  1683               	bsf	3,5	;RP0=1, select bank1
  1011  0AF4  1303               	bcf	3,6	;RP1=0, select bank1
  1012  0AF5  0186               	clrf	6	;volatile
  1013                           
  1014                           ;adc7.c: 291: PORTB = 0x00;
  1015  0AF6  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0AF7  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0AF8  0186               	clrf	6	;volatile
  1018                           
  1019                           ;adc7.c: 292: TRISC = 0x00;
  1020  0AF9  1683               	bsf	3,5	;RP0=1, select bank1
  1021  0AFA  1303               	bcf	3,6	;RP1=0, select bank1
  1022  0AFB  0187               	clrf	7	;volatile
  1023                           
  1024                           ;adc7.c: 293: PORTC = 0x00;
  1025  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  1026  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  1027  0AFE  0187               	clrf	7	;volatile
  1028                           
  1029                           ;adc7.c: 294: TRISD = 0x00;
  1030  0AFF  1683               	bsf	3,5	;RP0=1, select bank1
  1031  0B00  1303               	bcf	3,6	;RP1=0, select bank1
  1032  0B01  0188               	clrf	8	;volatile
  1033                           
  1034                           ;adc7.c: 295: PORTD = 0x00;
  1035  0B02  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0B03  1303               	bcf	3,6	;RP1=0, select bank0
  1037  0B04  0188               	clrf	8	;volatile
  1038                           
  1039                           ;adc7.c: 296: TRISE = 0X04;
  1040  0B05  3004               	movlw	4
  1041  0B06  1683               	bsf	3,5	;RP0=1, select bank1
  1042  0B07  1303               	bcf	3,6	;RP1=0, select bank1
  1043  0B08  0089               	movwf	9	;volatile
  1044                           
  1045                           ;adc7.c: 297: PORTE = 0x00;
  1046  0B09  1283               	bcf	3,5	;RP0=0, select bank0
  1047  0B0A  1303               	bcf	3,6	;RP1=0, select bank0
  1048  0B0B  0189               	clrf	9	;volatile
  1049                           
  1050                           ;adc7.c: 298: ANSEL = 0X0F;
  1051  0B0C  300F               	movlw	15
  1052  0B0D  1683               	bsf	3,5	;RP0=1, select bank3
  1053  0B0E  1703               	bsf	3,6	;RP1=1, select bank3
  1054  0B0F  0088               	movwf	8	;volatile
  1055                           
  1056                           ;adc7.c: 299: ANSELH = 0x10;
  1057  0B10  3010               	movlw	16
  1058  0B11  0089               	movwf	9	;volatile
  1059                           
  1060                           ;adc7.c: 300: LCD_Init();
  1061  0B12  120A  158A  20A3  120A  158A  	fcall	_LCD_Init
  1062                           
  1063                           ;adc7.c: 301: LCD_Const_Disp();
  1064  0B17  120A  158A  235C  120A  158A  	fcall	_LCD_Const_Disp
  1065  0B1C                     l2275:	
  1066                           ;adc7.c: 303: for(;;)
  1067                           
  1068                           
  1069                           ;adc7.c: 304: {
  1070                           ;adc7.c: 305: if(restart_sw_enable_flag == ('y') && RE2 == (1))
  1071  0B1C  3079               	movlw	121
  1072  0B1D  1683               	bsf	3,5	;RP0=1, select bank1
  1073  0B1E  1303               	bcf	3,6	;RP1=0, select bank1
  1074  0B1F  066E               	xorwf	_restart_sw_enable_flag^(0+128),w
  1075  0B20  1D03               	btfss	3,2
  1076  0B21  2B3D               	goto	l2287
  1077  0B22  1283               	bcf	3,5	;RP0=0, select bank0
  1078  0B23  1303               	bcf	3,6	;RP1=0, select bank0
  1079  0B24  1D09               	btfss	9,2	;volatile
  1080  0B25  2B3D               	goto	l2287
  1081  0B26                     l163:	
  1082                           ;adc7.c: 306: {
  1083                           ;adc7.c: 307: while(RE2 == (1));
  1084                           
  1085  0B26  1909               	btfsc	9,2	;volatile
  1086  0B27  2B26               	goto	l163
  1087                           
  1088                           ;adc7.c: 308: Reset_Process();
  1089  0B28  120A  158A  206A  120A  158A  	fcall	_Reset_Process
  1090                           
  1091                           ;adc7.c: 309: restart_pressed_flag = ('y');
  1092  0B2D  3079               	movlw	121
  1093  0B2E  1283               	bcf	3,5	;RP0=0, select bank0
  1094  0B2F  1303               	bcf	3,6	;RP1=0, select bank0
  1095  0B30  00E8               	movwf	??_main
  1096  0B31  0868               	movf	??_main,w
  1097  0B32  1683               	bsf	3,5	;RP0=1, select bank1
  1098  0B33  1303               	bcf	3,6	;RP1=0, select bank1
  1099  0B34  00EA               	movwf	_restart_pressed_flag^(0+128)
  1100                           
  1101                           ;adc7.c: 310: restart_sw_enable_flag = ('n');
  1102  0B35  306E               	movlw	110
  1103  0B36  1283               	bcf	3,5	;RP0=0, select bank0
  1104  0B37  1303               	bcf	3,6	;RP1=0, select bank0
  1105  0B38  00E8               	movwf	??_main
  1106  0B39  0868               	movf	??_main,w
  1107  0B3A  1683               	bsf	3,5	;RP0=1, select bank1
  1108  0B3B  1303               	bcf	3,6	;RP1=0, select bank1
  1109  0B3C  00EE               	movwf	_restart_sw_enable_flag^(0+128)
  1110  0B3D                     l2287:	
  1111                           
  1112                           ;adc7.c: 311: }
  1113                           ;adc7.c: 312: if(mix_process_enable_flag == ('y'))
  1114  0B3D  3079               	movlw	121
  1115  0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  1116  0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  1117  0B40  066B               	xorwf	_mix_process_enable_flag^(0+128),w
  1118  0B41  1D03               	btfss	3,2
  1119  0B42  2B48               	goto	l2291
  1120                           
  1121                           ;adc7.c: 313: Mix_Fsm_Proc();
  1122  0B43  120A  118A  21F4  120A  158A  	fcall	_Mix_Fsm_Proc
  1123  0B48                     l2291:	
  1124                           
  1125                           ;adc7.c: 314: if((timer1_mode != (0U) ) && cur_stage_time_expiry_flag == ('n') && cur_st
      +                          age_time_enable_flag == ('y'))
  1126  0B48  1683               	bsf	3,5	;RP0=1, select bank1
  1127  0B49  1303               	bcf	3,6	;RP1=0, select bank1
  1128  0B4A  0868               	movf	_timer1_mode^(0+128),w
  1129  0B4B  0469               	iorwf	(_timer1_mode+1)^(0+128),w
  1130  0B4C  1903               	btfsc	3,2
  1131  0B4D  2B1C               	goto	l2275
  1132  0B4E  306E               	movlw	110
  1133  0B4F  066C               	xorwf	_cur_stage_time_expiry_flag^(0+128),w
  1134  0B50  1D03               	btfss	3,2
  1135  0B51  2B1C               	goto	l2275
  1136  0B52  3079               	movlw	121
  1137  0B53  066D               	xorwf	_cur_stage_time_enable_flag^(0+128),w
  1138  0B54  1D03               	btfss	3,2
  1139  0B55  2B1C               	goto	l2275
  1140                           
  1141                           ;adc7.c: 315: Cur_Stage_Time_Run_Proc();
  1142  0B56  120A  158A  252F  120A  158A  	fcall	_Cur_Stage_Time_Run_Proc
  1143                           
  1144                           ;adc7.c: 316: }
  1145  0B5B  2B1C               	goto	l2275
  1146  0B5C                     __end_of_main:	
  1147                           
  1148                           	psect	text1
  1149  086A                     __ptext1:	
  1150 ;; *************** function _Reset_Process *****************
  1151 ;; Defined at:
  1152 ;;		line 318 in file "adc7.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;		None
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1166 ;;      Params:         0       0       0       0       0
  1167 ;;      Locals:         0       0       0       0       0
  1168 ;;      Temps:          0       1       0       0       0
  1169 ;;      Totals:         0       1       0       0       0
  1170 ;;Total ram usage:        1 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    3
  1173 ;; This function calls:
  1174 ;;		_LCD_Const_Disp
  1175 ;;		_Stop_Timer1
  1176 ;;		_Write_LCD_Command
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function _Reset_Process
  1184  086A                     _Reset_Process:	
  1185                           
  1186                           ;adc7.c: 320: Stop_Timer1();
  1187                           
  1188                           ;incstack = 0
  1189                           ; Regs used in _Reset_Process: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1190  086A  160A  118A  276A  120A  158A  	fcall	_Stop_Timer1
  1191                           
  1192                           ;adc7.c: 321: RB7 = (0);
  1193  086F  1283               	bcf	3,5	;RP0=0, select bank0
  1194  0870  1303               	bcf	3,6	;RP1=0, select bank0
  1195  0871  1386               	bcf	6,7	;volatile
  1196                           
  1197                           ;adc7.c: 322: RB1 = (0);
  1198  0872  1086               	bcf	6,1	;volatile
  1199                           
  1200                           ;adc7.c: 323: RB2 = (0);
  1201  0873  1106               	bcf	6,2	;volatile
  1202                           
  1203                           ;adc7.c: 324: RB3 = (0);
  1204  0874  1186               	bcf	6,3	;volatile
  1205                           
  1206                           ;adc7.c: 325: RB4 = (0);
  1207  0875  1206               	bcf	6,4	;volatile
  1208                           
  1209                           ;adc7.c: 326: RB5 = (0);
  1210  0876  1286               	bcf	6,5	;volatile
  1211                           
  1212                           ;adc7.c: 327: RB6 = (0);
  1213  0877  1306               	bcf	6,6	;volatile
  1214                           
  1215                           ;adc7.c: 328: restart_sw_enable_flag = ('y');
  1216  0878  3079               	movlw	121
  1217  0879  00A4               	movwf	??_Reset_Process
  1218  087A  0824               	movf	??_Reset_Process,w
  1219  087B  1683               	bsf	3,5	;RP0=1, select bank1
  1220  087C  1303               	bcf	3,6	;RP1=0, select bank1
  1221  087D  00EE               	movwf	_restart_sw_enable_flag^(0+128)
  1222                           
  1223                           ;adc7.c: 329: cur_stage_time_expiry_flag = ('n');
  1224  087E  306E               	movlw	110
  1225  087F  1283               	bcf	3,5	;RP0=0, select bank0
  1226  0880  1303               	bcf	3,6	;RP1=0, select bank0
  1227  0881  00A4               	movwf	??_Reset_Process
  1228  0882  0824               	movf	??_Reset_Process,w
  1229  0883  1683               	bsf	3,5	;RP0=1, select bank1
  1230  0884  1303               	bcf	3,6	;RP1=0, select bank1
  1231  0885  00EC               	movwf	_cur_stage_time_expiry_flag^(0+128)
  1232                           
  1233                           ;adc7.c: 330: cur_stage_time_enable_flag = ('n');
  1234  0886  306E               	movlw	110
  1235  0887  1283               	bcf	3,5	;RP0=0, select bank0
  1236  0888  1303               	bcf	3,6	;RP1=0, select bank0
  1237  0889  00A4               	movwf	??_Reset_Process
  1238  088A  0824               	movf	??_Reset_Process,w
  1239  088B  1683               	bsf	3,5	;RP0=1, select bank1
  1240  088C  1303               	bcf	3,6	;RP1=0, select bank1
  1241  088D  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  1242                           
  1243                           ;adc7.c: 331: mix_fsm_state = (0U);
  1244  088E  01E6               	clrf	_mix_fsm_state^(0+128)
  1245  088F  01E7               	clrf	(_mix_fsm_state+1)^(0+128)
  1246                           
  1247                           ;adc7.c: 332: Write_LCD_Command(0x01);
  1248  0890  3001               	movlw	1
  1249  0891  00F0               	movwf	Write_LCD_Command@cmd
  1250  0892  3000               	movlw	0
  1251  0893  00F1               	movwf	Write_LCD_Command@cmd+1
  1252  0894  120A  158A  2281  120A  158A  	fcall	_Write_LCD_Command
  1253                           
  1254                           ;adc7.c: 333: LCD_Const_Disp();
  1255  0899  120A  158A  235C   	fcall	_LCD_Const_Disp
  1256                           
  1257                           ;adc7.c: 334: cur_line_disp_data[((3U))] = (2U);
  1258  089C  3002               	movlw	2
  1259  089D  1683               	bsf	3,5	;RP0=1, select bank3
  1260  089E  1703               	bsf	3,6	;RP1=1, select bank3
  1261  089F  00B0               	movwf	(_cur_line_disp_data^(0+384)+6)
  1262  08A0  3000               	movlw	0
  1263  08A1  00B1               	movwf	(_cur_line_disp_data^(0+384)+7)
  1264  08A2  0008               	return
  1265  08A3                     __end_of_Reset_Process:	
  1266                           
  1267                           	psect	text2
  1268  0B5C                     __ptext2:	
  1269 ;; *************** function _LCD_Const_Disp *****************
  1270 ;; Defined at:
  1271 ;;		line 876 in file "adc7.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;		None
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1285 ;;      Params:         0       0       0       0       0
  1286 ;;      Locals:         0       0       0       0       0
  1287 ;;      Temps:          0       0       0       0       0
  1288 ;;      Totals:         0       0       0       0       0
  1289 ;;Total ram usage:        0 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; Hardware stack levels required when called:    2
  1292 ;; This function calls:
  1293 ;;		_Data_Str_Disp_LCD
  1294 ;;		_Goto_XY_LCD_Disp
  1295 ;;		_Write_LCD_Data
  1296 ;; This function is called by:
  1297 ;;		_main
  1298 ;;		_Reset_Process
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           
  1303                           ;psect for function _LCD_Const_Disp
  1304  0B5C                     _LCD_Const_Disp:	
  1305                           
  1306                           ;adc7.c: 878: const char vol_signal_rep_disp[] = " Vol", reseveriour_msg_disp[] = "R:", 
      +                          vessel_msg_disp[] = "V:";
  1307                           ;adc7.c: 881: Goto_XY_LCD_Disp(((1U)), (1U));
  1308                           
  1309                           ;incstack = 0
  1310                           ; Regs used in _LCD_Const_Disp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1311  0B5C  3001               	movlw	1
  1312  0B5D  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1313  0B5E  3000               	movlw	0
  1314  0B5F  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1315  0B60  3001               	movlw	1
  1316  0B61  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1317  0B62  3000               	movlw	0
  1318  0B63  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1319  0B64  120A  158A  216C  120A  158A  	fcall	_Goto_XY_LCD_Disp
  1320                           
  1321                           ;adc7.c: 882: Data_Str_Disp_LCD(reseveriour_msg_disp);
  1322  0B69  301E               	movlw	(low ((LCD_Const_Disp@reseveriour_msg_disp-__stringbase)| (0+32768)))& (0+255)
  1323  0B6A  160A  118A  27A0  120A  158A  	fcall	_Data_Str_Disp_LCD
  1324                           
  1325                           ;adc7.c: 883: Goto_XY_LCD_Disp(((1U)), (((1U) + 2) + 3));
  1326  0B6F  3001               	movlw	1
  1327  0B70  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1328  0B71  3000               	movlw	0
  1329  0B72  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1330  0B73  3006               	movlw	6
  1331  0B74  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1332  0B75  3000               	movlw	0
  1333  0B76  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1334  0B77  120A  158A  216C  120A  158A  	fcall	_Goto_XY_LCD_Disp
  1335                           
  1336                           ;adc7.c: 884: Write_LCD_Data('.');
  1337  0B7C  302E               	movlw	46
  1338  0B7D  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  1339                           
  1340                           ;adc7.c: 885: Goto_XY_LCD_Disp(((1U)), ((((((1U) + 2) + 3) + 1) + 2) + 3));
  1341  0B82  3001               	movlw	1
  1342  0B83  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1343  0B84  3000               	movlw	0
  1344  0B85  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1345  0B86  300C               	movlw	12
  1346  0B87  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1347  0B88  3000               	movlw	0
  1348  0B89  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1349  0B8A  120A  158A  216C  120A  158A  	fcall	_Goto_XY_LCD_Disp
  1350                           
  1351                           ;adc7.c: 886: Write_LCD_Data('.');
  1352  0B8F  302E               	movlw	46
  1353  0B90  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  1354                           
  1355                           ;adc7.c: 887: Goto_XY_LCD_Disp(((1U)), (((((((((1U) + 2) + 3) + 1) + 2) + 3) + 1) + 2) +
      +                           3));
  1356  0B95  3001               	movlw	1
  1357  0B96  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1358  0B97  3000               	movlw	0
  1359  0B98  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1360  0B99  3012               	movlw	18
  1361  0B9A  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1362  0B9B  3000               	movlw	0
  1363  0B9C  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1364  0B9D  120A  158A  216C  120A  158A  	fcall	_Goto_XY_LCD_Disp
  1365                           
  1366                           ;adc7.c: 888: Write_LCD_Data('.');
  1367  0BA2  302E               	movlw	46
  1368  0BA3  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  1369                           
  1370                           ;adc7.c: 889: Goto_XY_LCD_Disp(((1U)), (((((((((((1U) + 2) + 3) + 1) + 2) + 3) + 1) + 2)
      +                           + 3) + 1) + 1));
  1371  0BA8  3001               	movlw	1
  1372  0BA9  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1373  0BAA  3000               	movlw	0
  1374  0BAB  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1375  0BAC  3014               	movlw	20
  1376  0BAD  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1377  0BAE  3000               	movlw	0
  1378  0BAF  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1379  0BB0  120A  158A  216C  120A  158A  	fcall	_Goto_XY_LCD_Disp
  1380                           
  1381                           ;adc7.c: 890: Data_Str_Disp_LCD("%");
  1382  0BB5  3030               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1383  0BB6  160A  118A  27A0  120A  158A  	fcall	_Data_Str_Disp_LCD
  1384                           
  1385                           ;adc7.c: 892: Goto_XY_LCD_Disp(((2U)), (1U));
  1386  0BBB  3002               	movlw	2
  1387  0BBC  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1388  0BBD  3000               	movlw	0
  1389  0BBE  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1390  0BBF  3001               	movlw	1
  1391  0BC0  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1392  0BC1  3000               	movlw	0
  1393  0BC2  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1394  0BC3  120A  158A  216C  120A  158A  	fcall	_Goto_XY_LCD_Disp
  1395                           
  1396                           ;adc7.c: 893: Data_Str_Disp_LCD(vessel_msg_disp);
  1397  0BC8  301B               	movlw	(low ((LCD_Const_Disp@vessel_msg_disp-__stringbase)| (0+32768)))& (0+255)
  1398  0BC9  160A  118A  27A0  120A  158A  	fcall	_Data_Str_Disp_LCD
  1399                           
  1400                           ;adc7.c: 894: Goto_XY_LCD_Disp(((2U)), (((((1U) + 2) + 5) + 5) + 4));
  1401  0BCE  3002               	movlw	2
  1402  0BCF  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1403  0BD0  3000               	movlw	0
  1404  0BD1  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1405  0BD2  3011               	movlw	17
  1406  0BD3  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1407  0BD4  3000               	movlw	0
  1408  0BD5  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1409  0BD6  120A  158A  216C  120A  158A  	fcall	_Goto_XY_LCD_Disp
  1410                           
  1411                           ;adc7.c: 895: Data_Str_Disp_LCD(vol_signal_rep_disp);
  1412  0BDB  300D               	movlw	(low ((LCD_Const_Disp@vol_signal_rep_disp-__stringbase)| (0+32768)))& (0+255)
  1413  0BDC  160A  118A  27A0   	fcall	_Data_Str_Disp_LCD
  1414  0BDF  0008               	return
  1415  0BE0                     __end_of_LCD_Const_Disp:	
  1416                           
  1417                           	psect	text3
  1418  01F4                     __ptext3:	
  1419 ;; *************** function _Mix_Fsm_Proc *****************
  1420 ;; Defined at:
  1421 ;;		line 349 in file "adc7.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  analog_val_i    4   52[BANK1 ] unsigned long 
  1426 ;;  analog_val_i    4   48[BANK1 ] unsigned long 
  1427 ;;  analog_val_i    4   44[BANK1 ] unsigned long 
  1428 ;;  analog_val_i    4   32[BANK1 ] unsigned long 
  1429 ;;  analog_val_i    4   28[BANK1 ] unsigned long 
  1430 ;;  analog_val_i    4   24[BANK1 ] unsigned long 
  1431 ;;  adc_value_vs    4   20[BANK1 ] unsigned long 
  1432 ;;  adc_value_vs    4   16[BANK1 ] unsigned long 
  1433 ;;  adc_value_vs    4   12[BANK1 ] unsigned long 
  1434 ;;  adc_value_rs    4    8[BANK1 ] unsigned long 
  1435 ;;  adc_value_rs    4    4[BANK1 ] unsigned long 
  1436 ;;  adc_value_rs    4    0[BANK1 ] unsigned long 
  1437 ;;  percent_int_    2   60[BANK1 ] unsigned int 
  1438 ;;  percent_int_    2   58[BANK1 ] unsigned int 
  1439 ;;  percent_int_    2   56[BANK1 ] unsigned int 
  1440 ;;  percent_frac    2   42[BANK1 ] unsigned int 
  1441 ;;  percent_frac    2   40[BANK1 ] unsigned int 
  1442 ;;  percent_frac    2   38[BANK1 ] unsigned int 
  1443 ;;  adc_channel     2   36[BANK1 ] unsigned int 
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1453 ;;      Params:         0       0       0       0       0
  1454 ;;      Locals:         0       0      62       0       0
  1455 ;;      Temps:          0       2       0       0       0
  1456 ;;      Totals:         0       2      62       0       0
  1457 ;;Total ram usage:       64 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    2
  1460 ;; This function calls:
  1461 ;;		_Data_Num_Disp_LCD
  1462 ;;		_Data_Str_Disp_LCD
  1463 ;;		_Delay_Time_ByCount
  1464 ;;		_Encoded_To_Actual_Analog_Val_Calc
  1465 ;;		_Encoded_To_Percent_Calc
  1466 ;;		_Goto_XY_LCD_Disp
  1467 ;;		_Read_ADC_Channel
  1468 ;;		_Run_Timer1
  1469 ;;		_Stop_Timer1
  1470 ;; This function is called by:
  1471 ;;		_main
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           
  1476                           ;psect for function _Mix_Fsm_Proc
  1477  01F4                     _Mix_Fsm_Proc:	
  1478                           
  1479                           ;adc7.c: 351: unsigned long analog_val_in_digital_int_vslcmt_ch, analog_val_in_digital_f
      +                          rac_vslcmt_ch, analog_val_in_digital_int_vslsand_ch, analog_val_in_digital_frac_vslsand_
      +                          ch,analog_val_in_digital_int_vslwater_ch, analog_val_in_digital_frac_vslwater_ch ;
  1480                           ;adc7.c: 353: unsigned int percent_int_rsvcmt_ch, percent_frac_rsvcmt_ch, percent_int_rs
      +                          vsand_ch, percent_frac_rsvsand_ch, percent_int_rsvwater_ch, percent_frac_rsvwater_ch ;
  1481                           ;adc7.c: 354: unsigned long adc_value_rsvcmt_ch, adc_value_rsvsand_ch, adc_value_rsvwate
      +                          r_ch, adc_value_vslcmt_ch, adc_value_vslsand_ch, adc_value_vslwater_ch;
  1482                           
  1483                           ;incstack = 0
  1484                           ; Regs used in _Mix_Fsm_Proc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1485  01F4  2FA4               	goto	l2225
  1486  01F5                     l1949:	
  1487                           ;adc7.c: 357: {
  1488                           ;adc7.c: 358: case (0U):
  1489                           
  1490                           
  1491                           ;adc7.c: 359: if(restart_pressed_flag == ('y'))
  1492  01F5  3079               	movlw	121
  1493  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1494  01F7  1303               	bcf	3,6	;RP1=0, select bank1
  1495  01F8  066A               	xorwf	_restart_pressed_flag^(0+128),w
  1496  01F9  1D03               	btfss	3,2
  1497  01FA  0008               	return
  1498                           
  1499                           ;adc7.c: 360: {
  1500                           ;adc7.c: 361: cur_stage_time_left = (15U);
  1501  01FB  300F               	movlw	15
  1502  01FC  00E4               	movwf	_cur_stage_time_left^(0+128)
  1503  01FD  3000               	movlw	0
  1504  01FE  00E5               	movwf	(_cur_stage_time_left^(0+128)+1)
  1505                           
  1506                           ;adc7.c: 362: cur_stage_time_enable_flag = ('y');
  1507  01FF  3079               	movlw	121
  1508  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1510  0202  00DF               	movwf	??_Mix_Fsm_Proc
  1511  0203  085F               	movf	??_Mix_Fsm_Proc,w
  1512  0204  1683               	bsf	3,5	;RP0=1, select bank1
  1513  0205  1303               	bcf	3,6	;RP1=0, select bank1
  1514  0206  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  1515                           
  1516                           ;adc7.c: 363: Run_Timer1((1U));
  1517  0207  3001               	movlw	1
  1518  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1519  0209  1303               	bcf	3,6	;RP1=0, select bank0
  1520  020A  00AD               	movwf	Run_Timer1@set_timer1_mode
  1521  020B  3000               	movlw	0
  1522  020C  00AE               	movwf	Run_Timer1@set_timer1_mode+1
  1523  020D  120A  118A  2071   	fcall	_Run_Timer1
  1524                           
  1525                           ;adc7.c: 364: mix_fsm_state = (1U);
  1526  0210  3001               	movlw	1
  1527  0211  1683               	bsf	3,5	;RP0=1, select bank1
  1528  0212  1303               	bcf	3,6	;RP1=0, select bank1
  1529  0213  00E6               	movwf	_mix_fsm_state^(0+128)
  1530  0214  3000               	movlw	0
  1531  0215  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  1532                           
  1533                           ;adc7.c: 365: restart_pressed_flag = ('n');
  1534  0216  306E               	movlw	110
  1535  0217  1283               	bcf	3,5	;RP0=0, select bank0
  1536  0218  1303               	bcf	3,6	;RP1=0, select bank0
  1537  0219  00DF               	movwf	??_Mix_Fsm_Proc
  1538  021A  085F               	movf	??_Mix_Fsm_Proc,w
  1539  021B  1683               	bsf	3,5	;RP0=1, select bank1
  1540  021C  1303               	bcf	3,6	;RP1=0, select bank1
  1541  021D  00EA               	movwf	_restart_pressed_flag^(0+128)
  1542                           
  1543                           ;adc7.c: 366: }
  1544                           ;adc7.c: 367: break;
  1545  021E  0008               	return
  1546  021F                     l1959:	
  1547                           ;adc7.c: 368: case (1U):
  1548                           
  1549                           
  1550                           ;adc7.c: 369: adc_channel = (0U);
  1551  021F  01C4               	clrf	Mix_Fsm_Proc@adc_channel^(0+128)
  1552  0220  01C5               	clrf	(Mix_Fsm_Proc@adc_channel+1)^(0+128)
  1553                           
  1554                           ;adc7.c: 370: adc_value_rsvcmt_ch = Read_ADC_Channel((0U));
  1555  0221  3000               	movlw	0
  1556  0222  00F6               	movwf	Read_ADC_Channel@adc_channel
  1557  0223  00F7               	movwf	Read_ADC_Channel@adc_channel+1
  1558  0224  120A  158A  221B  120A  118A  	fcall	_Read_ADC_Channel
  1559  0229  0879               	movf	?_Read_ADC_Channel+3,w
  1560  022A  1683               	bsf	3,5	;RP0=1, select bank1
  1561  022B  1303               	bcf	3,6	;RP1=0, select bank1
  1562  022C  00A3               	movwf	(Mix_Fsm_Proc@adc_value_rsvcmt_ch+3)^(0+128)
  1563  022D  0878               	movf	?_Read_ADC_Channel+2,w
  1564  022E  00A2               	movwf	(Mix_Fsm_Proc@adc_value_rsvcmt_ch+2)^(0+128)
  1565  022F  0877               	movf	?_Read_ADC_Channel+1,w
  1566  0230  00A1               	movwf	(Mix_Fsm_Proc@adc_value_rsvcmt_ch+1)^(0+128)
  1567  0231  0876               	movf	?_Read_ADC_Channel,w
  1568  0232  00A0               	movwf	Mix_Fsm_Proc@adc_value_rsvcmt_ch^(0+128)
  1569                           
  1570                           ;adc7.c: 371: Encoded_To_Percent_Calc(adc_value_rsvcmt_ch,&percent_int_rsvcmt_ch,&percen
      +                          t_frac_rsvcmt_ch);
  1571  0233  0823               	movf	(Mix_Fsm_Proc@adc_value_rsvcmt_ch+3)^(0+128),w
  1572  0234  1283               	bcf	3,5	;RP0=0, select bank0
  1573  0235  1303               	bcf	3,6	;RP1=0, select bank0
  1574  0236  00B0               	movwf	Encoded_To_Percent_Calc@adc_value+3
  1575  0237  1683               	bsf	3,5	;RP0=1, select bank1
  1576  0238  1303               	bcf	3,6	;RP1=0, select bank1
  1577  0239  0822               	movf	(Mix_Fsm_Proc@adc_value_rsvcmt_ch+2)^(0+128),w
  1578  023A  1283               	bcf	3,5	;RP0=0, select bank0
  1579  023B  1303               	bcf	3,6	;RP1=0, select bank0
  1580  023C  00AF               	movwf	Encoded_To_Percent_Calc@adc_value+2
  1581  023D  1683               	bsf	3,5	;RP0=1, select bank1
  1582  023E  1303               	bcf	3,6	;RP1=0, select bank1
  1583  023F  0821               	movf	(Mix_Fsm_Proc@adc_value_rsvcmt_ch+1)^(0+128),w
  1584  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1585  0241  1303               	bcf	3,6	;RP1=0, select bank0
  1586  0242  00AE               	movwf	Encoded_To_Percent_Calc@adc_value+1
  1587  0243  1683               	bsf	3,5	;RP0=1, select bank1
  1588  0244  1303               	bcf	3,6	;RP1=0, select bank1
  1589  0245  0820               	movf	Mix_Fsm_Proc@adc_value_rsvcmt_ch^(0+128),w
  1590  0246  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0247  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0248  00AD               	movwf	Encoded_To_Percent_Calc@adc_value
  1593  0249  30D8               	movlw	(low (Mix_Fsm_Proc@percent_int_rsvcmt_ch| 0))& (0+255)
  1594  024A  00DF               	movwf	??_Mix_Fsm_Proc
  1595  024B  085F               	movf	??_Mix_Fsm_Proc,w
  1596  024C  00B1               	movwf	Encoded_To_Percent_Calc@percent_int
  1597  024D  30C6               	movlw	(low (Mix_Fsm_Proc@percent_frac_rsvcmt_ch| 0))& (0+255)
  1598  024E  00E0               	movwf	??_Mix_Fsm_Proc+1
  1599  024F  0860               	movf	??_Mix_Fsm_Proc+1,w
  1600  0250  00B2               	movwf	Encoded_To_Percent_Calc@percent_frac
  1601  0251  120A  158A  23E0  120A  118A  	fcall	_Encoded_To_Percent_Calc
  1602                           
  1603                           ;adc7.c: 372: Goto_XY_LCD_Disp(((1U)), ((1U) + 2));
  1604  0256  3001               	movlw	1
  1605  0257  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1606  0258  3000               	movlw	0
  1607  0259  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1608  025A  3003               	movlw	3
  1609  025B  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1610  025C  3000               	movlw	0
  1611  025D  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1612  025E  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  1613                           
  1614                           ;adc7.c: 373: Data_Num_Disp_LCD((3),percent_int_rsvcmt_ch );
  1615  0263  3003               	movlw	3
  1616  0264  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0265  1303               	bcf	3,6	;RP1=0, select bank0
  1618  0266  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  1619  0267  3000               	movlw	0
  1620  0268  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  1621  0269  1683               	bsf	3,5	;RP0=1, select bank1
  1622  026A  1303               	bcf	3,6	;RP1=0, select bank1
  1623  026B  0858               	movf	Mix_Fsm_Proc@percent_int_rsvcmt_ch^(0+128),w
  1624  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1625  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1626  026E  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  1627  026F  1683               	bsf	3,5	;RP0=1, select bank1
  1628  0270  1303               	bcf	3,6	;RP1=0, select bank1
  1629  0271  0859               	movf	(Mix_Fsm_Proc@percent_int_rsvcmt_ch+1)^(0+128),w
  1630  0272  1283               	bcf	3,5	;RP0=0, select bank0
  1631  0273  1303               	bcf	3,6	;RP1=0, select bank0
  1632  0274  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  1633  0275  01B1               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  1634  0276  01B2               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  1635  0277  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  1636                           
  1637                           ;adc7.c: 374: Goto_XY_LCD_Disp(((1U)), ((((1U) + 2) + 3) + 1));
  1638  027C  3001               	movlw	1
  1639  027D  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1640  027E  3000               	movlw	0
  1641  027F  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1642  0280  3007               	movlw	7
  1643  0281  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1644  0282  3000               	movlw	0
  1645  0283  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1646  0284  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  1647                           
  1648                           ;adc7.c: 375: Data_Num_Disp_LCD((1), percent_frac_rsvcmt_ch);
  1649  0289  3001               	movlw	1
  1650  028A  1283               	bcf	3,5	;RP0=0, select bank0
  1651  028B  1303               	bcf	3,6	;RP1=0, select bank0
  1652  028C  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  1653  028D  3000               	movlw	0
  1654  028E  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  1655  028F  1683               	bsf	3,5	;RP0=1, select bank1
  1656  0290  1303               	bcf	3,6	;RP1=0, select bank1
  1657  0291  0846               	movf	Mix_Fsm_Proc@percent_frac_rsvcmt_ch^(0+128),w
  1658  0292  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0293  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0294  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  1661  0295  1683               	bsf	3,5	;RP0=1, select bank1
  1662  0296  1303               	bcf	3,6	;RP1=0, select bank1
  1663  0297  0847               	movf	(Mix_Fsm_Proc@percent_frac_rsvcmt_ch+1)^(0+128),w
  1664  0298  1283               	bcf	3,5	;RP0=0, select bank0
  1665  0299  1303               	bcf	3,6	;RP1=0, select bank0
  1666  029A  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  1667  029B  01B1               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  1668  029C  01B2               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  1669  029D  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  1670                           
  1671                           ;adc7.c: 376: if(percent_int_rsvcmt_ch < (25U))
  1672  02A2  3000               	movlw	0
  1673  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  1674  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  1675  02A5  0259               	subwf	(Mix_Fsm_Proc@percent_int_rsvcmt_ch+1)^(0+128),w
  1676  02A6  3019               	movlw	25
  1677  02A7  1903               	skipnz
  1678  02A8  0258               	subwf	Mix_Fsm_Proc@percent_int_rsvcmt_ch^(0+128),w
  1679  02A9  1803               	skipnc
  1680  02AA  2AC6               	goto	l1983
  1681                           
  1682                           ;adc7.c: 377: {
  1683                           ;adc7.c: 378: cur_stage_time_enable_flag = ('n');
  1684  02AB  306E               	movlw	110
  1685  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  1686  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  1687  02AE  00DF               	movwf	??_Mix_Fsm_Proc
  1688  02AF  085F               	movf	??_Mix_Fsm_Proc,w
  1689  02B0  1683               	bsf	3,5	;RP0=1, select bank1
  1690  02B1  1303               	bcf	3,6	;RP1=0, select bank1
  1691  02B2  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  1692                           
  1693                           ;adc7.c: 379: RB7 = (1);
  1694  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1695  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  1696  02B5  1786               	bsf	6,7	;volatile
  1697                           
  1698                           ;adc7.c: 380: restart_sw_enable_flag = ('y');
  1699  02B6  3079               	movlw	121
  1700  02B7  00DF               	movwf	??_Mix_Fsm_Proc
  1701  02B8  085F               	movf	??_Mix_Fsm_Proc,w
  1702  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  1703  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  1704  02BB  00EE               	movwf	_restart_sw_enable_flag^(0+128)
  1705                           
  1706                           ;adc7.c: 381: Stop_Timer1();
  1707  02BC  160A  118A  276A   	fcall	_Stop_Timer1
  1708                           
  1709                           ;adc7.c: 382: mix_fsm_state = (6U);
  1710  02BF  3006               	movlw	6
  1711  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  1712  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  1713  02C2  00E6               	movwf	_mix_fsm_state^(0+128)
  1714  02C3  3000               	movlw	0
  1715  02C4  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  1716                           
  1717                           ;adc7.c: 383: break;
  1718  02C5  0008               	return
  1719  02C6                     l1983:	
  1720                           
  1721                           ;adc7.c: 384: }
  1722                           ;adc7.c: 385: if(cur_stage_time_expiry_flag == ('y'))
  1723  02C6  3079               	movlw	121
  1724  02C7  066C               	xorwf	_cur_stage_time_expiry_flag^(0+128),w
  1725  02C8  1D03               	btfss	3,2
  1726  02C9  2AE0               	goto	l181
  1727                           
  1728                           ;adc7.c: 386: {
  1729                           ;adc7.c: 387: Stop_Timer1();
  1730  02CA  160A  118A  276A   	fcall	_Stop_Timer1
  1731                           
  1732                           ;adc7.c: 388: cur_stage_time_enable_flag = ('n');
  1733  02CD  306E               	movlw	110
  1734  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1735  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  1736  02D0  00DF               	movwf	??_Mix_Fsm_Proc
  1737  02D1  085F               	movf	??_Mix_Fsm_Proc,w
  1738  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  1739  02D3  1303               	bcf	3,6	;RP1=0, select bank1
  1740  02D4  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  1741                           
  1742                           ;adc7.c: 389: RB1 = (1);
  1743  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  1744  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  1745  02D7  1486               	bsf	6,1	;volatile
  1746                           
  1747                           ;adc7.c: 390: RD4 = (0);
  1748  02D8  1208               	bcf	8,4	;volatile
  1749                           
  1750                           ;adc7.c: 391: mix_fsm_state = (6U);
  1751  02D9  3006               	movlw	6
  1752  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  1753  02DB  1303               	bcf	3,6	;RP1=0, select bank1
  1754  02DC  00E6               	movwf	_mix_fsm_state^(0+128)
  1755  02DD  3000               	movlw	0
  1756  02DE  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  1757                           
  1758                           ;adc7.c: 392: break;
  1759  02DF  0008               	return
  1760  02E0                     l181:	
  1761                           
  1762                           ;adc7.c: 393: }
  1763                           ;adc7.c: 394: RD4 = (1);
  1764  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  1765  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  1766  02E2  1608               	bsf	8,4	;volatile
  1767                           
  1768                           ;adc7.c: 395: Delay_Time_ByCount((1000UL));
  1769  02E3  30E8               	movlw	232
  1770  02E4  00F0               	movwf	Delay_Time_ByCount@time_delay
  1771  02E5  3003               	movlw	3
  1772  02E6  00F1               	movwf	Delay_Time_ByCount@time_delay+1
  1773  02E7  160A  118A  275D  120A  118A  	fcall	_Delay_Time_ByCount
  1774                           
  1775                           ;adc7.c: 396: adc_channel = (3U);
  1776  02EC  3003               	movlw	3
  1777  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  1778  02EE  1303               	bcf	3,6	;RP1=0, select bank1
  1779  02EF  00C4               	movwf	Mix_Fsm_Proc@adc_channel^(0+128)
  1780  02F0  3000               	movlw	0
  1781  02F1  00C5               	movwf	(Mix_Fsm_Proc@adc_channel^(0+128)+1)
  1782                           
  1783                           ;adc7.c: 397: adc_value_vslcmt_ch = Read_ADC_Channel((3U));
  1784  02F2  3003               	movlw	3
  1785  02F3  00F6               	movwf	Read_ADC_Channel@adc_channel
  1786  02F4  3000               	movlw	0
  1787  02F5  00F7               	movwf	Read_ADC_Channel@adc_channel+1
  1788  02F6  120A  158A  221B  120A  118A  	fcall	_Read_ADC_Channel
  1789  02FB  0879               	movf	?_Read_ADC_Channel+3,w
  1790  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  1791  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  1792  02FE  00AF               	movwf	(Mix_Fsm_Proc@adc_value_vslcmt_ch+3)^(0+128)
  1793  02FF  0878               	movf	?_Read_ADC_Channel+2,w
  1794  0300  00AE               	movwf	(Mix_Fsm_Proc@adc_value_vslcmt_ch+2)^(0+128)
  1795  0301  0877               	movf	?_Read_ADC_Channel+1,w
  1796  0302  00AD               	movwf	(Mix_Fsm_Proc@adc_value_vslcmt_ch+1)^(0+128)
  1797  0303  0876               	movf	?_Read_ADC_Channel,w
  1798  0304  00AC               	movwf	Mix_Fsm_Proc@adc_value_vslcmt_ch^(0+128)
  1799                           
  1800                           ;adc7.c: 398: Encoded_To_Actual_Analog_Val_Calc(adc_value_vslcmt_ch, (((512UL)) - ((0U))
      +                          ), (0U), &analog_val_in_digital_int_vslcmt_ch,&analog_val_in_digital_frac_vslcmt_ch );
  1801  0305  082F               	movf	(Mix_Fsm_Proc@adc_value_vslcmt_ch+3)^(0+128),w
  1802  0306  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0307  1303               	bcf	3,6	;RP1=0, select bank0
  1804  0308  00A3               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value+3
  1805  0309  1683               	bsf	3,5	;RP0=1, select bank1
  1806  030A  1303               	bcf	3,6	;RP1=0, select bank1
  1807  030B  082E               	movf	(Mix_Fsm_Proc@adc_value_vslcmt_ch+2)^(0+128),w
  1808  030C  1283               	bcf	3,5	;RP0=0, select bank0
  1809  030D  1303               	bcf	3,6	;RP1=0, select bank0
  1810  030E  00A2               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value+2
  1811  030F  1683               	bsf	3,5	;RP0=1, select bank1
  1812  0310  1303               	bcf	3,6	;RP1=0, select bank1
  1813  0311  082D               	movf	(Mix_Fsm_Proc@adc_value_vslcmt_ch+1)^(0+128),w
  1814  0312  1283               	bcf	3,5	;RP0=0, select bank0
  1815  0313  1303               	bcf	3,6	;RP1=0, select bank0
  1816  0314  00A1               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value+1
  1817  0315  1683               	bsf	3,5	;RP0=1, select bank1
  1818  0316  1303               	bcf	3,6	;RP1=0, select bank1
  1819  0317  082C               	movf	Mix_Fsm_Proc@adc_value_vslcmt_ch^(0+128),w
  1820  0318  1283               	bcf	3,5	;RP0=0, select bank0
  1821  0319  1303               	bcf	3,6	;RP1=0, select bank0
  1822  031A  00A0               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value
  1823  031B  3000               	movlw	0
  1824  031C  00A7               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+3
  1825  031D  3000               	movlw	0
  1826  031E  00A6               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+2
  1827  031F  3002               	movlw	2
  1828  0320  00A5               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+1
  1829  0321  3000               	movlw	0
  1830  0322  00A4               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog
  1831  0323  3000               	movlw	0
  1832  0324  00A8               	movwf	Encoded_To_Actual_Analog_Val_Calc@min_input_analog
  1833  0325  00A9               	movwf	Encoded_To_Actual_Analog_Val_Calc@min_input_analog+1
  1834  0326  30CC               	movlw	(low (Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch| 0))& (0+255)
  1835  0327  00DF               	movwf	??_Mix_Fsm_Proc
  1836  0328  085F               	movf	??_Mix_Fsm_Proc,w
  1837  0329  00AA               	movwf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int
  1838  032A  30B8               	movlw	(low (Mix_Fsm_Proc@analog_val_in_digital_frac_vslcmt_ch| 0))& (0+255)
  1839  032B  00E0               	movwf	??_Mix_Fsm_Proc+1
  1840  032C  0860               	movf	??_Mix_Fsm_Proc+1,w
  1841  032D  00AB               	movwf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac
  1842  032E  120A  158A  2485  120A  118A  	fcall	_Encoded_To_Actual_Analog_Val_Calc
  1843                           
  1844                           ;adc7.c: 400: Goto_XY_LCD_Disp(((2U)), ((1U) + 2));
  1845  0333  3002               	movlw	2
  1846  0334  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1847  0335  3000               	movlw	0
  1848  0336  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1849  0337  3003               	movlw	3
  1850  0338  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1851  0339  3000               	movlw	0
  1852  033A  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1853  033B  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  1854                           
  1855                           ;adc7.c: 401: Data_Num_Disp_LCD((4),analog_val_in_digital_int_vslcmt_ch );
  1856  0340  3004               	movlw	4
  1857  0341  1283               	bcf	3,5	;RP0=0, select bank0
  1858  0342  1303               	bcf	3,6	;RP1=0, select bank0
  1859  0343  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  1860  0344  3000               	movlw	0
  1861  0345  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  1862  0346  1683               	bsf	3,5	;RP0=1, select bank1
  1863  0347  1303               	bcf	3,6	;RP1=0, select bank1
  1864  0348  084F               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch+3)^(0+128),w
  1865  0349  1283               	bcf	3,5	;RP0=0, select bank0
  1866  034A  1303               	bcf	3,6	;RP1=0, select bank0
  1867  034B  00B2               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  1868  034C  1683               	bsf	3,5	;RP0=1, select bank1
  1869  034D  1303               	bcf	3,6	;RP1=0, select bank1
  1870  034E  084E               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch+2)^(0+128),w
  1871  034F  1283               	bcf	3,5	;RP0=0, select bank0
  1872  0350  1303               	bcf	3,6	;RP1=0, select bank0
  1873  0351  00B1               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  1874  0352  1683               	bsf	3,5	;RP0=1, select bank1
  1875  0353  1303               	bcf	3,6	;RP1=0, select bank1
  1876  0354  084D               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch+1)^(0+128),w
  1877  0355  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0356  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0357  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  1880  0358  1683               	bsf	3,5	;RP0=1, select bank1
  1881  0359  1303               	bcf	3,6	;RP1=0, select bank1
  1882  035A  084C               	movf	Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch^(0+128),w
  1883  035B  1283               	bcf	3,5	;RP0=0, select bank0
  1884  035C  1303               	bcf	3,6	;RP1=0, select bank0
  1885  035D  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  1886  035E  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  1887                           
  1888                           ;adc7.c: 402: if(analog_val_in_digital_int_vslcmt_ch >= (100U))
  1889  0363  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0364  1303               	bcf	3,6	;RP1=0, select bank1
  1891  0365  084F               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch+3)^(0+128),w
  1892  0366  1D03               	btfss	3,2
  1893  0367  2B74               	goto	l2009
  1894  0368  084E               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch+2)^(0+128),w
  1895  0369  1D03               	btfss	3,2
  1896  036A  2B74               	goto	l2009
  1897  036B  084D               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch+1)^(0+128),w
  1898  036C  1D03               	btfss	3,2
  1899  036D  2B74               	goto	l2009
  1900  036E  3064               	movlw	100
  1901  036F  024C               	subwf	Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch^(0+128),w
  1902  0370  1D03               	skipz
  1903  0371  2B72               	goto	u1413
  1904  0372                     u1413:	
  1905  0372  1C03               	btfss	3,0
  1906  0373  0008               	return
  1907  0374                     l2009:	
  1908                           
  1909                           ;adc7.c: 403: {
  1910                           ;adc7.c: 404: cur_stage_time_enable_flag = ('n');
  1911  0374  306E               	movlw	110
  1912  0375  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0376  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0377  00DF               	movwf	??_Mix_Fsm_Proc
  1915  0378  085F               	movf	??_Mix_Fsm_Proc,w
  1916  0379  1683               	bsf	3,5	;RP0=1, select bank1
  1917  037A  1303               	bcf	3,6	;RP1=0, select bank1
  1918  037B  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  1919                           
  1920                           ;adc7.c: 405: RD4 = (0);
  1921  037C  1283               	bcf	3,5	;RP0=0, select bank0
  1922  037D  1303               	bcf	3,6	;RP1=0, select bank0
  1923  037E  1208               	bcf	8,4	;volatile
  1924                           
  1925                           ;adc7.c: 406: Stop_Timer1();
  1926  037F  160A  118A  276A  120A  118A  	fcall	_Stop_Timer1
  1927                           
  1928                           ;adc7.c: 407: mix_fsm_state = (2U);
  1929  0384  3002               	movlw	2
  1930  0385  1683               	bsf	3,5	;RP0=1, select bank1
  1931  0386  1303               	bcf	3,6	;RP1=0, select bank1
  1932  0387  00E6               	movwf	_mix_fsm_state^(0+128)
  1933  0388  3000               	movlw	0
  1934  0389  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  1935                           
  1936                           ;adc7.c: 408: cur_stage_time_enable_flag = ('y');
  1937  038A  3079               	movlw	121
  1938  038B  1283               	bcf	3,5	;RP0=0, select bank0
  1939  038C  1303               	bcf	3,6	;RP1=0, select bank0
  1940  038D  00DF               	movwf	??_Mix_Fsm_Proc
  1941  038E  085F               	movf	??_Mix_Fsm_Proc,w
  1942  038F  1683               	bsf	3,5	;RP0=1, select bank1
  1943  0390  1303               	bcf	3,6	;RP1=0, select bank1
  1944  0391  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  1945                           
  1946                           ;adc7.c: 409: cur_stage_time_left = (15U);
  1947  0392  300F               	movlw	15
  1948  0393  00E4               	movwf	_cur_stage_time_left^(0+128)
  1949  0394  3000               	movlw	0
  1950  0395  00E5               	movwf	(_cur_stage_time_left^(0+128)+1)
  1951                           
  1952                           ;adc7.c: 410: Run_Timer1((2U));
  1953  0396  3002               	movlw	2
  1954  0397  1283               	bcf	3,5	;RP0=0, select bank0
  1955  0398  1303               	bcf	3,6	;RP1=0, select bank0
  1956  0399  00AD               	movwf	Run_Timer1@set_timer1_mode
  1957  039A  3000               	movlw	0
  1958  039B  00AE               	movwf	Run_Timer1@set_timer1_mode+1
  1959  039C  120A  118A  2071  120A  118A  	fcall	_Run_Timer1
  1960                           
  1961                           ;adc7.c: 412: Goto_XY_LCD_Disp(4,4);
  1962  03A1  3004               	movlw	4
  1963  03A2  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  1964  03A3  3000               	movlw	0
  1965  03A4  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  1966  03A5  3004               	movlw	4
  1967  03A6  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  1968  03A7  3000               	movlw	0
  1969  03A8  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  1970  03A9  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  1971                           
  1972                           ;adc7.c: 413: Data_Str_Disp_LCD("CM");
  1973  03AE  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1974  03AF  160A  118A  27A0   	fcall	_Data_Str_Disp_LCD
  1975                           
  1976                           ;adc7.c: 414: }
  1977                           ;adc7.c: 415: break;
  1978  03B2  0008               	return
  1979  03B3                     l2025:	
  1980                           ;adc7.c: 416: case (2U):
  1981                           
  1982                           
  1983                           ;adc7.c: 417: Delay_Time_ByCount((1000UL));
  1984  03B3  30E8               	movlw	232
  1985  03B4  00F0               	movwf	Delay_Time_ByCount@time_delay
  1986  03B5  3003               	movlw	3
  1987  03B6  00F1               	movwf	Delay_Time_ByCount@time_delay+1
  1988  03B7  160A  118A  275D  120A  118A  	fcall	_Delay_Time_ByCount
  1989                           
  1990                           ;adc7.c: 418: adc_channel = (1U);
  1991  03BC  3001               	movlw	1
  1992  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  1993  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  1994  03BF  00C4               	movwf	Mix_Fsm_Proc@adc_channel^(0+128)
  1995  03C0  3000               	movlw	0
  1996  03C1  00C5               	movwf	(Mix_Fsm_Proc@adc_channel^(0+128)+1)
  1997                           
  1998                           ;adc7.c: 419: adc_value_rsvsand_ch = Read_ADC_Channel((1U));
  1999  03C2  3001               	movlw	1
  2000  03C3  00F6               	movwf	Read_ADC_Channel@adc_channel
  2001  03C4  3000               	movlw	0
  2002  03C5  00F7               	movwf	Read_ADC_Channel@adc_channel+1
  2003  03C6  120A  158A  221B  120A  118A  	fcall	_Read_ADC_Channel
  2004  03CB  0879               	movf	?_Read_ADC_Channel+3,w
  2005  03CC  1683               	bsf	3,5	;RP0=1, select bank1
  2006  03CD  1303               	bcf	3,6	;RP1=0, select bank1
  2007  03CE  00A7               	movwf	(Mix_Fsm_Proc@adc_value_rsvsand_ch+3)^(0+128)
  2008  03CF  0878               	movf	?_Read_ADC_Channel+2,w
  2009  03D0  00A6               	movwf	(Mix_Fsm_Proc@adc_value_rsvsand_ch+2)^(0+128)
  2010  03D1  0877               	movf	?_Read_ADC_Channel+1,w
  2011  03D2  00A5               	movwf	(Mix_Fsm_Proc@adc_value_rsvsand_ch+1)^(0+128)
  2012  03D3  0876               	movf	?_Read_ADC_Channel,w
  2013  03D4  00A4               	movwf	Mix_Fsm_Proc@adc_value_rsvsand_ch^(0+128)
  2014                           
  2015                           ;adc7.c: 420: Encoded_To_Percent_Calc(adc_value_rsvsand_ch,&percent_int_rsvsand_ch,&perc
      +                          ent_frac_rsvsand_ch );
  2016  03D5  0827               	movf	(Mix_Fsm_Proc@adc_value_rsvsand_ch+3)^(0+128),w
  2017  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2018  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2019  03D8  00B0               	movwf	Encoded_To_Percent_Calc@adc_value+3
  2020  03D9  1683               	bsf	3,5	;RP0=1, select bank1
  2021  03DA  1303               	bcf	3,6	;RP1=0, select bank1
  2022  03DB  0826               	movf	(Mix_Fsm_Proc@adc_value_rsvsand_ch+2)^(0+128),w
  2023  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  2024  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  2025  03DE  00AF               	movwf	Encoded_To_Percent_Calc@adc_value+2
  2026  03DF  1683               	bsf	3,5	;RP0=1, select bank1
  2027  03E0  1303               	bcf	3,6	;RP1=0, select bank1
  2028  03E1  0825               	movf	(Mix_Fsm_Proc@adc_value_rsvsand_ch+1)^(0+128),w
  2029  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  2030  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  2031  03E4  00AE               	movwf	Encoded_To_Percent_Calc@adc_value+1
  2032  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  2033  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  2034  03E7  0824               	movf	Mix_Fsm_Proc@adc_value_rsvsand_ch^(0+128),w
  2035  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2036  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  2037  03EA  00AD               	movwf	Encoded_To_Percent_Calc@adc_value
  2038  03EB  30DA               	movlw	(low (Mix_Fsm_Proc@percent_int_rsvsand_ch| 0))& (0+255)
  2039  03EC  00DF               	movwf	??_Mix_Fsm_Proc
  2040  03ED  085F               	movf	??_Mix_Fsm_Proc,w
  2041  03EE  00B1               	movwf	Encoded_To_Percent_Calc@percent_int
  2042  03EF  30C8               	movlw	(low (Mix_Fsm_Proc@percent_frac_rsvsand_ch| 0))& (0+255)
  2043  03F0  00E0               	movwf	??_Mix_Fsm_Proc+1
  2044  03F1  0860               	movf	??_Mix_Fsm_Proc+1,w
  2045  03F2  00B2               	movwf	Encoded_To_Percent_Calc@percent_frac
  2046  03F3  120A  158A  23E0  120A  118A  	fcall	_Encoded_To_Percent_Calc
  2047                           
  2048                           ;adc7.c: 421: Goto_XY_LCD_Disp(((1U)), (((((1U) + 2) + 3) + 1) + 2));
  2049  03F8  3001               	movlw	1
  2050  03F9  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  2051  03FA  3000               	movlw	0
  2052  03FB  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  2053  03FC  3009               	movlw	9
  2054  03FD  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  2055  03FE  3000               	movlw	0
  2056  03FF  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  2057  0400  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  2058                           
  2059                           ;adc7.c: 422: Data_Num_Disp_LCD((3),percent_int_rsvsand_ch);
  2060  0405  3003               	movlw	3
  2061  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2063  0408  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  2064  0409  3000               	movlw	0
  2065  040A  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  2066  040B  1683               	bsf	3,5	;RP0=1, select bank1
  2067  040C  1303               	bcf	3,6	;RP1=0, select bank1
  2068  040D  085A               	movf	Mix_Fsm_Proc@percent_int_rsvsand_ch^(0+128),w
  2069  040E  1283               	bcf	3,5	;RP0=0, select bank0
  2070  040F  1303               	bcf	3,6	;RP1=0, select bank0
  2071  0410  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  2072  0411  1683               	bsf	3,5	;RP0=1, select bank1
  2073  0412  1303               	bcf	3,6	;RP1=0, select bank1
  2074  0413  085B               	movf	(Mix_Fsm_Proc@percent_int_rsvsand_ch+1)^(0+128),w
  2075  0414  1283               	bcf	3,5	;RP0=0, select bank0
  2076  0415  1303               	bcf	3,6	;RP1=0, select bank0
  2077  0416  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  2078  0417  01B1               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  2079  0418  01B2               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  2080  0419  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  2081                           
  2082                           ;adc7.c: 423: Goto_XY_LCD_Disp(((1U)), (((((((1U) + 2) + 3) + 1) + 2) + 3) + 1));
  2083  041E  3001               	movlw	1
  2084  041F  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  2085  0420  3000               	movlw	0
  2086  0421  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  2087  0422  300D               	movlw	13
  2088  0423  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  2089  0424  3000               	movlw	0
  2090  0425  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  2091  0426  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  2092                           
  2093                           ;adc7.c: 424: Data_Num_Disp_LCD((1),percent_frac_rsvsand_ch );
  2094  042B  3001               	movlw	1
  2095  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2096  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2097  042E  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  2098  042F  3000               	movlw	0
  2099  0430  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  2100  0431  1683               	bsf	3,5	;RP0=1, select bank1
  2101  0432  1303               	bcf	3,6	;RP1=0, select bank1
  2102  0433  0848               	movf	Mix_Fsm_Proc@percent_frac_rsvsand_ch^(0+128),w
  2103  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2104  0435  1303               	bcf	3,6	;RP1=0, select bank0
  2105  0436  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  2106  0437  1683               	bsf	3,5	;RP0=1, select bank1
  2107  0438  1303               	bcf	3,6	;RP1=0, select bank1
  2108  0439  0849               	movf	(Mix_Fsm_Proc@percent_frac_rsvsand_ch+1)^(0+128),w
  2109  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2110  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2111  043C  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  2112  043D  01B1               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  2113  043E  01B2               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  2114  043F  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  2115                           
  2116                           ;adc7.c: 425: if(percent_int_rsvsand_ch < (25U))
  2117  0444  3000               	movlw	0
  2118  0445  1683               	bsf	3,5	;RP0=1, select bank1
  2119  0446  1303               	bcf	3,6	;RP1=0, select bank1
  2120  0447  025B               	subwf	(Mix_Fsm_Proc@percent_int_rsvsand_ch+1)^(0+128),w
  2121  0448  3019               	movlw	25
  2122  0449  1903               	skipnz
  2123  044A  025A               	subwf	Mix_Fsm_Proc@percent_int_rsvsand_ch^(0+128),w
  2124  044B  1803               	skipnc
  2125  044C  2C62               	goto	l2051
  2126                           
  2127                           ;adc7.c: 426: {
  2128                           ;adc7.c: 427: cur_stage_time_enable_flag = ('n');
  2129  044D  306E               	movlw	110
  2130  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2131  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2132  0450  00DF               	movwf	??_Mix_Fsm_Proc
  2133  0451  085F               	movf	??_Mix_Fsm_Proc,w
  2134  0452  1683               	bsf	3,5	;RP0=1, select bank1
  2135  0453  1303               	bcf	3,6	;RP1=0, select bank1
  2136  0454  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  2137                           
  2138                           ;adc7.c: 428: RB2 = (1);
  2139  0455  1283               	bcf	3,5	;RP0=0, select bank0
  2140  0456  1303               	bcf	3,6	;RP1=0, select bank0
  2141  0457  1506               	bsf	6,2	;volatile
  2142                           
  2143                           ;adc7.c: 429: Stop_Timer1();
  2144  0458  160A  118A  276A   	fcall	_Stop_Timer1
  2145                           
  2146                           ;adc7.c: 430: mix_fsm_state = (6U);
  2147  045B  3006               	movlw	6
  2148  045C  1683               	bsf	3,5	;RP0=1, select bank1
  2149  045D  1303               	bcf	3,6	;RP1=0, select bank1
  2150  045E  00E6               	movwf	_mix_fsm_state^(0+128)
  2151  045F  3000               	movlw	0
  2152  0460  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  2153                           
  2154                           ;adc7.c: 431: break;
  2155  0461  0008               	return
  2156  0462                     l2051:	
  2157                           
  2158                           ;adc7.c: 432: }
  2159                           ;adc7.c: 433: if(cur_stage_time_expiry_flag == ('y'))
  2160  0462  3079               	movlw	121
  2161  0463  066C               	xorwf	_cur_stage_time_expiry_flag^(0+128),w
  2162  0464  1D03               	btfss	3,2
  2163  0465  2C7C               	goto	l185
  2164                           
  2165                           ;adc7.c: 434: {
  2166                           ;adc7.c: 435: cur_stage_time_enable_flag = ('n');
  2167  0466  306E               	movlw	110
  2168  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2169  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2170  0469  00DF               	movwf	??_Mix_Fsm_Proc
  2171  046A  085F               	movf	??_Mix_Fsm_Proc,w
  2172  046B  1683               	bsf	3,5	;RP0=1, select bank1
  2173  046C  1303               	bcf	3,6	;RP1=0, select bank1
  2174  046D  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  2175                           
  2176                           ;adc7.c: 436: Stop_Timer1();
  2177  046E  160A  118A  276A   	fcall	_Stop_Timer1
  2178                           
  2179                           ;adc7.c: 437: RB3 = (1);
  2180  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2181  0472  1303               	bcf	3,6	;RP1=0, select bank0
  2182  0473  1586               	bsf	6,3	;volatile
  2183                           
  2184                           ;adc7.c: 438: RD5 = (0);
  2185  0474  1288               	bcf	8,5	;volatile
  2186                           
  2187                           ;adc7.c: 439: mix_fsm_state = (6U);
  2188  0475  3006               	movlw	6
  2189  0476  1683               	bsf	3,5	;RP0=1, select bank1
  2190  0477  1303               	bcf	3,6	;RP1=0, select bank1
  2191  0478  00E6               	movwf	_mix_fsm_state^(0+128)
  2192  0479  3000               	movlw	0
  2193  047A  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  2194                           
  2195                           ;adc7.c: 440: break;
  2196  047B  0008               	return
  2197  047C                     l185:	
  2198                           
  2199                           ;adc7.c: 441: }
  2200                           ;adc7.c: 442: RD5 = (1);
  2201  047C  1283               	bcf	3,5	;RP0=0, select bank0
  2202  047D  1303               	bcf	3,6	;RP1=0, select bank0
  2203  047E  1688               	bsf	8,5	;volatile
  2204                           
  2205                           ;adc7.c: 443: Delay_Time_ByCount((1000UL));
  2206  047F  30E8               	movlw	232
  2207  0480  00F0               	movwf	Delay_Time_ByCount@time_delay
  2208  0481  3003               	movlw	3
  2209  0482  00F1               	movwf	Delay_Time_ByCount@time_delay+1
  2210  0483  160A  118A  275D  120A  118A  	fcall	_Delay_Time_ByCount
  2211                           
  2212                           ;adc7.c: 444: adc_channel = (12U) ;
  2213  0488  300C               	movlw	12
  2214  0489  1683               	bsf	3,5	;RP0=1, select bank1
  2215  048A  1303               	bcf	3,6	;RP1=0, select bank1
  2216  048B  00C4               	movwf	Mix_Fsm_Proc@adc_channel^(0+128)
  2217  048C  3000               	movlw	0
  2218  048D  00C5               	movwf	(Mix_Fsm_Proc@adc_channel^(0+128)+1)
  2219                           
  2220                           ;adc7.c: 445: adc_value_vslsand_ch = Read_ADC_Channel((12U));
  2221  048E  300C               	movlw	12
  2222  048F  00F6               	movwf	Read_ADC_Channel@adc_channel
  2223  0490  3000               	movlw	0
  2224  0491  00F7               	movwf	Read_ADC_Channel@adc_channel+1
  2225  0492  120A  158A  221B  120A  118A  	fcall	_Read_ADC_Channel
  2226  0497  0879               	movf	?_Read_ADC_Channel+3,w
  2227  0498  1683               	bsf	3,5	;RP0=1, select bank1
  2228  0499  1303               	bcf	3,6	;RP1=0, select bank1
  2229  049A  00B3               	movwf	(Mix_Fsm_Proc@adc_value_vslsand_ch+3)^(0+128)
  2230  049B  0878               	movf	?_Read_ADC_Channel+2,w
  2231  049C  00B2               	movwf	(Mix_Fsm_Proc@adc_value_vslsand_ch+2)^(0+128)
  2232  049D  0877               	movf	?_Read_ADC_Channel+1,w
  2233  049E  00B1               	movwf	(Mix_Fsm_Proc@adc_value_vslsand_ch+1)^(0+128)
  2234  049F  0876               	movf	?_Read_ADC_Channel,w
  2235  04A0  00B0               	movwf	Mix_Fsm_Proc@adc_value_vslsand_ch^(0+128)
  2236                           
  2237                           ;adc7.c: 446: Encoded_To_Actual_Analog_Val_Calc(adc_value_vslsand_ch, (((512UL)) - ((0U)
      +                          )), (0U), &analog_val_in_digital_int_vslsand_ch,&analog_val_in_digital_frac_vslsand_ch )
      +                          ;
  2238  04A1  0833               	movf	(Mix_Fsm_Proc@adc_value_vslsand_ch+3)^(0+128),w
  2239  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2240  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2241  04A4  00A3               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value+3
  2242  04A5  1683               	bsf	3,5	;RP0=1, select bank1
  2243  04A6  1303               	bcf	3,6	;RP1=0, select bank1
  2244  04A7  0832               	movf	(Mix_Fsm_Proc@adc_value_vslsand_ch+2)^(0+128),w
  2245  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2246  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2247  04AA  00A2               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value+2
  2248  04AB  1683               	bsf	3,5	;RP0=1, select bank1
  2249  04AC  1303               	bcf	3,6	;RP1=0, select bank1
  2250  04AD  0831               	movf	(Mix_Fsm_Proc@adc_value_vslsand_ch+1)^(0+128),w
  2251  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  2252  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  2253  04B0  00A1               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value+1
  2254  04B1  1683               	bsf	3,5	;RP0=1, select bank1
  2255  04B2  1303               	bcf	3,6	;RP1=0, select bank1
  2256  04B3  0830               	movf	Mix_Fsm_Proc@adc_value_vslsand_ch^(0+128),w
  2257  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  2258  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  2259  04B6  00A0               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value
  2260  04B7  3000               	movlw	0
  2261  04B8  00A7               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+3
  2262  04B9  3000               	movlw	0
  2263  04BA  00A6               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+2
  2264  04BB  3002               	movlw	2
  2265  04BC  00A5               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+1
  2266  04BD  3000               	movlw	0
  2267  04BE  00A4               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog
  2268  04BF  3000               	movlw	0
  2269  04C0  00A8               	movwf	Encoded_To_Actual_Analog_Val_Calc@min_input_analog
  2270  04C1  00A9               	movwf	Encoded_To_Actual_Analog_Val_Calc@min_input_analog+1
  2271  04C2  30D0               	movlw	(low (Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch| 0))& (0+255)
  2272  04C3  00DF               	movwf	??_Mix_Fsm_Proc
  2273  04C4  085F               	movf	??_Mix_Fsm_Proc,w
  2274  04C5  00AA               	movwf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int
  2275  04C6  30BC               	movlw	(low (Mix_Fsm_Proc@analog_val_in_digital_frac_vslsand_ch| 0))& (0+255)
  2276  04C7  00E0               	movwf	??_Mix_Fsm_Proc+1
  2277  04C8  0860               	movf	??_Mix_Fsm_Proc+1,w
  2278  04C9  00AB               	movwf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac
  2279  04CA  120A  158A  2485  120A  118A  	fcall	_Encoded_To_Actual_Analog_Val_Calc
  2280                           
  2281                           ;adc7.c: 448: Goto_XY_LCD_Disp(((2U)), (((1U) + 2) + 5));
  2282  04CF  3002               	movlw	2
  2283  04D0  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  2284  04D1  3000               	movlw	0
  2285  04D2  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  2286  04D3  3008               	movlw	8
  2287  04D4  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  2288  04D5  3000               	movlw	0
  2289  04D6  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  2290  04D7  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  2291                           
  2292                           ;adc7.c: 449: Data_Num_Disp_LCD((4),analog_val_in_digital_int_vslsand_ch );
  2293  04DC  3004               	movlw	4
  2294  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  2295  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  2296  04DF  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  2297  04E0  3000               	movlw	0
  2298  04E1  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  2299  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  2300  04E3  1303               	bcf	3,6	;RP1=0, select bank1
  2301  04E4  0853               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch+3)^(0+128),w
  2302  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  2303  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  2304  04E7  00B2               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  2305  04E8  1683               	bsf	3,5	;RP0=1, select bank1
  2306  04E9  1303               	bcf	3,6	;RP1=0, select bank1
  2307  04EA  0852               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch+2)^(0+128),w
  2308  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  2309  04EC  1303               	bcf	3,6	;RP1=0, select bank0
  2310  04ED  00B1               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  2311  04EE  1683               	bsf	3,5	;RP0=1, select bank1
  2312  04EF  1303               	bcf	3,6	;RP1=0, select bank1
  2313  04F0  0851               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch+1)^(0+128),w
  2314  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  2315  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  2316  04F3  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  2317  04F4  1683               	bsf	3,5	;RP0=1, select bank1
  2318  04F5  1303               	bcf	3,6	;RP1=0, select bank1
  2319  04F6  0850               	movf	Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch^(0+128),w
  2320  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  2321  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  2322  04F9  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  2323  04FA  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  2324                           
  2325                           ;adc7.c: 450: if(analog_val_in_digital_int_vslsand_ch >= (100U))
  2326  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  2327  0500  1303               	bcf	3,6	;RP1=0, select bank1
  2328  0501  0853               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch+3)^(0+128),w
  2329  0502  1D03               	btfss	3,2
  2330  0503  2D10               	goto	l2077
  2331  0504  0852               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch+2)^(0+128),w
  2332  0505  1D03               	btfss	3,2
  2333  0506  2D10               	goto	l2077
  2334  0507  0851               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch+1)^(0+128),w
  2335  0508  1D03               	btfss	3,2
  2336  0509  2D10               	goto	l2077
  2337  050A  3064               	movlw	100
  2338  050B  0250               	subwf	Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch^(0+128),w
  2339  050C  1D03               	skipz
  2340  050D  2D0E               	goto	u1443
  2341  050E                     u1443:	
  2342  050E  1C03               	btfss	3,0
  2343  050F  0008               	return
  2344  0510                     l2077:	
  2345                           
  2346                           ;adc7.c: 451: {
  2347                           ;adc7.c: 452: cur_stage_time_enable_flag = ('n');
  2348  0510  306E               	movlw	110
  2349  0511  1283               	bcf	3,5	;RP0=0, select bank0
  2350  0512  1303               	bcf	3,6	;RP1=0, select bank0
  2351  0513  00DF               	movwf	??_Mix_Fsm_Proc
  2352  0514  085F               	movf	??_Mix_Fsm_Proc,w
  2353  0515  1683               	bsf	3,5	;RP0=1, select bank1
  2354  0516  1303               	bcf	3,6	;RP1=0, select bank1
  2355  0517  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  2356                           
  2357                           ;adc7.c: 453: RD5 = (0);
  2358  0518  1283               	bcf	3,5	;RP0=0, select bank0
  2359  0519  1303               	bcf	3,6	;RP1=0, select bank0
  2360  051A  1288               	bcf	8,5	;volatile
  2361                           
  2362                           ;adc7.c: 454: Stop_Timer1();
  2363  051B  160A  118A  276A  120A  118A  	fcall	_Stop_Timer1
  2364                           
  2365                           ;adc7.c: 455: mix_fsm_state = (3U);
  2366  0520  3003               	movlw	3
  2367  0521  1683               	bsf	3,5	;RP0=1, select bank1
  2368  0522  1303               	bcf	3,6	;RP1=0, select bank1
  2369  0523  00E6               	movwf	_mix_fsm_state^(0+128)
  2370  0524  3000               	movlw	0
  2371  0525  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  2372                           
  2373                           ;adc7.c: 456: cur_stage_time_enable_flag = ('y');
  2374  0526  3079               	movlw	121
  2375  0527  1283               	bcf	3,5	;RP0=0, select bank0
  2376  0528  1303               	bcf	3,6	;RP1=0, select bank0
  2377  0529  00DF               	movwf	??_Mix_Fsm_Proc
  2378  052A  085F               	movf	??_Mix_Fsm_Proc,w
  2379  052B  1683               	bsf	3,5	;RP0=1, select bank1
  2380  052C  1303               	bcf	3,6	;RP1=0, select bank1
  2381  052D  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  2382                           
  2383                           ;adc7.c: 457: cur_stage_time_left = (15U);
  2384  052E  300F               	movlw	15
  2385  052F  00E4               	movwf	_cur_stage_time_left^(0+128)
  2386  0530  3000               	movlw	0
  2387  0531  00E5               	movwf	(_cur_stage_time_left^(0+128)+1)
  2388                           
  2389                           ;adc7.c: 458: Run_Timer1((3U));
  2390  0532  3003               	movlw	3
  2391  0533  1283               	bcf	3,5	;RP0=0, select bank0
  2392  0534  1303               	bcf	3,6	;RP1=0, select bank0
  2393  0535  00AD               	movwf	Run_Timer1@set_timer1_mode
  2394  0536  3000               	movlw	0
  2395  0537  00AE               	movwf	Run_Timer1@set_timer1_mode+1
  2396  0538  120A  118A  2071  120A  118A  	fcall	_Run_Timer1
  2397                           
  2398                           ;adc7.c: 461: Goto_XY_LCD_Disp(4,7);
  2399  053D  3004               	movlw	4
  2400  053E  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  2401  053F  3000               	movlw	0
  2402  0540  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  2403  0541  3007               	movlw	7
  2404  0542  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  2405  0543  3000               	movlw	0
  2406  0544  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  2407  0545  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  2408                           
  2409                           ;adc7.c: 462: Data_Str_Disp_LCD("SA");
  2410  054A  3024               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2411  054B  160A  118A  27A0   	fcall	_Data_Str_Disp_LCD
  2412                           
  2413                           ;adc7.c: 463: }
  2414                           ;adc7.c: 464: break;
  2415  054E  0008               	return
  2416  054F                     l2093:	
  2417                           ;adc7.c: 465: case (3U):
  2418                           
  2419                           
  2420                           ;adc7.c: 466: Delay_Time_ByCount((1000UL));
  2421  054F  30E8               	movlw	232
  2422  0550  00F0               	movwf	Delay_Time_ByCount@time_delay
  2423  0551  3003               	movlw	3
  2424  0552  00F1               	movwf	Delay_Time_ByCount@time_delay+1
  2425  0553  160A  118A  275D  120A  118A  	fcall	_Delay_Time_ByCount
  2426                           
  2427                           ;adc7.c: 467: adc_channel = (2U);
  2428  0558  3002               	movlw	2
  2429  0559  1683               	bsf	3,5	;RP0=1, select bank1
  2430  055A  1303               	bcf	3,6	;RP1=0, select bank1
  2431  055B  00C4               	movwf	Mix_Fsm_Proc@adc_channel^(0+128)
  2432  055C  3000               	movlw	0
  2433  055D  00C5               	movwf	(Mix_Fsm_Proc@adc_channel^(0+128)+1)
  2434                           
  2435                           ;adc7.c: 468: adc_value_rsvwater_ch = Read_ADC_Channel((2U));
  2436  055E  3002               	movlw	2
  2437  055F  00F6               	movwf	Read_ADC_Channel@adc_channel
  2438  0560  3000               	movlw	0
  2439  0561  00F7               	movwf	Read_ADC_Channel@adc_channel+1
  2440  0562  120A  158A  221B  120A  118A  	fcall	_Read_ADC_Channel
  2441  0567  0879               	movf	?_Read_ADC_Channel+3,w
  2442  0568  1683               	bsf	3,5	;RP0=1, select bank1
  2443  0569  1303               	bcf	3,6	;RP1=0, select bank1
  2444  056A  00AB               	movwf	(Mix_Fsm_Proc@adc_value_rsvwater_ch+3)^(0+128)
  2445  056B  0878               	movf	?_Read_ADC_Channel+2,w
  2446  056C  00AA               	movwf	(Mix_Fsm_Proc@adc_value_rsvwater_ch+2)^(0+128)
  2447  056D  0877               	movf	?_Read_ADC_Channel+1,w
  2448  056E  00A9               	movwf	(Mix_Fsm_Proc@adc_value_rsvwater_ch+1)^(0+128)
  2449  056F  0876               	movf	?_Read_ADC_Channel,w
  2450  0570  00A8               	movwf	Mix_Fsm_Proc@adc_value_rsvwater_ch^(0+128)
  2451                           
  2452                           ;adc7.c: 469: Encoded_To_Percent_Calc(adc_value_rsvwater_ch,&percent_int_rsvwater_ch,&pe
      +                          rcent_frac_rsvwater_ch );
  2453  0571  082B               	movf	(Mix_Fsm_Proc@adc_value_rsvwater_ch+3)^(0+128),w
  2454  0572  1283               	bcf	3,5	;RP0=0, select bank0
  2455  0573  1303               	bcf	3,6	;RP1=0, select bank0
  2456  0574  00B0               	movwf	Encoded_To_Percent_Calc@adc_value+3
  2457  0575  1683               	bsf	3,5	;RP0=1, select bank1
  2458  0576  1303               	bcf	3,6	;RP1=0, select bank1
  2459  0577  082A               	movf	(Mix_Fsm_Proc@adc_value_rsvwater_ch+2)^(0+128),w
  2460  0578  1283               	bcf	3,5	;RP0=0, select bank0
  2461  0579  1303               	bcf	3,6	;RP1=0, select bank0
  2462  057A  00AF               	movwf	Encoded_To_Percent_Calc@adc_value+2
  2463  057B  1683               	bsf	3,5	;RP0=1, select bank1
  2464  057C  1303               	bcf	3,6	;RP1=0, select bank1
  2465  057D  0829               	movf	(Mix_Fsm_Proc@adc_value_rsvwater_ch+1)^(0+128),w
  2466  057E  1283               	bcf	3,5	;RP0=0, select bank0
  2467  057F  1303               	bcf	3,6	;RP1=0, select bank0
  2468  0580  00AE               	movwf	Encoded_To_Percent_Calc@adc_value+1
  2469  0581  1683               	bsf	3,5	;RP0=1, select bank1
  2470  0582  1303               	bcf	3,6	;RP1=0, select bank1
  2471  0583  0828               	movf	Mix_Fsm_Proc@adc_value_rsvwater_ch^(0+128),w
  2472  0584  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0585  1303               	bcf	3,6	;RP1=0, select bank0
  2474  0586  00AD               	movwf	Encoded_To_Percent_Calc@adc_value
  2475  0587  30DC               	movlw	(low (Mix_Fsm_Proc@percent_int_rsvwater_ch| 0))& (0+255)
  2476  0588  00DF               	movwf	??_Mix_Fsm_Proc
  2477  0589  085F               	movf	??_Mix_Fsm_Proc,w
  2478  058A  00B1               	movwf	Encoded_To_Percent_Calc@percent_int
  2479  058B  30CA               	movlw	(low (Mix_Fsm_Proc@percent_frac_rsvwater_ch| 0))& (0+255)
  2480  058C  00E0               	movwf	??_Mix_Fsm_Proc+1
  2481  058D  0860               	movf	??_Mix_Fsm_Proc+1,w
  2482  058E  00B2               	movwf	Encoded_To_Percent_Calc@percent_frac
  2483  058F  120A  158A  23E0  120A  118A  	fcall	_Encoded_To_Percent_Calc
  2484                           
  2485                           ;adc7.c: 470: Goto_XY_LCD_Disp(((1U)), ((((((((1U) + 2) + 3) + 1) + 2) + 3) + 1) + 2));
  2486  0594  3001               	movlw	1
  2487  0595  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  2488  0596  3000               	movlw	0
  2489  0597  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  2490  0598  300F               	movlw	15
  2491  0599  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  2492  059A  3000               	movlw	0
  2493  059B  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  2494  059C  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  2495                           
  2496                           ;adc7.c: 471: Data_Num_Disp_LCD((3),percent_int_rsvwater_ch );
  2497  05A1  3003               	movlw	3
  2498  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  2499  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  2500  05A4  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  2501  05A5  3000               	movlw	0
  2502  05A6  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  2503  05A7  1683               	bsf	3,5	;RP0=1, select bank1
  2504  05A8  1303               	bcf	3,6	;RP1=0, select bank1
  2505  05A9  085C               	movf	Mix_Fsm_Proc@percent_int_rsvwater_ch^(0+128),w
  2506  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  2507  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  2508  05AC  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  2509  05AD  1683               	bsf	3,5	;RP0=1, select bank1
  2510  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  2511  05AF  085D               	movf	(Mix_Fsm_Proc@percent_int_rsvwater_ch+1)^(0+128),w
  2512  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  2513  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  2514  05B2  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  2515  05B3  01B1               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  2516  05B4  01B2               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  2517  05B5  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  2518                           
  2519                           ;adc7.c: 472: Goto_XY_LCD_Disp(((1U)), ((((((((((1U) + 2) + 3) + 1) + 2) + 3) + 1) + 2) 
      +                          + 3) + 1));
  2520  05BA  3001               	movlw	1
  2521  05BB  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  2522  05BC  3000               	movlw	0
  2523  05BD  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  2524  05BE  3013               	movlw	19
  2525  05BF  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  2526  05C0  3000               	movlw	0
  2527  05C1  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  2528  05C2  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  2529                           
  2530                           ;adc7.c: 473: Data_Num_Disp_LCD((1), percent_frac_rsvwater_ch);
  2531  05C7  3001               	movlw	1
  2532  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  2533  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  2534  05CA  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  2535  05CB  3000               	movlw	0
  2536  05CC  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  2537  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  2538  05CE  1303               	bcf	3,6	;RP1=0, select bank1
  2539  05CF  084A               	movf	Mix_Fsm_Proc@percent_frac_rsvwater_ch^(0+128),w
  2540  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  2541  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  2542  05D2  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  2543  05D3  1683               	bsf	3,5	;RP0=1, select bank1
  2544  05D4  1303               	bcf	3,6	;RP1=0, select bank1
  2545  05D5  084B               	movf	(Mix_Fsm_Proc@percent_frac_rsvwater_ch+1)^(0+128),w
  2546  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  2547  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  2548  05D8  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  2549  05D9  01B1               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  2550  05DA  01B2               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  2551  05DB  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  2552                           
  2553                           ;adc7.c: 474: if(percent_int_rsvwater_ch < (25U))
  2554  05E0  3000               	movlw	0
  2555  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  2556  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  2557  05E3  025D               	subwf	(Mix_Fsm_Proc@percent_int_rsvwater_ch+1)^(0+128),w
  2558  05E4  3019               	movlw	25
  2559  05E5  1903               	skipnz
  2560  05E6  025C               	subwf	Mix_Fsm_Proc@percent_int_rsvwater_ch^(0+128),w
  2561  05E7  1803               	skipnc
  2562  05E8  2DFC               	goto	l2119
  2563                           
  2564                           ;adc7.c: 475: {
  2565                           ;adc7.c: 476: RB4 = (1);
  2566  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  2567  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  2568  05EB  1606               	bsf	6,4	;volatile
  2569                           
  2570                           ;adc7.c: 477: cur_stage_time_enable_flag = ('n');
  2571  05EC  306E               	movlw	110
  2572  05ED  00DF               	movwf	??_Mix_Fsm_Proc
  2573  05EE  085F               	movf	??_Mix_Fsm_Proc,w
  2574  05EF  1683               	bsf	3,5	;RP0=1, select bank1
  2575  05F0  1303               	bcf	3,6	;RP1=0, select bank1
  2576  05F1  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  2577                           
  2578                           ;adc7.c: 478: Stop_Timer1();
  2579  05F2  160A  118A  276A   	fcall	_Stop_Timer1
  2580                           
  2581                           ;adc7.c: 479: mix_fsm_state = (6U);
  2582  05F5  3006               	movlw	6
  2583  05F6  1683               	bsf	3,5	;RP0=1, select bank1
  2584  05F7  1303               	bcf	3,6	;RP1=0, select bank1
  2585  05F8  00E6               	movwf	_mix_fsm_state^(0+128)
  2586  05F9  3000               	movlw	0
  2587  05FA  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  2588                           
  2589                           ;adc7.c: 480: break;
  2590  05FB  0008               	return
  2591  05FC                     l2119:	
  2592                           
  2593                           ;adc7.c: 481: }
  2594                           ;adc7.c: 482: if(cur_stage_time_expiry_flag == ('y'))
  2595  05FC  3079               	movlw	121
  2596  05FD  066C               	xorwf	_cur_stage_time_expiry_flag^(0+128),w
  2597  05FE  1D03               	btfss	3,2
  2598  05FF  2E16               	goto	l189
  2599                           
  2600                           ;adc7.c: 483: {
  2601                           ;adc7.c: 484: cur_stage_time_enable_flag = ('n');
  2602  0600  306E               	movlw	110
  2603  0601  1283               	bcf	3,5	;RP0=0, select bank0
  2604  0602  1303               	bcf	3,6	;RP1=0, select bank0
  2605  0603  00DF               	movwf	??_Mix_Fsm_Proc
  2606  0604  085F               	movf	??_Mix_Fsm_Proc,w
  2607  0605  1683               	bsf	3,5	;RP0=1, select bank1
  2608  0606  1303               	bcf	3,6	;RP1=0, select bank1
  2609  0607  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  2610                           
  2611                           ;adc7.c: 485: Stop_Timer1();
  2612  0608  160A  118A  276A   	fcall	_Stop_Timer1
  2613                           
  2614                           ;adc7.c: 486: RB5 = (1);
  2615  060B  1283               	bcf	3,5	;RP0=0, select bank0
  2616  060C  1303               	bcf	3,6	;RP1=0, select bank0
  2617  060D  1686               	bsf	6,5	;volatile
  2618                           
  2619                           ;adc7.c: 487: RD6 = (0);
  2620  060E  1308               	bcf	8,6	;volatile
  2621                           
  2622                           ;adc7.c: 488: mix_fsm_state = (6U);
  2623  060F  3006               	movlw	6
  2624  0610  1683               	bsf	3,5	;RP0=1, select bank1
  2625  0611  1303               	bcf	3,6	;RP1=0, select bank1
  2626  0612  00E6               	movwf	_mix_fsm_state^(0+128)
  2627  0613  3000               	movlw	0
  2628  0614  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  2629                           
  2630                           ;adc7.c: 489: break;
  2631  0615  0008               	return
  2632  0616                     l189:	
  2633                           
  2634                           ;adc7.c: 490: }
  2635                           ;adc7.c: 491: RD6 = (1);
  2636  0616  1283               	bcf	3,5	;RP0=0, select bank0
  2637  0617  1303               	bcf	3,6	;RP1=0, select bank0
  2638  0618  1708               	bsf	8,6	;volatile
  2639                           
  2640                           ;adc7.c: 492: Delay_Time_ByCount((1000UL));
  2641  0619  30E8               	movlw	232
  2642  061A  00F0               	movwf	Delay_Time_ByCount@time_delay
  2643  061B  3003               	movlw	3
  2644  061C  00F1               	movwf	Delay_Time_ByCount@time_delay+1
  2645  061D  160A  118A  275D  120A  118A  	fcall	_Delay_Time_ByCount
  2646                           
  2647                           ;adc7.c: 493: adc_channel = (4U) ;
  2648  0622  3004               	movlw	4
  2649  0623  1683               	bsf	3,5	;RP0=1, select bank1
  2650  0624  1303               	bcf	3,6	;RP1=0, select bank1
  2651  0625  00C4               	movwf	Mix_Fsm_Proc@adc_channel^(0+128)
  2652  0626  3000               	movlw	0
  2653  0627  00C5               	movwf	(Mix_Fsm_Proc@adc_channel^(0+128)+1)
  2654                           
  2655                           ;adc7.c: 494: adc_value_vslwater_ch = Read_ADC_Channel((4U));
  2656  0628  3004               	movlw	4
  2657  0629  00F6               	movwf	Read_ADC_Channel@adc_channel
  2658  062A  3000               	movlw	0
  2659  062B  00F7               	movwf	Read_ADC_Channel@adc_channel+1
  2660  062C  120A  158A  221B  120A  118A  	fcall	_Read_ADC_Channel
  2661  0631  0879               	movf	?_Read_ADC_Channel+3,w
  2662  0632  1683               	bsf	3,5	;RP0=1, select bank1
  2663  0633  1303               	bcf	3,6	;RP1=0, select bank1
  2664  0634  00B7               	movwf	(Mix_Fsm_Proc@adc_value_vslwater_ch+3)^(0+128)
  2665  0635  0878               	movf	?_Read_ADC_Channel+2,w
  2666  0636  00B6               	movwf	(Mix_Fsm_Proc@adc_value_vslwater_ch+2)^(0+128)
  2667  0637  0877               	movf	?_Read_ADC_Channel+1,w
  2668  0638  00B5               	movwf	(Mix_Fsm_Proc@adc_value_vslwater_ch+1)^(0+128)
  2669  0639  0876               	movf	?_Read_ADC_Channel,w
  2670  063A  00B4               	movwf	Mix_Fsm_Proc@adc_value_vslwater_ch^(0+128)
  2671                           
  2672                           ;adc7.c: 495: Encoded_To_Actual_Analog_Val_Calc(adc_value_vslwater_ch, (((512UL)) - ((0U
      +                          ))), (0U), &analog_val_in_digital_int_vslwater_ch,&analog_val_in_digital_frac_vslwater_c
      +                          h );
  2673  063B  0837               	movf	(Mix_Fsm_Proc@adc_value_vslwater_ch+3)^(0+128),w
  2674  063C  1283               	bcf	3,5	;RP0=0, select bank0
  2675  063D  1303               	bcf	3,6	;RP1=0, select bank0
  2676  063E  00A3               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value+3
  2677  063F  1683               	bsf	3,5	;RP0=1, select bank1
  2678  0640  1303               	bcf	3,6	;RP1=0, select bank1
  2679  0641  0836               	movf	(Mix_Fsm_Proc@adc_value_vslwater_ch+2)^(0+128),w
  2680  0642  1283               	bcf	3,5	;RP0=0, select bank0
  2681  0643  1303               	bcf	3,6	;RP1=0, select bank0
  2682  0644  00A2               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value+2
  2683  0645  1683               	bsf	3,5	;RP0=1, select bank1
  2684  0646  1303               	bcf	3,6	;RP1=0, select bank1
  2685  0647  0835               	movf	(Mix_Fsm_Proc@adc_value_vslwater_ch+1)^(0+128),w
  2686  0648  1283               	bcf	3,5	;RP0=0, select bank0
  2687  0649  1303               	bcf	3,6	;RP1=0, select bank0
  2688  064A  00A1               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value+1
  2689  064B  1683               	bsf	3,5	;RP0=1, select bank1
  2690  064C  1303               	bcf	3,6	;RP1=0, select bank1
  2691  064D  0834               	movf	Mix_Fsm_Proc@adc_value_vslwater_ch^(0+128),w
  2692  064E  1283               	bcf	3,5	;RP0=0, select bank0
  2693  064F  1303               	bcf	3,6	;RP1=0, select bank0
  2694  0650  00A0               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value
  2695  0651  3000               	movlw	0
  2696  0652  00A7               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+3
  2697  0653  3000               	movlw	0
  2698  0654  00A6               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+2
  2699  0655  3002               	movlw	2
  2700  0656  00A5               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+1
  2701  0657  3000               	movlw	0
  2702  0658  00A4               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog
  2703  0659  3000               	movlw	0
  2704  065A  00A8               	movwf	Encoded_To_Actual_Analog_Val_Calc@min_input_analog
  2705  065B  00A9               	movwf	Encoded_To_Actual_Analog_Val_Calc@min_input_analog+1
  2706  065C  30D4               	movlw	(low (Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch| 0))& (0+255)
  2707  065D  00DF               	movwf	??_Mix_Fsm_Proc
  2708  065E  085F               	movf	??_Mix_Fsm_Proc,w
  2709  065F  00AA               	movwf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int
  2710  0660  30C0               	movlw	(low (Mix_Fsm_Proc@analog_val_in_digital_frac_vslwater_ch| 0))& (0+255)
  2711  0661  00E0               	movwf	??_Mix_Fsm_Proc+1
  2712  0662  0860               	movf	??_Mix_Fsm_Proc+1,w
  2713  0663  00AB               	movwf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac
  2714  0664  120A  158A  2485  120A  118A  	fcall	_Encoded_To_Actual_Analog_Val_Calc
  2715                           
  2716                           ;adc7.c: 497: Goto_XY_LCD_Disp(((2U)), ((((1U) + 2) + 5) + 5));
  2717  0669  3002               	movlw	2
  2718  066A  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  2719  066B  3000               	movlw	0
  2720  066C  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  2721  066D  300D               	movlw	13
  2722  066E  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  2723  066F  3000               	movlw	0
  2724  0670  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  2725  0671  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  2726                           
  2727                           ;adc7.c: 498: Data_Num_Disp_LCD((4), analog_val_in_digital_int_vslwater_ch);
  2728  0676  3004               	movlw	4
  2729  0677  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0678  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0679  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  2732  067A  3000               	movlw	0
  2733  067B  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  2734  067C  1683               	bsf	3,5	;RP0=1, select bank1
  2735  067D  1303               	bcf	3,6	;RP1=0, select bank1
  2736  067E  0857               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch+3)^(0+128),w
  2737  067F  1283               	bcf	3,5	;RP0=0, select bank0
  2738  0680  1303               	bcf	3,6	;RP1=0, select bank0
  2739  0681  00B2               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  2740  0682  1683               	bsf	3,5	;RP0=1, select bank1
  2741  0683  1303               	bcf	3,6	;RP1=0, select bank1
  2742  0684  0856               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch+2)^(0+128),w
  2743  0685  1283               	bcf	3,5	;RP0=0, select bank0
  2744  0686  1303               	bcf	3,6	;RP1=0, select bank0
  2745  0687  00B1               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  2746  0688  1683               	bsf	3,5	;RP0=1, select bank1
  2747  0689  1303               	bcf	3,6	;RP1=0, select bank1
  2748  068A  0855               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch+1)^(0+128),w
  2749  068B  1283               	bcf	3,5	;RP0=0, select bank0
  2750  068C  1303               	bcf	3,6	;RP1=0, select bank0
  2751  068D  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  2752  068E  1683               	bsf	3,5	;RP0=1, select bank1
  2753  068F  1303               	bcf	3,6	;RP1=0, select bank1
  2754  0690  0854               	movf	Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch^(0+128),w
  2755  0691  1283               	bcf	3,5	;RP0=0, select bank0
  2756  0692  1303               	bcf	3,6	;RP1=0, select bank0
  2757  0693  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  2758  0694  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  2759                           
  2760                           ;adc7.c: 499: if( analog_val_in_digital_int_vslwater_ch >= (100U))
  2761  0699  1683               	bsf	3,5	;RP0=1, select bank1
  2762  069A  1303               	bcf	3,6	;RP1=0, select bank1
  2763  069B  0857               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch+3)^(0+128),w
  2764  069C  1D03               	btfss	3,2
  2765  069D  2EAA               	goto	l2145
  2766  069E  0856               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch+2)^(0+128),w
  2767  069F  1D03               	btfss	3,2
  2768  06A0  2EAA               	goto	l2145
  2769  06A1  0855               	movf	(Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch+1)^(0+128),w
  2770  06A2  1D03               	btfss	3,2
  2771  06A3  2EAA               	goto	l2145
  2772  06A4  3064               	movlw	100
  2773  06A5  0254               	subwf	Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch^(0+128),w
  2774  06A6  1D03               	skipz
  2775  06A7  2EA8               	goto	u1473
  2776  06A8                     u1473:	
  2777  06A8  1C03               	btfss	3,0
  2778  06A9  0008               	return
  2779  06AA                     l2145:	
  2780                           
  2781                           ;adc7.c: 500: {
  2782                           ;adc7.c: 501: RD6 = (0);
  2783  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  2784  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  2785  06AC  1308               	bcf	8,6	;volatile
  2786                           
  2787                           ;adc7.c: 502: cur_stage_time_enable_flag = ('n');
  2788  06AD  306E               	movlw	110
  2789  06AE  00DF               	movwf	??_Mix_Fsm_Proc
  2790  06AF  085F               	movf	??_Mix_Fsm_Proc,w
  2791  06B0  1683               	bsf	3,5	;RP0=1, select bank1
  2792  06B1  1303               	bcf	3,6	;RP1=0, select bank1
  2793  06B2  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  2794                           
  2795                           ;adc7.c: 503: Stop_Timer1();
  2796  06B3  160A  118A  276A  120A  118A  	fcall	_Stop_Timer1
  2797                           
  2798                           ;adc7.c: 504: mix_fsm_state = (4U);
  2799  06B8  3004               	movlw	4
  2800  06B9  1683               	bsf	3,5	;RP0=1, select bank1
  2801  06BA  1303               	bcf	3,6	;RP1=0, select bank1
  2802  06BB  00E6               	movwf	_mix_fsm_state^(0+128)
  2803  06BC  3000               	movlw	0
  2804  06BD  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  2805                           
  2806                           ;adc7.c: 505: vsl_run_fsm_state = (1U);
  2807  06BE  3001               	movlw	1
  2808  06BF  1683               	bsf	3,5	;RP0=1, select bank3
  2809  06C0  1703               	bsf	3,6	;RP1=1, select bank3
  2810  06C1  00C0               	movwf	_vsl_run_fsm_state^(0+384)
  2811  06C2  3000               	movlw	0
  2812  06C3  00C1               	movwf	(_vsl_run_fsm_state^(0+384)+1)
  2813                           
  2814                           ;adc7.c: 506: RE0 = (0);
  2815  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  2816  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  2817  06C6  1009               	bcf	9,0	;volatile
  2818                           
  2819                           ;adc7.c: 507: RE1 = (1);
  2820  06C7  1489               	bsf	9,1	;volatile
  2821                           
  2822                           ;adc7.c: 508: cur_stage_time_left = (10U);
  2823  06C8  300A               	movlw	10
  2824  06C9  1683               	bsf	3,5	;RP0=1, select bank1
  2825  06CA  1303               	bcf	3,6	;RP1=0, select bank1
  2826  06CB  00E4               	movwf	_cur_stage_time_left^(0+128)
  2827  06CC  3000               	movlw	0
  2828  06CD  00E5               	movwf	(_cur_stage_time_left^(0+128)+1)
  2829                           
  2830                           ;adc7.c: 509: count_left_vsl_fwd_rev_process = (3U);
  2831  06CE  3003               	movlw	3
  2832  06CF  00E2               	movwf	_count_left_vsl_fwd_rev_process^(0+128)
  2833  06D0  3000               	movlw	0
  2834  06D1  00E3               	movwf	(_count_left_vsl_fwd_rev_process^(0+128)+1)
  2835                           
  2836                           ;adc7.c: 510: cur_stage_time_enable_flag = ('y');
  2837  06D2  3079               	movlw	121
  2838  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  2839  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  2840  06D5  00DF               	movwf	??_Mix_Fsm_Proc
  2841  06D6  085F               	movf	??_Mix_Fsm_Proc,w
  2842  06D7  1683               	bsf	3,5	;RP0=1, select bank1
  2843  06D8  1303               	bcf	3,6	;RP1=0, select bank1
  2844  06D9  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  2845                           
  2846                           ;adc7.c: 511: Run_Timer1((4U));
  2847  06DA  3004               	movlw	4
  2848  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  2849  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  2850  06DD  00AD               	movwf	Run_Timer1@set_timer1_mode
  2851  06DE  3000               	movlw	0
  2852  06DF  00AE               	movwf	Run_Timer1@set_timer1_mode+1
  2853  06E0  120A  118A  2071  120A  118A  	fcall	_Run_Timer1
  2854                           
  2855                           ;adc7.c: 514: Goto_XY_LCD_Disp(4,10);
  2856  06E5  3004               	movlw	4
  2857  06E6  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  2858  06E7  3000               	movlw	0
  2859  06E8  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  2860  06E9  300A               	movlw	10
  2861  06EA  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  2862  06EB  3000               	movlw	0
  2863  06EC  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  2864  06ED  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  2865                           
  2866                           ;adc7.c: 515: Data_Str_Disp_LCD("WA");
  2867  06F2  3027               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2868  06F3  160A  118A  27A0   	fcall	_Data_Str_Disp_LCD
  2869                           
  2870                           ;adc7.c: 516: }
  2871                           ;adc7.c: 517: break;
  2872  06F6  0008               	return
  2873  06F7                     l2169:	
  2874                           ;adc7.c: 518: case (4U):
  2875                           
  2876                           
  2877                           ;adc7.c: 519: if(cur_stage_time_expiry_flag == ('y'))
  2878  06F7  3079               	movlw	121
  2879  06F8  1683               	bsf	3,5	;RP0=1, select bank1
  2880  06F9  1303               	bcf	3,6	;RP1=0, select bank1
  2881  06FA  066C               	xorwf	_cur_stage_time_expiry_flag^(0+128),w
  2882  06FB  1D03               	btfss	3,2
  2883  06FC  0008               	return
  2884  06FD  2F5E               	goto	l2205
  2885  06FE                     l2173:	
  2886                           ;adc7.c: 522: {
  2887                           ;adc7.c: 523: case (1U):
  2888                           
  2889                           ;adc7.c: 520: {
  2890                           ;adc7.c: 521: switch(vsl_run_fsm_state)
  2891                           
  2892                           
  2893                           ;adc7.c: 524: vsl_run_fsm_state = (2U);
  2894  06FE  3002               	movlw	2
  2895  06FF  1683               	bsf	3,5	;RP0=1, select bank3
  2896  0700  1703               	bsf	3,6	;RP1=1, select bank3
  2897  0701  00C0               	movwf	_vsl_run_fsm_state^(0+384)
  2898  0702  3000               	movlw	0
  2899  0703  00C1               	movwf	(_vsl_run_fsm_state^(0+384)+1)
  2900                           
  2901                           ;adc7.c: 525: cur_stage_time_left = (12U);
  2902  0704  300C               	movlw	12
  2903  0705  1683               	bsf	3,5	;RP0=1, select bank1
  2904  0706  1303               	bcf	3,6	;RP1=0, select bank1
  2905  0707  00E4               	movwf	_cur_stage_time_left^(0+128)
  2906  0708  3000               	movlw	0
  2907  0709  00E5               	movwf	(_cur_stage_time_left^(0+128)+1)
  2908                           
  2909                           ;adc7.c: 526: RE0 = (1);
  2910  070A  1283               	bcf	3,5	;RP0=0, select bank0
  2911  070B  1303               	bcf	3,6	;RP1=0, select bank0
  2912  070C  1409               	bsf	9,0	;volatile
  2913                           
  2914                           ;adc7.c: 527: RE1 = (0);
  2915  070D  1089               	bcf	9,1	;volatile
  2916                           
  2917                           ;adc7.c: 528: cur_stage_time_expiry_flag = ('n');
  2918  070E  306E               	movlw	110
  2919  070F  00DF               	movwf	??_Mix_Fsm_Proc
  2920  0710  085F               	movf	??_Mix_Fsm_Proc,w
  2921  0711  1683               	bsf	3,5	;RP0=1, select bank1
  2922  0712  1303               	bcf	3,6	;RP1=0, select bank1
  2923  0713  00EC               	movwf	_cur_stage_time_expiry_flag^(0+128)
  2924                           
  2925                           ;adc7.c: 529: break;
  2926  0714  0008               	return
  2927  0715                     l2179:	
  2928                           ;adc7.c: 530: case (2U):
  2929                           
  2930                           
  2931                           ;adc7.c: 531: if(--count_left_vsl_fwd_rev_process)
  2932  0715  3001               	movlw	1
  2933  0716  1303               	bcf	3,6	;RP1=0, select bank1
  2934  0717  02E2               	subwf	_count_left_vsl_fwd_rev_process^(0+128),f
  2935  0718  3000               	movlw	0
  2936  0719  1C03               	skipc
  2937  071A  03E3               	decf	(_count_left_vsl_fwd_rev_process+1)^(0+128),f
  2938  071B  02E3               	subwf	(_count_left_vsl_fwd_rev_process+1)^(0+128),f
  2939  071C  0862               	movf	_count_left_vsl_fwd_rev_process^(0+128),w
  2940  071D  0463               	iorwf	(_count_left_vsl_fwd_rev_process+1)^(0+128),w
  2941  071E  1903               	btfsc	3,2
  2942  071F  2F39               	goto	l2187
  2943                           
  2944                           ;adc7.c: 532: {
  2945                           ;adc7.c: 533: vsl_run_fsm_state = (1U);
  2946  0720  3001               	movlw	1
  2947  0721  1683               	bsf	3,5	;RP0=1, select bank3
  2948  0722  1703               	bsf	3,6	;RP1=1, select bank3
  2949  0723  00C0               	movwf	_vsl_run_fsm_state^(0+384)
  2950  0724  3000               	movlw	0
  2951  0725  00C1               	movwf	(_vsl_run_fsm_state^(0+384)+1)
  2952                           
  2953                           ;adc7.c: 534: cur_stage_time_left = (10U);
  2954  0726  300A               	movlw	10
  2955  0727  1683               	bsf	3,5	;RP0=1, select bank1
  2956  0728  1303               	bcf	3,6	;RP1=0, select bank1
  2957  0729  00E4               	movwf	_cur_stage_time_left^(0+128)
  2958  072A  3000               	movlw	0
  2959  072B  00E5               	movwf	(_cur_stage_time_left^(0+128)+1)
  2960                           
  2961                           ;adc7.c: 535: cur_stage_time_expiry_flag = ('n');
  2962  072C  306E               	movlw	110
  2963  072D  1283               	bcf	3,5	;RP0=0, select bank0
  2964  072E  1303               	bcf	3,6	;RP1=0, select bank0
  2965  072F  00DF               	movwf	??_Mix_Fsm_Proc
  2966  0730  085F               	movf	??_Mix_Fsm_Proc,w
  2967  0731  1683               	bsf	3,5	;RP0=1, select bank1
  2968  0732  1303               	bcf	3,6	;RP1=0, select bank1
  2969  0733  00EC               	movwf	_cur_stage_time_expiry_flag^(0+128)
  2970                           
  2971                           ;adc7.c: 536: RE0 = (0);
  2972  0734  1283               	bcf	3,5	;RP0=0, select bank0
  2973  0735  1303               	bcf	3,6	;RP1=0, select bank0
  2974  0736  1009               	bcf	9,0	;volatile
  2975                           
  2976                           ;adc7.c: 537: RE1 = (1);
  2977  0737  1489               	bsf	9,1	;volatile
  2978                           
  2979                           ;adc7.c: 538: break;
  2980  0738  0008               	return
  2981  0739                     l2187:	
  2982                           
  2983                           ;adc7.c: 539: }
  2984                           ;adc7.c: 540: Stop_Timer1();
  2985  0739  160A  118A  276A   	fcall	_Stop_Timer1
  2986                           
  2987                           ;adc7.c: 541: cur_stage_time_enable_flag = ('n');
  2988  073C  306E               	movlw	110
  2989  073D  1283               	bcf	3,5	;RP0=0, select bank0
  2990  073E  1303               	bcf	3,6	;RP1=0, select bank0
  2991  073F  00DF               	movwf	??_Mix_Fsm_Proc
  2992  0740  085F               	movf	??_Mix_Fsm_Proc,w
  2993  0741  1683               	bsf	3,5	;RP0=1, select bank1
  2994  0742  1303               	bcf	3,6	;RP1=0, select bank1
  2995  0743  00ED               	movwf	_cur_stage_time_enable_flag^(0+128)
  2996                           
  2997                           ;adc7.c: 542: RE0 = (0);
  2998  0744  1283               	bcf	3,5	;RP0=0, select bank0
  2999  0745  1303               	bcf	3,6	;RP1=0, select bank0
  3000  0746  1009               	bcf	9,0	;volatile
  3001                           
  3002                           ;adc7.c: 543: RE1 = (0);
  3003  0747  1089               	bcf	9,1	;volatile
  3004                           
  3005                           ;adc7.c: 544: RB6 = (1);
  3006  0748  1706               	bsf	6,6	;volatile
  3007                           
  3008                           ;adc7.c: 545: mix_fsm_state = (5U);
  3009  0749  3005               	movlw	5
  3010  074A  1683               	bsf	3,5	;RP0=1, select bank1
  3011  074B  1303               	bcf	3,6	;RP1=0, select bank1
  3012  074C  00E6               	movwf	_mix_fsm_state^(0+128)
  3013  074D  3000               	movlw	0
  3014  074E  00E7               	movwf	(_mix_fsm_state^(0+128)+1)
  3015                           
  3016                           ;adc7.c: 546: vsl_run_fsm_state = (3U);
  3017  074F  3003               	movlw	3
  3018  0750  1683               	bsf	3,5	;RP0=1, select bank3
  3019  0751  1703               	bsf	3,6	;RP1=1, select bank3
  3020  0752  00C0               	movwf	_vsl_run_fsm_state^(0+384)
  3021  0753  3000               	movlw	0
  3022  0754  00C1               	movwf	(_vsl_run_fsm_state^(0+384)+1)
  3023                           
  3024                           ;adc7.c: 547: restart_sw_enable_flag = ('y');
  3025  0755  3079               	movlw	121
  3026  0756  1283               	bcf	3,5	;RP0=0, select bank0
  3027  0757  1303               	bcf	3,6	;RP1=0, select bank0
  3028  0758  00DF               	movwf	??_Mix_Fsm_Proc
  3029  0759  085F               	movf	??_Mix_Fsm_Proc,w
  3030  075A  1683               	bsf	3,5	;RP0=1, select bank1
  3031  075B  1303               	bcf	3,6	;RP1=0, select bank1
  3032  075C  00EE               	movwf	_restart_sw_enable_flag^(0+128)
  3033                           
  3034                           ;adc7.c: 549: }
  3035                           
  3036                           ;adc7.c: 548: break;
  3037  075D  0008               	return
  3038  075E                     l2205:	
  3039                           
  3040                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3041                           ; Switch size 1, requested type "space"
  3042                           ; Number of cases is 1, Range of values is 0 to 0
  3043                           ; switch strategies available:
  3044                           ; Name         Instructions Cycles
  3045                           ; simple_byte            4     3 (average)
  3046                           ; direct_byte           11     8 (fixed)
  3047                           ; jumptable            260     6 (fixed)
  3048                           ;	Chosen strategy is simple_byte
  3049  075E  1683               	bsf	3,5	;RP0=1, select bank3
  3050  075F  1703               	bsf	3,6	;RP1=1, select bank3
  3051  0760  0841               	movf	(_vsl_run_fsm_state+1)^(0+384),w
  3052  0761  3A00               	xorlw	0	; case 0
  3053  0762  1903               	skipnz
  3054  0763  2F65               	goto	l2399
  3055  0764  2FC2               	goto	l200
  3056  0765                     l2399:	
  3057                           
  3058                           ; Switch size 1, requested type "space"
  3059                           ; Number of cases is 2, Range of values is 1 to 2
  3060                           ; switch strategies available:
  3061                           ; Name         Instructions Cycles
  3062                           ; simple_byte            7     4 (average)
  3063                           ; direct_byte           17    11 (fixed)
  3064                           ; jumptable            263     9 (fixed)
  3065                           ;	Chosen strategy is simple_byte
  3066  0765  0840               	movf	_vsl_run_fsm_state^(0+384),w
  3067  0766  3A01               	xorlw	1	; case 1
  3068  0767  1903               	skipnz
  3069  0768  2EFE               	goto	l2173
  3070  0769  3A03               	xorlw	3	; case 2
  3071  076A  1903               	skipnz
  3072  076B  2F15               	goto	l2179
  3073  076C  2FC2               	goto	l200
  3074                           
  3075                           ;adc7.c: 550: }
  3076                           ;adc7.c: 551: break;
  3077  076D  0008               	return
  3078  076E                     l2207:	
  3079                           ;adc7.c: 552: case (5U):
  3080                           
  3081                           
  3082                           ;adc7.c: 553: mix_fsm_state = (0U);
  3083  076E  1303               	bcf	3,6	;RP1=0, select bank1
  3084  076F  01E6               	clrf	_mix_fsm_state^(0+128)
  3085  0770  01E7               	clrf	(_mix_fsm_state+1)^(0+128)
  3086                           
  3087                           ;adc7.c: 554: restart_sw_enable_flag = ('y');
  3088  0771  3079               	movlw	121
  3089  0772  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0773  1303               	bcf	3,6	;RP1=0, select bank0
  3091  0774  00DF               	movwf	??_Mix_Fsm_Proc
  3092  0775  085F               	movf	??_Mix_Fsm_Proc,w
  3093  0776  1683               	bsf	3,5	;RP0=1, select bank1
  3094  0777  1303               	bcf	3,6	;RP1=0, select bank1
  3095  0778  00EE               	movwf	_restart_sw_enable_flag^(0+128)
  3096                           
  3097                           ;adc7.c: 555: cur_line_disp_data[(0U)] = (1U);
  3098  0779  3001               	movlw	1
  3099  077A  1683               	bsf	3,5	;RP0=1, select bank3
  3100  077B  1703               	bsf	3,6	;RP1=1, select bank3
  3101  077C  00AA               	movwf	_cur_line_disp_data^(0+384)
  3102  077D  3000               	movlw	0
  3103  077E  00AB               	movwf	(_cur_line_disp_data^(0+384)+1)
  3104                           
  3105                           ;adc7.c: 558: Goto_XY_LCD_Disp(4,19);
  3106  077F  3004               	movlw	4
  3107  0780  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  3108  0781  3000               	movlw	0
  3109  0782  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  3110  0783  3013               	movlw	19
  3111  0784  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  3112  0785  3000               	movlw	0
  3113  0786  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  3114  0787  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  3115                           
  3116                           ;adc7.c: 559: Data_Str_Disp_LCD("OK");
  3117  078C  302A               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  3118  078D  160A  118A  27A0   	fcall	_Data_Str_Disp_LCD
  3119                           
  3120                           ;adc7.c: 561: break;
  3121  0790  0008               	return
  3122  0791                     l2217:	
  3123                           ;adc7.c: 562: case (6U):
  3124                           
  3125                           
  3126                           ;adc7.c: 564: mix_fsm_state = (0U);
  3127  0791  1683               	bsf	3,5	;RP0=1, select bank1
  3128  0792  1303               	bcf	3,6	;RP1=0, select bank1
  3129  0793  01E6               	clrf	_mix_fsm_state^(0+128)
  3130  0794  01E7               	clrf	(_mix_fsm_state+1)^(0+128)
  3131                           
  3132                           ;adc7.c: 565: restart_sw_enable_flag = ('y');
  3133  0795  3079               	movlw	121
  3134  0796  1283               	bcf	3,5	;RP0=0, select bank0
  3135  0797  1303               	bcf	3,6	;RP1=0, select bank0
  3136  0798  00DF               	movwf	??_Mix_Fsm_Proc
  3137  0799  085F               	movf	??_Mix_Fsm_Proc,w
  3138  079A  1683               	bsf	3,5	;RP0=1, select bank1
  3139  079B  1303               	bcf	3,6	;RP1=0, select bank1
  3140  079C  00EE               	movwf	_restart_sw_enable_flag^(0+128)
  3141                           
  3142                           ;adc7.c: 566: cur_line_disp_data[(0U)] = (1U);
  3143  079D  3001               	movlw	1
  3144  079E  1683               	bsf	3,5	;RP0=1, select bank3
  3145  079F  1703               	bsf	3,6	;RP1=1, select bank3
  3146  07A0  00AA               	movwf	_cur_line_disp_data^(0+384)
  3147  07A1  3000               	movlw	0
  3148  07A2  00AB               	movwf	(_cur_line_disp_data^(0+384)+1)
  3149                           
  3150                           ;adc7.c: 568: }
  3151                           
  3152                           ;adc7.c: 567: break;
  3153  07A3  0008               	return
  3154  07A4                     l2225:	
  3155                           
  3156                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3157                           ; Switch size 1, requested type "space"
  3158                           ; Number of cases is 1, Range of values is 0 to 0
  3159                           ; switch strategies available:
  3160                           ; Name         Instructions Cycles
  3161                           ; simple_byte            4     3 (average)
  3162                           ; direct_byte           11     8 (fixed)
  3163                           ; jumptable            260     6 (fixed)
  3164                           ;	Chosen strategy is simple_byte
  3165  07A4  1683               	bsf	3,5	;RP0=1, select bank1
  3166  07A5  1303               	bcf	3,6	;RP1=0, select bank1
  3167  07A6  0867               	movf	(_mix_fsm_state+1)^(0+128),w
  3168  07A7  3A00               	xorlw	0	; case 0
  3169  07A8  1903               	skipnz
  3170  07A9  2FAB               	goto	l2401
  3171  07AA  2FC2               	goto	l200
  3172  07AB                     l2401:	
  3173                           
  3174                           ; Switch size 1, requested type "space"
  3175                           ; Number of cases is 7, Range of values is 0 to 6
  3176                           ; switch strategies available:
  3177                           ; Name         Instructions Cycles
  3178                           ; simple_byte           22    12 (average)
  3179                           ; direct_byte           29     8 (fixed)
  3180                           ; jumptable            260     6 (fixed)
  3181                           ;	Chosen strategy is simple_byte
  3182  07AB  0866               	movf	_mix_fsm_state^(0+128),w
  3183  07AC  3A00               	xorlw	0	; case 0
  3184  07AD  1903               	skipnz
  3185  07AE  29F5               	goto	l1949
  3186  07AF  3A01               	xorlw	1	; case 1
  3187  07B0  1903               	skipnz
  3188  07B1  2A1F               	goto	l1959
  3189  07B2  3A03               	xorlw	3	; case 2
  3190  07B3  1903               	skipnz
  3191  07B4  2BB3               	goto	l2025
  3192  07B5  3A01               	xorlw	1	; case 3
  3193  07B6  1903               	skipnz
  3194  07B7  2D4F               	goto	l2093
  3195  07B8  3A07               	xorlw	7	; case 4
  3196  07B9  1903               	skipnz
  3197  07BA  2EF7               	goto	l2169
  3198  07BB  3A01               	xorlw	1	; case 5
  3199  07BC  1903               	skipnz
  3200  07BD  2F6E               	goto	l2207
  3201  07BE  3A03               	xorlw	3	; case 6
  3202  07BF  1903               	skipnz
  3203  07C0  2F91               	goto	l2217
  3204  07C1  2FC2               	goto	l200
  3205  07C2                     l200:	
  3206  07C2  0008               	return
  3207  07C3                     __end_of_Mix_Fsm_Proc:	
  3208                           
  3209                           	psect	text4
  3210  0071                     __ptext4:	
  3211 ;; *************** function _Run_Timer1 *****************
  3212 ;; Defined at:
  3213 ;;		line 757 in file "adc7.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  set_timer1_m    2   13[BANK0 ] const unsigned int 
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;		None
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      void 
  3220 ;; Registers used:
  3221 ;;		wreg, status,2, status,0, pclath, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3227 ;;      Params:         0       2       0       0       0
  3228 ;;      Locals:         0       0       0       0       0
  3229 ;;      Temps:          0       8       0       0       0
  3230 ;;      Totals:         0      10       0       0       0
  3231 ;;Total ram usage:       10 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    1
  3234 ;; This function calls:
  3235 ;;		_Prescale_Timer1
  3236 ;;		_Stop_Timer1
  3237 ;;		___lldiv
  3238 ;; This function is called by:
  3239 ;;		_Mix_Fsm_Proc
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           
  3244                           ;psect for function _Run_Timer1
  3245  0071                     _Run_Timer1:	
  3246                           
  3247                           ;adc7.c: 759: Stop_Timer1();
  3248                           
  3249                           ;incstack = 0
  3250                           ; Regs used in _Run_Timer1: [wreg+status,2+status,0+pclath+cstack]
  3251  0071  160A  118A  276A  120A  118A  	fcall	_Stop_Timer1
  3252                           
  3253                           ;adc7.c: 764: TMR1H = 0;
  3254  0076  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0077  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0078  018F               	clrf	15	;volatile
  3257                           
  3258                           ;adc7.c: 765: TMR1L = 0;
  3259  0079  018E               	clrf	14	;volatile
  3260                           
  3261                           ;adc7.c: 766: TMR1IF = 0;
  3262  007A  100C               	bcf	12,0	;volatile
  3263                           
  3264                           ;adc7.c: 767: timer1_mode = set_timer1_mode;
  3265  007B  082E               	movf	Run_Timer1@set_timer1_mode+1,w
  3266  007C  1683               	bsf	3,5	;RP0=1, select bank1
  3267  007D  1303               	bcf	3,6	;RP1=0, select bank1
  3268  007E  00E9               	movwf	(_timer1_mode+1)^(0+128)
  3269  007F  1283               	bcf	3,5	;RP0=0, select bank0
  3270  0080  1303               	bcf	3,6	;RP1=0, select bank0
  3271  0081  082D               	movf	Run_Timer1@set_timer1_mode,w
  3272  0082  1683               	bsf	3,5	;RP0=1, select bank1
  3273  0083  1303               	bcf	3,6	;RP1=0, select bank1
  3274  0084  00E8               	movwf	_timer1_mode^(0+128)
  3275                           
  3276                           ;adc7.c: 772: T1CON =0x85;
  3277  0085  3085               	movlw	133
  3278  0086  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0087  1303               	bcf	3,6	;RP1=0, select bank0
  3280  0088  0090               	movwf	16	;volatile
  3281                           
  3282                           ;adc7.c: 773: prescale_timer1 = 0x01;
  3283  0089  3001               	movlw	1
  3284  008A  00EB               	movwf	_prescale_timer1
  3285  008B  3000               	movlw	0
  3286  008C  00EC               	movwf	_prescale_timer1+1
  3287                           
  3288                           ;adc7.c: 774: prescale_shift_timer1= 0;
  3289  008D  1683               	bsf	3,5	;RP0=1, select bank3
  3290  008E  1703               	bsf	3,6	;RP1=1, select bank3
  3291  008F  01C4               	clrf	_prescale_shift_timer1^(0+384)
  3292  0090  01C5               	clrf	(_prescale_shift_timer1+1)^(0+384)
  3293                           
  3294                           ;adc7.c: 775: Prescale_Timer1();
  3295  0091  160A  118A  27DD  120A  118A  	fcall	_Prescale_Timer1
  3296                           
  3297                           ;adc7.c: 776: timer1_init = (65536UL) - ((unsigned long)((unsigned long)((4000000UL) * (
      +                          50UL)) / (unsigned long)((4) * (1000UL)))/prescale_timer1);
  3298  0096  3000               	movlw	0
  3299  0097  1283               	bcf	3,5	;RP0=0, select bank0
  3300  0098  1303               	bcf	3,6	;RP1=0, select bank0
  3301  0099  00AF               	movwf	??_Run_Timer1
  3302  009A  3000               	movlw	0
  3303  009B  00B0               	movwf	??_Run_Timer1+1
  3304  009C  3001               	movlw	1
  3305  009D  00B1               	movwf	??_Run_Timer1+2
  3306  009E  3000               	movlw	0
  3307  009F  00B2               	movwf	??_Run_Timer1+3
  3308  00A0  086B               	movf	_prescale_timer1,w
  3309  00A1  00A0               	movwf	___lldiv@divisor
  3310  00A2  086C               	movf	_prescale_timer1+1,w
  3311  00A3  00A1               	movwf	___lldiv@divisor+1
  3312  00A4  01A2               	clrf	___lldiv@divisor+2
  3313  00A5  01A3               	clrf	___lldiv@divisor+3
  3314  00A6  3000               	movlw	0
  3315  00A7  00A7               	movwf	___lldiv@dividend+3
  3316  00A8  3000               	movlw	0
  3317  00A9  00A6               	movwf	___lldiv@dividend+2
  3318  00AA  30C3               	movlw	195
  3319  00AB  00A5               	movwf	___lldiv@dividend+1
  3320  00AC  3050               	movlw	80
  3321  00AD  00A4               	movwf	___lldiv@dividend
  3322  00AE  120A  158A  21BB  120A  118A  	fcall	___lldiv
  3323  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  3324  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  3325  00B5  0920               	comf	?___lldiv,w
  3326  00B6  00B3               	movwf	??_Run_Timer1+4
  3327  00B7  0921               	comf	?___lldiv+1,w
  3328  00B8  00B4               	movwf	??_Run_Timer1+5
  3329  00B9  0922               	comf	?___lldiv+2,w
  3330  00BA  00B5               	movwf	??_Run_Timer1+6
  3331  00BB  0923               	comf	?___lldiv+3,w
  3332  00BC  00B6               	movwf	??_Run_Timer1+7
  3333  00BD  0AB3               	incf	??_Run_Timer1+4,f
  3334  00BE  1903               	skipnz
  3335  00BF  0AB4               	incf	??_Run_Timer1+5,f
  3336  00C0  1903               	skipnz
  3337  00C1  0AB5               	incf	??_Run_Timer1+6,f
  3338  00C2  1903               	skipnz
  3339  00C3  0AB6               	incf	??_Run_Timer1+7,f
  3340  00C4  0833               	movf	??_Run_Timer1+4,w
  3341  00C5  07AF               	addwf	??_Run_Timer1,f
  3342  00C6  0834               	movf	??_Run_Timer1+5,w
  3343  00C7  1803               	skipnc
  3344  00C8  0F34               	incfsz	??_Run_Timer1+5,w
  3345  00C9  28CB               	goto	u1240
  3346  00CA  28CC               	goto	u1241
  3347  00CB                     u1240:	
  3348  00CB  07B0               	addwf	??_Run_Timer1+1,f
  3349  00CC                     u1241:	
  3350  00CC  0835               	movf	??_Run_Timer1+6,w
  3351  00CD  1803               	skipnc
  3352  00CE  0F35               	incfsz	??_Run_Timer1+6,w
  3353  00CF  28D1               	goto	u1242
  3354  00D0  28D2               	goto	u1243
  3355  00D1                     u1242:	
  3356  00D1  07B1               	addwf	??_Run_Timer1+2,f
  3357  00D2                     u1243:	
  3358  00D2  0836               	movf	??_Run_Timer1+7,w
  3359  00D3  1803               	skipnc
  3360  00D4  0A36               	incf	??_Run_Timer1+7,w
  3361  00D5  07B2               	addwf	??_Run_Timer1+3,f
  3362  00D6  0832               	movf	??_Run_Timer1+3,w
  3363  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  3364  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  3365  00D9  00E1               	movwf	(_timer1_init+3)^(0+128)
  3366  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  3367  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  3368  00DC  0831               	movf	??_Run_Timer1+2,w
  3369  00DD  1683               	bsf	3,5	;RP0=1, select bank1
  3370  00DE  1303               	bcf	3,6	;RP1=0, select bank1
  3371  00DF  00E0               	movwf	(_timer1_init+2)^(0+128)
  3372  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  3373  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  3374  00E2  0830               	movf	??_Run_Timer1+1,w
  3375  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  3376  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  3377  00E5  00DF               	movwf	(_timer1_init+1)^(0+128)
  3378  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  3379  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  3380  00E8  082F               	movf	??_Run_Timer1,w
  3381  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  3382  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  3383  00EB  00DE               	movwf	_timer1_init^(0+128)
  3384                           
  3385                           ;adc7.c: 777: TMR1H = timer1_init / 256UL;
  3386  00EC  085E               	movf	_timer1_init^(0+128),w
  3387  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  3388  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  3389  00EF  00AF               	movwf	??_Run_Timer1
  3390  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  3391  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  3392  00F2  085F               	movf	(_timer1_init+1)^(0+128),w
  3393  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  3394  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  3395  00F5  00B0               	movwf	??_Run_Timer1+1
  3396  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  3397  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  3398  00F8  0860               	movf	(_timer1_init+2)^(0+128),w
  3399  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  3400  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  3401  00FB  00B1               	movwf	??_Run_Timer1+2
  3402  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  3403  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  3404  00FE  0861               	movf	(_timer1_init+3)^(0+128),w
  3405  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  3406  0100  1303               	bcf	3,6	;RP1=0, select bank0
  3407  0101  00B2               	movwf	??_Run_Timer1+3
  3408  0102  3008               	movlw	8
  3409  0103                     u1255:	
  3410  0103  1003               	clrc
  3411  0104  0CB2               	rrf	??_Run_Timer1+3,f
  3412  0105  0CB1               	rrf	??_Run_Timer1+2,f
  3413  0106  0CB0               	rrf	??_Run_Timer1+1,f
  3414  0107  0CAF               	rrf	??_Run_Timer1,f
  3415  0108  3EFF               	addlw	-1
  3416  0109  1D03               	skipz
  3417  010A  2903               	goto	u1255
  3418  010B  082F               	movf	??_Run_Timer1,w
  3419  010C  008F               	movwf	15	;volatile
  3420                           
  3421                           ;adc7.c: 778: TMR1L = timer1_init % 256UL;
  3422  010D  1683               	bsf	3,5	;RP0=1, select bank1
  3423  010E  1303               	bcf	3,6	;RP1=0, select bank1
  3424  010F  085E               	movf	_timer1_init^(0+128),w
  3425  0110  1283               	bcf	3,5	;RP0=0, select bank0
  3426  0111  1303               	bcf	3,6	;RP1=0, select bank0
  3427  0112  008E               	movwf	14	;volatile
  3428                           
  3429                           ;adc7.c: 779: num_calls_timer1 = 0;
  3430  0113  3000               	movlw	0
  3431  0114  1683               	bsf	3,5	;RP0=1, select bank3
  3432  0115  1703               	bsf	3,6	;RP1=1, select bank3
  3433  0116  00BF               	movwf	(_num_calls_timer1+3)^(0+384)
  3434  0117  3000               	movlw	0
  3435  0118  00BE               	movwf	(_num_calls_timer1+2)^(0+384)
  3436  0119  3000               	movlw	0
  3437  011A  00BD               	movwf	(_num_calls_timer1+1)^(0+384)
  3438  011B  3000               	movlw	0
  3439  011C  00BC               	movwf	_num_calls_timer1^(0+384)
  3440                           
  3441                           ;adc7.c: 780: count_update_cur_stage_per_sec = 0;
  3442  011D  01C2               	clrf	_count_update_cur_stage_per_sec^(0+384)
  3443  011E  01C3               	clrf	(_count_update_cur_stage_per_sec+1)^(0+384)
  3444  011F  0008               	return
  3445  0120                     __end_of_Run_Timer1:	
  3446                           
  3447                           	psect	text5
  3448  176A                     __ptext5:	
  3449 ;; *************** function _Stop_Timer1 *****************
  3450 ;; Defined at:
  3451 ;;		line 796 in file "adc7.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;		None
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;		None
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3465 ;;      Params:         0       0       0       0       0
  3466 ;;      Locals:         0       0       0       0       0
  3467 ;;      Temps:          0       0       0       0       0
  3468 ;;      Totals:         0       0       0       0       0
  3469 ;;Total ram usage:        0 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; This function calls:
  3472 ;;		Nothing
  3473 ;; This function is called by:
  3474 ;;		_Reset_Process
  3475 ;;		_Mix_Fsm_Proc
  3476 ;;		_Run_Timer1
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           
  3481                           ;psect for function _Stop_Timer1
  3482  176A                     _Stop_Timer1:	
  3483                           
  3484                           ;adc7.c: 798: if(timer1_mode != (0U))
  3485                           
  3486                           ;incstack = 0
  3487                           ; Regs used in _Stop_Timer1: [wreg+status,2+status,0]
  3488  176A  1683               	bsf	3,5	;RP0=1, select bank1
  3489  176B  1303               	bcf	3,6	;RP1=0, select bank1
  3490  176C  0868               	movf	_timer1_mode^(0+128),w
  3491  176D  0469               	iorwf	(_timer1_mode+1)^(0+128),w
  3492  176E  1903               	btfsc	3,2
  3493  176F  0008               	return
  3494                           
  3495                           ;adc7.c: 799: {
  3496                           ;adc7.c: 800: timer1_mode = (0U);
  3497  1770  01E8               	clrf	_timer1_mode^(0+128)
  3498  1771  01E9               	clrf	(_timer1_mode+1)^(0+128)
  3499                           
  3500                           ;adc7.c: 801: T1CON = 0x80;
  3501  1772  3080               	movlw	128
  3502  1773  1283               	bcf	3,5	;RP0=0, select bank0
  3503  1774  1303               	bcf	3,6	;RP1=0, select bank0
  3504  1775  0090               	movwf	16	;volatile
  3505  1776  0008               	return
  3506  1777                     __end_of_Stop_Timer1:	
  3507                           
  3508                           	psect	text6
  3509  17DD                     __ptext6:	
  3510 ;; *************** function _Prescale_Timer1 *****************
  3511 ;; Defined at:
  3512 ;;		line 817 in file "adc7.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;		None
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;		None
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      void 
  3519 ;; Registers used:
  3520 ;;		wreg, status,2, status,0
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3526 ;;      Params:         0       0       0       0       0
  3527 ;;      Locals:         0       0       0       0       0
  3528 ;;      Temps:          3       0       0       0       0
  3529 ;;      Totals:         3       0       0       0       0
  3530 ;;Total ram usage:        3 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; This function calls:
  3533 ;;		Nothing
  3534 ;; This function is called by:
  3535 ;;		_Run_Timer1
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           
  3540                           ;psect for function _Prescale_Timer1
  3541  17DD                     _Prescale_Timer1:	
  3542                           
  3543                           ;adc7.c: 819: if(T1CKPS0 == 1)
  3544                           
  3545                           ;incstack = 0
  3546                           ; Regs used in _Prescale_Timer1: [wreg+status,2+status,0]
  3547  17DD  1283               	bcf	3,5	;RP0=0, select bank0
  3548  17DE  1303               	bcf	3,6	;RP1=0, select bank0
  3549  17DF  1E10               	btfss	16,4	;volatile
  3550  17E0  2FE4               	goto	l253
  3551                           
  3552                           ;adc7.c: 820: {
  3553                           ;adc7.c: 821: prescale_shift_timer1 |= 0x01;
  3554  17E1  1683               	bsf	3,5	;RP0=1, select bank3
  3555  17E2  1703               	bsf	3,6	;RP1=1, select bank3
  3556  17E3  1444               	bsf	_prescale_shift_timer1^(0+384),0
  3557  17E4                     l253:	
  3558                           
  3559                           ;adc7.c: 822: }
  3560                           ;adc7.c: 823: if(T1CKPS1 == 1)
  3561  17E4  1283               	bcf	3,5	;RP0=0, select bank0
  3562  17E5  1303               	bcf	3,6	;RP1=0, select bank0
  3563  17E6  1E90               	btfss	16,5	;volatile
  3564  17E7  2FEB               	goto	l1773
  3565                           
  3566                           ;adc7.c: 824: {
  3567                           ;adc7.c: 825: prescale_shift_timer1 |= 0x02;
  3568  17E8  1683               	bsf	3,5	;RP0=1, select bank3
  3569  17E9  1703               	bsf	3,6	;RP1=1, select bank3
  3570  17EA  14C4               	bsf	_prescale_shift_timer1^(0+384),1
  3571  17EB                     l1773:	
  3572                           
  3573                           ;adc7.c: 826: }
  3574                           ;adc7.c: 827: prescale_timer1 = prescale_timer1 << prescale_shift_timer1;
  3575  17EB  1683               	bsf	3,5	;RP0=1, select bank3
  3576  17EC  1703               	bsf	3,6	;RP1=1, select bank3
  3577  17ED  0A44               	incf	_prescale_shift_timer1^(0+384),w
  3578  17EE  00F0               	movwf	??_Prescale_Timer1
  3579  17EF  1283               	bcf	3,5	;RP0=0, select bank0
  3580  17F0  1303               	bcf	3,6	;RP1=0, select bank0
  3581  17F1  086C               	movf	_prescale_timer1+1,w
  3582  17F2  00F2               	movwf	??_Prescale_Timer1+2
  3583  17F3  086B               	movf	_prescale_timer1,w
  3584  17F4  00F1               	movwf	??_Prescale_Timer1+1
  3585  17F5  2FF9               	goto	u1144
  3586  17F6                     u1145:	
  3587  17F6  1003               	clrc
  3588  17F7  0DF1               	rlf	??_Prescale_Timer1+1,f
  3589  17F8  0DF2               	rlf	??_Prescale_Timer1+2,f
  3590  17F9                     u1144:	
  3591  17F9  0BF0               	decfsz	??_Prescale_Timer1,f
  3592  17FA  2FF6               	goto	u1145
  3593  17FB  0871               	movf	??_Prescale_Timer1+1,w
  3594  17FC  00EB               	movwf	_prescale_timer1
  3595  17FD  0872               	movf	??_Prescale_Timer1+2,w
  3596  17FE  00EC               	movwf	_prescale_timer1+1
  3597  17FF  0008               	return
  3598  1800                     __end_of_Prescale_Timer1:	
  3599                           
  3600                           	psect	text7
  3601  0A1B                     __ptext7:	
  3602 ;; *************** function _Read_ADC_Channel *****************
  3603 ;; Defined at:
  3604 ;;		line 668 in file "adc7.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  adc_channel     2    6[COMMON] unsigned int 
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  adc_value_ch    4    2[BANK0 ] unsigned long 
  3609 ;;  adc_value_le    2    6[BANK0 ] unsigned int 
  3610 ;;  adc_value_mo    2    0[BANK0 ] unsigned int 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  4    6[COMMON] unsigned long 
  3613 ;; Registers used:
  3614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3620 ;;      Params:         4       0       0       0       0
  3621 ;;      Locals:         0       8       0       0       0
  3622 ;;      Temps:          2       0       0       0       0
  3623 ;;      Totals:         6       8       0       0       0
  3624 ;;Total ram usage:       14 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    1
  3627 ;; This function calls:
  3628 ;;		_Delay_Time_ByCount
  3629 ;;		_Init_ADC_Channel
  3630 ;; This function is called by:
  3631 ;;		_Mix_Fsm_Proc
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           
  3636                           ;psect for function _Read_ADC_Channel
  3637  0A1B                     _Read_ADC_Channel:	
  3638                           
  3639                           ;adc7.c: 670: unsigned int adc_value_least_byte, adc_value_most_byte;
  3640                           ;adc7.c: 671: unsigned long adc_value_channel;
  3641                           ;adc7.c: 676: Init_ADC_Channel(adc_channel);
  3642                           
  3643                           ;incstack = 0
  3644                           ; Regs used in _Read_ADC_Channel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3645  0A1B  0877               	movf	Read_ADC_Channel@adc_channel+1,w
  3646  0A1C  00F1               	movwf	Init_ADC_Channel@adc_channel+1
  3647  0A1D  0876               	movf	Read_ADC_Channel@adc_channel,w
  3648  0A1E  00F0               	movwf	Init_ADC_Channel@adc_channel
  3649  0A1F  160A  118A  2788  120A  158A  	fcall	_Init_ADC_Channel
  3650                           
  3651                           ;adc7.c: 677: Delay_Time_ByCount((1000UL));
  3652  0A24  30E8               	movlw	232
  3653  0A25  00F0               	movwf	Delay_Time_ByCount@time_delay
  3654  0A26  3003               	movlw	3
  3655  0A27  00F1               	movwf	Delay_Time_ByCount@time_delay+1
  3656  0A28  160A  118A  275D  120A  158A  	fcall	_Delay_Time_ByCount
  3657                           
  3658                           ;adc7.c: 679: GO = 1;
  3659  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  3660  0A2E  1303               	bcf	3,6	;RP1=0, select bank0
  3661  0A2F  149F               	bsf	31,1	;volatile
  3662  0A30                     l228:	
  3663                           ;adc7.c: 680: while(GO == 1);
  3664                           
  3665  0A30  189F               	btfsc	31,1	;volatile
  3666  0A31  2A30               	goto	l228
  3667                           
  3668                           ;adc7.c: 682: adc_value_least_byte = ADRESL;
  3669  0A32  1683               	bsf	3,5	;RP0=1, select bank1
  3670  0A33  1303               	bcf	3,6	;RP1=0, select bank1
  3671  0A34  081E               	movf	30,w	;volatile
  3672  0A35  00FA               	movwf	??_Read_ADC_Channel
  3673  0A36  01FB               	clrf	??_Read_ADC_Channel+1
  3674  0A37  087A               	movf	??_Read_ADC_Channel,w
  3675  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  3676  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  3677  0A3A  00A6               	movwf	Read_ADC_Channel@adc_value_least_byte
  3678  0A3B  087B               	movf	??_Read_ADC_Channel+1,w
  3679  0A3C  00A7               	movwf	Read_ADC_Channel@adc_value_least_byte+1
  3680                           
  3681                           ;adc7.c: 683: adc_value_most_byte = ADRESH & 0x03u;
  3682  0A3D  081E               	movf	30,w	;volatile
  3683  0A3E  3903               	andlw	3
  3684  0A3F  00FA               	movwf	??_Read_ADC_Channel
  3685  0A40  01FB               	clrf	??_Read_ADC_Channel+1
  3686  0A41  087A               	movf	??_Read_ADC_Channel,w
  3687  0A42  00A0               	movwf	Read_ADC_Channel@adc_value_most_byte
  3688  0A43  087B               	movf	??_Read_ADC_Channel+1,w
  3689  0A44  00A1               	movwf	Read_ADC_Channel@adc_value_most_byte+1
  3690                           
  3691                           ;adc7.c: 684: switch(adc_value_most_byte)
  3692  0A45  2A65               	goto	l1859
  3693  0A46                     l1849:	
  3694                           ;adc7.c: 685: {
  3695                           ;adc7.c: 686: case 0x00:
  3696                           
  3697                           
  3698                           ;adc7.c: 687: adc_value_channel = adc_value_least_byte;
  3699  0A46  0826               	movf	Read_ADC_Channel@adc_value_least_byte,w
  3700  0A47  00A2               	movwf	Read_ADC_Channel@adc_value_channel
  3701  0A48  0827               	movf	Read_ADC_Channel@adc_value_least_byte+1,w
  3702  0A49  2A61               	goto	L3
  3703  0A4A                     l1851:	
  3704                           ;adc7.c: 689: case 0x01:
  3705                           
  3706                           ;adc7.c: 688: break;
  3707                           
  3708                           
  3709                           ;adc7.c: 690: adc_value_channel = adc_value_least_byte + 256u;
  3710  0A4A  0826               	movf	Read_ADC_Channel@adc_value_least_byte,w
  3711  0A4B  3E00               	addlw	0
  3712  0A4C  00A2               	movwf	Read_ADC_Channel@adc_value_channel
  3713  0A4D  0827               	movf	Read_ADC_Channel@adc_value_least_byte+1,w
  3714  0A4E  1803               	skipnc
  3715  0A4F  3E01               	addlw	1
  3716  0A50  3E01               	addlw	1
  3717  0A51  2A61               	goto	L3
  3718  0A52                     l1853:	
  3719                           ;adc7.c: 692: case 0x02:
  3720                           
  3721                           ;adc7.c: 691: break;
  3722                           
  3723                           
  3724                           ;adc7.c: 693: adc_value_channel = adc_value_least_byte + 512u;
  3725  0A52  0826               	movf	Read_ADC_Channel@adc_value_least_byte,w
  3726  0A53  3E00               	addlw	0
  3727  0A54  00A2               	movwf	Read_ADC_Channel@adc_value_channel
  3728  0A55  0827               	movf	Read_ADC_Channel@adc_value_least_byte+1,w
  3729  0A56  1803               	skipnc
  3730  0A57  3E01               	addlw	1
  3731  0A58  3E02               	addlw	2
  3732  0A59  2A61               	goto	L3
  3733  0A5A                     l1855:	
  3734                           ;adc7.c: 695: case 0x03:
  3735                           
  3736                           ;adc7.c: 694: break;
  3737                           
  3738                           
  3739                           ;adc7.c: 696: adc_value_channel = adc_value_least_byte + 768u;
  3740  0A5A  0826               	movf	Read_ADC_Channel@adc_value_least_byte,w
  3741  0A5B  3E00               	addlw	0
  3742  0A5C  00A2               	movwf	Read_ADC_Channel@adc_value_channel
  3743  0A5D  0827               	movf	Read_ADC_Channel@adc_value_least_byte+1,w
  3744  0A5E  1803               	skipnc
  3745  0A5F  3E01               	addlw	1
  3746  0A60  3E03               	addlw	3
  3747  0A61                     L3:	
  3748  0A61  00A3               	movwf	Read_ADC_Channel@adc_value_channel+1
  3749  0A62  01A4               	clrf	Read_ADC_Channel@adc_value_channel+2
  3750  0A63  01A5               	clrf	Read_ADC_Channel@adc_value_channel+3
  3751                           
  3752                           ;adc7.c: 698: }
  3753                           
  3754                           ;adc7.c: 697: break;
  3755  0A64  2A78               	goto	l1861
  3756  0A65                     l1859:	
  3757                           
  3758                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3759                           ; Switch size 1, requested type "space"
  3760                           ; Number of cases is 1, Range of values is 0 to 0
  3761                           ; switch strategies available:
  3762                           ; Name         Instructions Cycles
  3763                           ; simple_byte            4     3 (average)
  3764                           ; direct_byte           11     8 (fixed)
  3765                           ; jumptable            260     6 (fixed)
  3766                           ;	Chosen strategy is simple_byte
  3767  0A65  0821               	movf	Read_ADC_Channel@adc_value_most_byte+1,w
  3768  0A66  3A00               	xorlw	0	; case 0
  3769  0A67  1903               	skipnz
  3770  0A68  2A6A               	goto	l2403
  3771  0A69  2A78               	goto	l1861
  3772  0A6A                     l2403:	
  3773                           
  3774                           ; Switch size 1, requested type "space"
  3775                           ; Number of cases is 4, Range of values is 0 to 3
  3776                           ; switch strategies available:
  3777                           ; Name         Instructions Cycles
  3778                           ; simple_byte           13     7 (average)
  3779                           ; direct_byte           20     8 (fixed)
  3780                           ; jumptable            260     6 (fixed)
  3781                           ;	Chosen strategy is simple_byte
  3782  0A6A  0820               	movf	Read_ADC_Channel@adc_value_most_byte,w
  3783  0A6B  3A00               	xorlw	0	; case 0
  3784  0A6C  1903               	skipnz
  3785  0A6D  2A46               	goto	l1849
  3786  0A6E  3A01               	xorlw	1	; case 1
  3787  0A6F  1903               	skipnz
  3788  0A70  2A4A               	goto	l1851
  3789  0A71  3A03               	xorlw	3	; case 2
  3790  0A72  1903               	skipnz
  3791  0A73  2A52               	goto	l1853
  3792  0A74  3A01               	xorlw	1	; case 3
  3793  0A75  1903               	skipnz
  3794  0A76  2A5A               	goto	l1855
  3795  0A77  2A78               	goto	l1861
  3796  0A78                     l1861:	
  3797                           
  3798                           ;adc7.c: 699: return adc_value_channel;
  3799  0A78  0825               	movf	Read_ADC_Channel@adc_value_channel+3,w
  3800  0A79  00F9               	movwf	?_Read_ADC_Channel+3
  3801  0A7A  0824               	movf	Read_ADC_Channel@adc_value_channel+2,w
  3802  0A7B  00F8               	movwf	?_Read_ADC_Channel+2
  3803  0A7C  0823               	movf	Read_ADC_Channel@adc_value_channel+1,w
  3804  0A7D  00F7               	movwf	?_Read_ADC_Channel+1
  3805  0A7E  0822               	movf	Read_ADC_Channel@adc_value_channel,w
  3806  0A7F  00F6               	movwf	?_Read_ADC_Channel
  3807  0A80  0008               	return
  3808  0A81                     __end_of_Read_ADC_Channel:	
  3809                           
  3810                           	psect	text8
  3811  1788                     __ptext8:	
  3812 ;; *************** function _Init_ADC_Channel *****************
  3813 ;; Defined at:
  3814 ;;		line 660 in file "adc7.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  adc_channel     2    0[COMMON] const unsigned int 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  adc_channel_    2    4[COMMON] unsigned int 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      void 
  3821 ;; Registers used:
  3822 ;;		wreg, status,2, status,0
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3828 ;;      Params:         2       0       0       0       0
  3829 ;;      Locals:         2       0       0       0       0
  3830 ;;      Temps:          2       0       0       0       0
  3831 ;;      Totals:         6       0       0       0       0
  3832 ;;Total ram usage:        6 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; This function calls:
  3835 ;;		Nothing
  3836 ;; This function is called by:
  3837 ;;		_Read_ADC_Channel
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           
  3842                           ;psect for function _Init_ADC_Channel
  3843  1788                     _Init_ADC_Channel:	
  3844                           
  3845                           ;adc7.c: 662: unsigned int adc_channel_reg = adc_channel << 2;
  3846                           
  3847                           ;incstack = 0
  3848                           ; Regs used in _Init_ADC_Channel: [wreg+status,2+status,0]
  3849  1788  0871               	movf	Init_ADC_Channel@adc_channel+1,w
  3850  1789  00F3               	movwf	??_Init_ADC_Channel+1
  3851  178A  0870               	movf	Init_ADC_Channel@adc_channel,w
  3852  178B  00F2               	movwf	??_Init_ADC_Channel
  3853  178C  1003               	clrc
  3854  178D  0DF2               	rlf	??_Init_ADC_Channel,f
  3855  178E  0DF3               	rlf	??_Init_ADC_Channel+1,f
  3856  178F  1003               	clrc
  3857  1790  0DF2               	rlf	??_Init_ADC_Channel,f
  3858  1791  0DF3               	rlf	??_Init_ADC_Channel+1,f
  3859  1792  0872               	movf	??_Init_ADC_Channel,w
  3860  1793  00F4               	movwf	Init_ADC_Channel@adc_channel_reg
  3861  1794  0873               	movf	??_Init_ADC_Channel+1,w
  3862  1795  00F5               	movwf	Init_ADC_Channel@adc_channel_reg+1
  3863                           
  3864                           ;adc7.c: 664: ADCON0 = adc_channel_reg | 0x80 | 0x01;
  3865  1796  0874               	movf	Init_ADC_Channel@adc_channel_reg,w
  3866  1797  3881               	iorlw	129
  3867  1798  1283               	bcf	3,5	;RP0=0, select bank0
  3868  1799  1303               	bcf	3,6	;RP1=0, select bank0
  3869  179A  009F               	movwf	31	;volatile
  3870                           
  3871                           ;adc7.c: 666: ADCON1 = 0x80;
  3872  179B  3080               	movlw	128
  3873  179C  1683               	bsf	3,5	;RP0=1, select bank1
  3874  179D  1303               	bcf	3,6	;RP1=0, select bank1
  3875  179E  009F               	movwf	31	;volatile
  3876  179F  0008               	return
  3877  17A0                     __end_of_Init_ADC_Channel:	
  3878                           
  3879                           	psect	text9
  3880  175D                     __ptext9:	
  3881 ;; *************** function _Delay_Time_ByCount *****************
  3882 ;; Defined at:
  3883 ;;		line 1023 in file "adc7.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  time_delay      2    0[COMMON] unsigned int 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;		None
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  1    wreg      void 
  3890 ;; Registers used:
  3891 ;;		wreg, status,2, status,0
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3897 ;;      Params:         2       0       0       0       0
  3898 ;;      Locals:         0       0       0       0       0
  3899 ;;      Temps:          0       0       0       0       0
  3900 ;;      Totals:         2       0       0       0       0
  3901 ;;Total ram usage:        2 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; This function calls:
  3904 ;;		Nothing
  3905 ;; This function is called by:
  3906 ;;		_Mix_Fsm_Proc
  3907 ;;		_Read_ADC_Channel
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           
  3912                           ;psect for function _Delay_Time_ByCount
  3913  175D                     _Delay_Time_ByCount:	
  3914  175D                     l1751:	
  3915                           ;adc7.c: 1025: while(time_delay--);
  3916                           
  3917                           ;incstack = 0
  3918                           ; Regs used in _Delay_Time_ByCount: [wreg+status,2+status,0]
  3919                           
  3920  175D  3001               	movlw	1
  3921  175E  02F0               	subwf	Delay_Time_ByCount@time_delay,f
  3922  175F  3000               	movlw	0
  3923  1760  1C03               	skipc
  3924  1761  03F1               	decf	Delay_Time_ByCount@time_delay+1,f
  3925  1762  02F1               	subwf	Delay_Time_ByCount@time_delay+1,f
  3926  1763  0A70               	incf	Delay_Time_ByCount@time_delay,w
  3927  1764  1D03               	skipz
  3928  1765  2F5D               	goto	l1751
  3929  1766  0A71               	incf	Delay_Time_ByCount@time_delay+1,w
  3930  1767  1903               	btfsc	3,2
  3931  1768  0008               	return
  3932  1769  2F5D               	goto	l1751
  3933  176A                     __end_of_Delay_Time_ByCount:	
  3934                           
  3935                           	psect	text10
  3936  0BE0                     __ptext10:	
  3937 ;; *************** function _Encoded_To_Percent_Calc *****************
  3938 ;; Defined at:
  3939 ;;		line 735 in file "adc7.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  adc_value       4   13[BANK0 ] const unsigned long 
  3942 ;;  percent_int     1   17[BANK0 ] const PTR unsigned int 
  3943 ;;		 -> Mix_Fsm_Proc@percent_int_rsvwater_ch(2), Mix_Fsm_Proc@percent_int_rsvsand_ch(2), Mix_Fsm_Proc@percent_int_rsvcmt
      +_ch(2), 
  3944 ;;  percent_frac    1   18[BANK0 ] const PTR unsigned int 
  3945 ;;		 -> Mix_Fsm_Proc@percent_frac_rsvwater_ch(2), Mix_Fsm_Proc@percent_frac_rsvsand_ch(2), Mix_Fsm_Proc@percent_frac_rsv
      +cmt_ch(2), 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  temp_percent    4   23[BANK0 ] unsigned long 
  3948 ;;  remainder_va    2   27[BANK0 ] unsigned int 
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      void 
  3951 ;; Registers used:
  3952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3958 ;;      Params:         0       6       0       0       0
  3959 ;;      Locals:         0       6       0       0       0
  3960 ;;      Temps:          0       4       0       0       0
  3961 ;;      Totals:         0      16       0       0       0
  3962 ;;Total ram usage:       16 bytes
  3963 ;; Hardware stack levels used:    1
  3964 ;; Hardware stack levels required when called:    1
  3965 ;; This function calls:
  3966 ;;		___lldiv
  3967 ;;		___llmod
  3968 ;;		___lmul
  3969 ;;		___wmul
  3970 ;; This function is called by:
  3971 ;;		_Mix_Fsm_Proc
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           
  3976                           ;psect for function _Encoded_To_Percent_Calc
  3977  0BE0                     _Encoded_To_Percent_Calc:	
  3978                           
  3979                           ;adc7.c: 737: unsigned int remainder_val;
  3980                           ;adc7.c: 738: unsigned long temp_percent_int;
  3981                           ;adc7.c: 739: temp_percent_int = (100 * adc_value);
  3982                           
  3983                           ;incstack = 0
  3984                           ; Regs used in _Encoded_To_Percent_Calc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3985  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  3986  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  3987  0BE2  0830               	movf	Encoded_To_Percent_Calc@adc_value+3,w
  3988  0BE3  00F3               	movwf	___lmul@multiplier+3
  3989  0BE4  082F               	movf	Encoded_To_Percent_Calc@adc_value+2,w
  3990  0BE5  00F2               	movwf	___lmul@multiplier+2
  3991  0BE6  082E               	movf	Encoded_To_Percent_Calc@adc_value+1,w
  3992  0BE7  00F1               	movwf	___lmul@multiplier+1
  3993  0BE8  082D               	movf	Encoded_To_Percent_Calc@adc_value,w
  3994  0BE9  00F0               	movwf	___lmul@multiplier
  3995  0BEA  3000               	movlw	0
  3996  0BEB  00F7               	movwf	___lmul@multiplicand+3
  3997  0BEC  3000               	movlw	0
  3998  0BED  00F6               	movwf	___lmul@multiplicand+2
  3999  0BEE  3000               	movlw	0
  4000  0BEF  00F5               	movwf	___lmul@multiplicand+1
  4001  0BF0  3064               	movlw	100
  4002  0BF1  00F4               	movwf	___lmul@multiplicand
  4003  0BF2  120A  158A  20E1  120A  158A  	fcall	___lmul
  4004  0BF7  0873               	movf	?___lmul+3,w
  4005  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  4006  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  4007  0BFA  00BA               	movwf	Encoded_To_Percent_Calc@temp_percent_int+3
  4008  0BFB  0872               	movf	?___lmul+2,w
  4009  0BFC  00B9               	movwf	Encoded_To_Percent_Calc@temp_percent_int+2
  4010  0BFD  0871               	movf	?___lmul+1,w
  4011  0BFE  00B8               	movwf	Encoded_To_Percent_Calc@temp_percent_int+1
  4012  0BFF  0870               	movf	?___lmul,w
  4013  0C00  00B7               	movwf	Encoded_To_Percent_Calc@temp_percent_int
  4014                           
  4015                           ;adc7.c: 740: *percent_int = (100 * adc_value) / (1024ul - 1);
  4016  0C01  3000               	movlw	0
  4017  0C02  00A3               	movwf	___lldiv@divisor+3
  4018  0C03  3000               	movlw	0
  4019  0C04  00A2               	movwf	___lldiv@divisor+2
  4020  0C05  3003               	movlw	3
  4021  0C06  00A1               	movwf	___lldiv@divisor+1
  4022  0C07  30FF               	movlw	255
  4023  0C08  00A0               	movwf	___lldiv@divisor
  4024  0C09  0830               	movf	Encoded_To_Percent_Calc@adc_value+3,w
  4025  0C0A  00F3               	movwf	___lmul@multiplier+3
  4026  0C0B  082F               	movf	Encoded_To_Percent_Calc@adc_value+2,w
  4027  0C0C  00F2               	movwf	___lmul@multiplier+2
  4028  0C0D  082E               	movf	Encoded_To_Percent_Calc@adc_value+1,w
  4029  0C0E  00F1               	movwf	___lmul@multiplier+1
  4030  0C0F  082D               	movf	Encoded_To_Percent_Calc@adc_value,w
  4031  0C10  00F0               	movwf	___lmul@multiplier
  4032  0C11  3000               	movlw	0
  4033  0C12  00F7               	movwf	___lmul@multiplicand+3
  4034  0C13  3000               	movlw	0
  4035  0C14  00F6               	movwf	___lmul@multiplicand+2
  4036  0C15  3000               	movlw	0
  4037  0C16  00F5               	movwf	___lmul@multiplicand+1
  4038  0C17  3064               	movlw	100
  4039  0C18  00F4               	movwf	___lmul@multiplicand
  4040  0C19  120A  158A  20E1  120A  158A  	fcall	___lmul
  4041  0C1E  0873               	movf	?___lmul+3,w
  4042  0C1F  1283               	bcf	3,5	;RP0=0, select bank0
  4043  0C20  1303               	bcf	3,6	;RP1=0, select bank0
  4044  0C21  00A7               	movwf	___lldiv@dividend+3
  4045  0C22  0872               	movf	?___lmul+2,w
  4046  0C23  00A6               	movwf	___lldiv@dividend+2
  4047  0C24  0871               	movf	?___lmul+1,w
  4048  0C25  00A5               	movwf	___lldiv@dividend+1
  4049  0C26  0870               	movf	?___lmul,w
  4050  0C27  00A4               	movwf	___lldiv@dividend
  4051  0C28  120A  158A  21BB  120A  158A  	fcall	___lldiv
  4052  0C2D  1283               	bcf	3,5	;RP0=0, select bank0
  4053  0C2E  1303               	bcf	3,6	;RP1=0, select bank0
  4054  0C2F  0831               	movf	Encoded_To_Percent_Calc@percent_int,w
  4055  0C30  0084               	movwf	4
  4056  0C31  0820               	movf	?___lldiv,w
  4057  0C32  1383               	bcf	3,7	;select IRP bank0
  4058  0C33  0080               	movwf	0
  4059  0C34  0A84               	incf	4,f
  4060  0C35  0821               	movf	?___lldiv+1,w
  4061  0C36  0080               	movwf	0
  4062                           
  4063                           ;adc7.c: 741: remainder_val = temp_percent_int % (1024ul - 1 );
  4064  0C37  3000               	movlw	0
  4065  0C38  00F3               	movwf	___llmod@divisor+3
  4066  0C39  3000               	movlw	0
  4067  0C3A  00F2               	movwf	___llmod@divisor+2
  4068  0C3B  3003               	movlw	3
  4069  0C3C  00F1               	movwf	___llmod@divisor+1
  4070  0C3D  30FF               	movlw	255
  4071  0C3E  00F0               	movwf	___llmod@divisor
  4072  0C3F  083A               	movf	Encoded_To_Percent_Calc@temp_percent_int+3,w
  4073  0C40  00F7               	movwf	___llmod@dividend+3
  4074  0C41  0839               	movf	Encoded_To_Percent_Calc@temp_percent_int+2,w
  4075  0C42  00F6               	movwf	___llmod@dividend+2
  4076  0C43  0838               	movf	Encoded_To_Percent_Calc@temp_percent_int+1,w
  4077  0C44  00F5               	movwf	___llmod@dividend+1
  4078  0C45  0837               	movf	Encoded_To_Percent_Calc@temp_percent_int,w
  4079  0C46  00F4               	movwf	___llmod@dividend
  4080  0C47  120A  158A  2120  120A  158A  	fcall	___llmod
  4081  0C4C  0871               	movf	?___llmod+1,w
  4082  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  4083  0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  4084  0C4F  00BC               	movwf	Encoded_To_Percent_Calc@remainder_val+1
  4085  0C50  0870               	movf	?___llmod,w
  4086  0C51  00BB               	movwf	Encoded_To_Percent_Calc@remainder_val
  4087                           
  4088                           ;adc7.c: 742: *percent_frac = (remainder_val * 10) /(1024ul - 1);
  4089  0C52  3000               	movlw	0
  4090  0C53  00A3               	movwf	___lldiv@divisor+3
  4091  0C54  3000               	movlw	0
  4092  0C55  00A2               	movwf	___lldiv@divisor+2
  4093  0C56  3003               	movlw	3
  4094  0C57  00A1               	movwf	___lldiv@divisor+1
  4095  0C58  30FF               	movlw	255
  4096  0C59  00A0               	movwf	___lldiv@divisor
  4097  0C5A  300A               	movlw	10
  4098  0C5B  00F2               	movwf	___wmul@multiplicand
  4099  0C5C  3000               	movlw	0
  4100  0C5D  00F3               	movwf	___wmul@multiplicand+1
  4101  0C5E  083C               	movf	Encoded_To_Percent_Calc@remainder_val+1,w
  4102  0C5F  00F1               	movwf	___wmul@multiplier+1
  4103  0C60  083B               	movf	Encoded_To_Percent_Calc@remainder_val,w
  4104  0C61  00F0               	movwf	___wmul@multiplier
  4105  0C62  160A  118A  27BC  120A  158A  	fcall	___wmul
  4106  0C67  0870               	movf	?___wmul,w
  4107  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  4108  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  4109  0C6A  00B3               	movwf	??_Encoded_To_Percent_Calc
  4110  0C6B  0871               	movf	?___wmul+1,w
  4111  0C6C  00B4               	movwf	??_Encoded_To_Percent_Calc+1
  4112  0C6D  01B5               	clrf	??_Encoded_To_Percent_Calc+2
  4113  0C6E  01B6               	clrf	??_Encoded_To_Percent_Calc+3
  4114  0C6F  0836               	movf	??_Encoded_To_Percent_Calc+3,w
  4115  0C70  00A7               	movwf	___lldiv@dividend+3
  4116  0C71  0835               	movf	??_Encoded_To_Percent_Calc+2,w
  4117  0C72  00A6               	movwf	___lldiv@dividend+2
  4118  0C73  0834               	movf	??_Encoded_To_Percent_Calc+1,w
  4119  0C74  00A5               	movwf	___lldiv@dividend+1
  4120  0C75  0833               	movf	??_Encoded_To_Percent_Calc,w
  4121  0C76  00A4               	movwf	___lldiv@dividend
  4122  0C77  120A  158A  21BB   	fcall	___lldiv
  4123  0C7A  1283               	bcf	3,5	;RP0=0, select bank0
  4124  0C7B  1303               	bcf	3,6	;RP1=0, select bank0
  4125  0C7C  0832               	movf	Encoded_To_Percent_Calc@percent_frac,w
  4126  0C7D  0084               	movwf	4
  4127  0C7E  0820               	movf	?___lldiv,w
  4128  0C7F  1383               	bcf	3,7	;select IRP bank0
  4129  0C80  0080               	movwf	0
  4130  0C81  0A84               	incf	4,f
  4131  0C82  0821               	movf	?___lldiv+1,w
  4132  0C83  0080               	movwf	0
  4133  0C84  0008               	return
  4134  0C85                     __end_of_Encoded_To_Percent_Calc:	
  4135                           
  4136                           	psect	text11
  4137  17BC                     __ptext11:	
  4138 ;; *************** function ___wmul *****************
  4139 ;; Defined at:
  4140 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;  multiplier      2    0[COMMON] unsigned int 
  4143 ;;  multiplicand    2    2[COMMON] unsigned int 
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;  product         2    4[COMMON] unsigned int 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  2    0[COMMON] unsigned int 
  4148 ;; Registers used:
  4149 ;;		wreg, status,2, status,0
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4155 ;;      Params:         4       0       0       0       0
  4156 ;;      Locals:         2       0       0       0       0
  4157 ;;      Temps:          0       0       0       0       0
  4158 ;;      Totals:         6       0       0       0       0
  4159 ;;Total ram usage:        6 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_Encoded_To_Percent_Calc
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function ___wmul
  4170  17BC                     ___wmul:	
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4174  17BC  01F4               	clrf	___wmul@product
  4175  17BD  01F5               	clrf	___wmul@product+1
  4176  17BE                     l1777:	
  4177  17BE  1C70               	btfss	___wmul@multiplier,0
  4178  17BF  2FC6               	goto	l411
  4179  17C0  0872               	movf	___wmul@multiplicand,w
  4180  17C1  07F4               	addwf	___wmul@product,f
  4181  17C2  1803               	skipnc
  4182  17C3  0AF5               	incf	___wmul@product+1,f
  4183  17C4  0873               	movf	___wmul@multiplicand+1,w
  4184  17C5  07F5               	addwf	___wmul@product+1,f
  4185  17C6                     l411:	
  4186  17C6  3001               	movlw	1
  4187  17C7                     u1165:	
  4188  17C7  1003               	clrc
  4189  17C8  0DF2               	rlf	___wmul@multiplicand,f
  4190  17C9  0DF3               	rlf	___wmul@multiplicand+1,f
  4191  17CA  3EFF               	addlw	-1
  4192  17CB  1D03               	skipz
  4193  17CC  2FC7               	goto	u1165
  4194  17CD  3001               	movlw	1
  4195  17CE                     u1175:	
  4196  17CE  1003               	clrc
  4197  17CF  0CF1               	rrf	___wmul@multiplier+1,f
  4198  17D0  0CF0               	rrf	___wmul@multiplier,f
  4199  17D1  3EFF               	addlw	-1
  4200  17D2  1D03               	skipz
  4201  17D3  2FCE               	goto	u1175
  4202  17D4  0870               	movf	___wmul@multiplier,w
  4203  17D5  0471               	iorwf	___wmul@multiplier+1,w
  4204  17D6  1D03               	btfss	3,2
  4205  17D7  2FBE               	goto	l1777
  4206  17D8  0875               	movf	___wmul@product+1,w
  4207  17D9  00F1               	movwf	?___wmul+1
  4208  17DA  0874               	movf	___wmul@product,w
  4209  17DB  00F0               	movwf	?___wmul
  4210  17DC  0008               	return
  4211  17DD                     __end_of___wmul:	
  4212                           
  4213                           	psect	text12
  4214  0C85                     __ptext12:	
  4215 ;; *************** function _Encoded_To_Actual_Analog_Val_Calc *****************
  4216 ;; Defined at:
  4217 ;;		line 714 in file "adc7.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  adc_value       4    0[BANK0 ] const unsigned long 
  4220 ;;  full_scale_i    4    4[BANK0 ] const unsigned long 
  4221 ;;  min_input_an    2    8[BANK0 ] const unsigned int 
  4222 ;;  analog_val_i    1   10[BANK0 ] const PTR unsigned long 
  4223 ;;		 -> Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch(4), Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch(4), Mix
      +_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch(4), 
  4224 ;;  analog_val_i    1   11[BANK0 ] const PTR unsigned long 
  4225 ;;		 -> Mix_Fsm_Proc@analog_val_in_digital_frac_vslwater_ch(4), Mix_Fsm_Proc@analog_val_in_digital_frac_vslsand_ch(4), M
      +ix_Fsm_Proc@analog_val_in_digital_frac_vslcmt_ch(4), 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  remainder_va    4   20[BANK0 ] unsigned long 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4237 ;;      Params:         0      12       0       0       0
  4238 ;;      Locals:         0       4       0       0       0
  4239 ;;      Temps:          0       8       0       0       0
  4240 ;;      Totals:         0      24       0       0       0
  4241 ;;Total ram usage:       24 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    1
  4244 ;; This function calls:
  4245 ;;		___lmul
  4246 ;; This function is called by:
  4247 ;;		_Mix_Fsm_Proc
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           
  4252                           ;psect for function _Encoded_To_Actual_Analog_Val_Calc
  4253  0C85                     _Encoded_To_Actual_Analog_Val_Calc:	
  4254                           
  4255                           ;adc7.c: 717: unsigned long remainder_val;
  4256                           ;adc7.c: 718: *analog_val_in_digital_int = (( full_scale_input_analog * adc_value) / (10
      +                          24ul)) + min_input_analog;
  4257                           
  4258                           ;incstack = 0
  4259                           ; Regs used in _Encoded_To_Actual_Analog_Val_Calc: [wreg-fsr0h+status,2+status,0+pclath+
      +                          cstack]
  4260  0C85  1283               	bcf	3,5	;RP0=0, select bank0
  4261  0C86  1303               	bcf	3,6	;RP1=0, select bank0
  4262  0C87  0828               	movf	Encoded_To_Actual_Analog_Val_Calc@min_input_analog,w
  4263  0C88  00AC               	movwf	??_Encoded_To_Actual_Analog_Val_Calc
  4264  0C89  0829               	movf	Encoded_To_Actual_Analog_Val_Calc@min_input_analog+1,w
  4265  0C8A  00AD               	movwf	??_Encoded_To_Actual_Analog_Val_Calc+1
  4266  0C8B  01AE               	clrf	??_Encoded_To_Actual_Analog_Val_Calc+2
  4267  0C8C  01AF               	clrf	??_Encoded_To_Actual_Analog_Val_Calc+3
  4268  0C8D  0827               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+3,w
  4269  0C8E  00F3               	movwf	___lmul@multiplier+3
  4270  0C8F  0826               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+2,w
  4271  0C90  00F2               	movwf	___lmul@multiplier+2
  4272  0C91  0825               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+1,w
  4273  0C92  00F1               	movwf	___lmul@multiplier+1
  4274  0C93  0824               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog,w
  4275  0C94  00F0               	movwf	___lmul@multiplier
  4276  0C95  0823               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value+3,w
  4277  0C96  00F7               	movwf	___lmul@multiplicand+3
  4278  0C97  0822               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value+2,w
  4279  0C98  00F6               	movwf	___lmul@multiplicand+2
  4280  0C99  0821               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value+1,w
  4281  0C9A  00F5               	movwf	___lmul@multiplicand+1
  4282  0C9B  0820               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value,w
  4283  0C9C  00F4               	movwf	___lmul@multiplicand
  4284  0C9D  120A  158A  20E1  120A  158A  	fcall	___lmul
  4285  0CA2  0870               	movf	?___lmul,w
  4286  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  4287  0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  4288  0CA5  00B0               	movwf	??_Encoded_To_Actual_Analog_Val_Calc+4
  4289  0CA6  0871               	movf	?___lmul+1,w
  4290  0CA7  00B1               	movwf	??_Encoded_To_Actual_Analog_Val_Calc+5
  4291  0CA8  0872               	movf	?___lmul+2,w
  4292  0CA9  00B2               	movwf	??_Encoded_To_Actual_Analog_Val_Calc+6
  4293  0CAA  0873               	movf	?___lmul+3,w
  4294  0CAB  00B3               	movwf	??_Encoded_To_Actual_Analog_Val_Calc+7
  4295  0CAC  300A               	movlw	10
  4296  0CAD                     u1275:	
  4297  0CAD  1003               	clrc
  4298  0CAE  0CB3               	rrf	??_Encoded_To_Actual_Analog_Val_Calc+7,f
  4299  0CAF  0CB2               	rrf	??_Encoded_To_Actual_Analog_Val_Calc+6,f
  4300  0CB0  0CB1               	rrf	??_Encoded_To_Actual_Analog_Val_Calc+5,f
  4301  0CB1  0CB0               	rrf	??_Encoded_To_Actual_Analog_Val_Calc+4,f
  4302  0CB2  3EFF               	addlw	-1
  4303  0CB3  1D03               	skipz
  4304  0CB4  2CAD               	goto	u1275
  4305  0CB5  0830               	movf	??_Encoded_To_Actual_Analog_Val_Calc+4,w
  4306  0CB6  07AC               	addwf	??_Encoded_To_Actual_Analog_Val_Calc,f
  4307  0CB7  0831               	movf	??_Encoded_To_Actual_Analog_Val_Calc+5,w
  4308  0CB8  1803               	skipnc
  4309  0CB9  0F31               	incfsz	??_Encoded_To_Actual_Analog_Val_Calc+5,w
  4310  0CBA  2CBC               	goto	u1280
  4311  0CBB  2CBD               	goto	u1281
  4312  0CBC                     u1280:	
  4313  0CBC  07AD               	addwf	??_Encoded_To_Actual_Analog_Val_Calc+1,f
  4314  0CBD                     u1281:	
  4315  0CBD  0832               	movf	??_Encoded_To_Actual_Analog_Val_Calc+6,w
  4316  0CBE  1803               	skipnc
  4317  0CBF  0F32               	incfsz	??_Encoded_To_Actual_Analog_Val_Calc+6,w
  4318  0CC0  2CC2               	goto	u1282
  4319  0CC1  2CC3               	goto	u1283
  4320  0CC2                     u1282:	
  4321  0CC2  07AE               	addwf	??_Encoded_To_Actual_Analog_Val_Calc+2,f
  4322  0CC3                     u1283:	
  4323  0CC3  0833               	movf	??_Encoded_To_Actual_Analog_Val_Calc+7,w
  4324  0CC4  1803               	skipnc
  4325  0CC5  0A33               	incf	??_Encoded_To_Actual_Analog_Val_Calc+7,w
  4326  0CC6  07AF               	addwf	??_Encoded_To_Actual_Analog_Val_Calc+3,f
  4327  0CC7  082A               	movf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int,w
  4328  0CC8  0084               	movwf	4
  4329  0CC9  082C               	movf	??_Encoded_To_Actual_Analog_Val_Calc,w
  4330  0CCA  1383               	bcf	3,7	;select IRP bank0
  4331  0CCB  0080               	movwf	0
  4332  0CCC  0A84               	incf	4,f
  4333  0CCD  082D               	movf	??_Encoded_To_Actual_Analog_Val_Calc+1,w
  4334  0CCE  0080               	movwf	0
  4335  0CCF  0A84               	incf	4,f
  4336  0CD0  082E               	movf	??_Encoded_To_Actual_Analog_Val_Calc+2,w
  4337  0CD1  0080               	movwf	0
  4338  0CD2  0A84               	incf	4,f
  4339  0CD3  082F               	movf	??_Encoded_To_Actual_Analog_Val_Calc+3,w
  4340  0CD4  0080               	movwf	0
  4341                           
  4342                           ;adc7.c: 719: remainder_val = ( full_scale_input_analog * adc_value) %(1024ul);
  4343  0CD5  0827               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+3,w
  4344  0CD6  00F3               	movwf	___lmul@multiplier+3
  4345  0CD7  0826               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+2,w
  4346  0CD8  00F2               	movwf	___lmul@multiplier+2
  4347  0CD9  0825               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog+1,w
  4348  0CDA  00F1               	movwf	___lmul@multiplier+1
  4349  0CDB  0824               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog,w
  4350  0CDC  00F0               	movwf	___lmul@multiplier
  4351  0CDD  0823               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value+3,w
  4352  0CDE  00F7               	movwf	___lmul@multiplicand+3
  4353  0CDF  0822               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value+2,w
  4354  0CE0  00F6               	movwf	___lmul@multiplicand+2
  4355  0CE1  0821               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value+1,w
  4356  0CE2  00F5               	movwf	___lmul@multiplicand+1
  4357  0CE3  0820               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value,w
  4358  0CE4  00F4               	movwf	___lmul@multiplicand
  4359  0CE5  120A  158A  20E1  120A  158A  	fcall	___lmul
  4360  0CEA  30FF               	movlw	255
  4361  0CEB  0570               	andwf	?___lmul,w
  4362  0CEC  1283               	bcf	3,5	;RP0=0, select bank0
  4363  0CED  1303               	bcf	3,6	;RP1=0, select bank0
  4364  0CEE  00B4               	movwf	Encoded_To_Actual_Analog_Val_Calc@remainder_val
  4365  0CEF  3003               	movlw	3
  4366  0CF0  0571               	andwf	?___lmul+1,w
  4367  0CF1  00B5               	movwf	Encoded_To_Actual_Analog_Val_Calc@remainder_val+1
  4368  0CF2  3000               	movlw	0
  4369  0CF3  0572               	andwf	?___lmul+2,w
  4370  0CF4  00B6               	movwf	Encoded_To_Actual_Analog_Val_Calc@remainder_val+2
  4371  0CF5  3000               	movlw	0
  4372  0CF6  0573               	andwf	?___lmul+3,w
  4373  0CF7  00B7               	movwf	Encoded_To_Actual_Analog_Val_Calc@remainder_val+3
  4374                           
  4375                           ;adc7.c: 720: *analog_val_in_digital_frac = ((remainder_val * 10) /1024ul);
  4376  0CF8  0837               	movf	Encoded_To_Actual_Analog_Val_Calc@remainder_val+3,w
  4377  0CF9  00F3               	movwf	___lmul@multiplier+3
  4378  0CFA  0836               	movf	Encoded_To_Actual_Analog_Val_Calc@remainder_val+2,w
  4379  0CFB  00F2               	movwf	___lmul@multiplier+2
  4380  0CFC  0835               	movf	Encoded_To_Actual_Analog_Val_Calc@remainder_val+1,w
  4381  0CFD  00F1               	movwf	___lmul@multiplier+1
  4382  0CFE  0834               	movf	Encoded_To_Actual_Analog_Val_Calc@remainder_val,w
  4383  0CFF  00F0               	movwf	___lmul@multiplier
  4384  0D00  3000               	movlw	0
  4385  0D01  00F7               	movwf	___lmul@multiplicand+3
  4386  0D02  3000               	movlw	0
  4387  0D03  00F6               	movwf	___lmul@multiplicand+2
  4388  0D04  3000               	movlw	0
  4389  0D05  00F5               	movwf	___lmul@multiplicand+1
  4390  0D06  300A               	movlw	10
  4391  0D07  00F4               	movwf	___lmul@multiplicand
  4392  0D08  120A  158A  20E1  120A  158A  	fcall	___lmul
  4393  0D0D  0870               	movf	?___lmul,w
  4394  0D0E  1283               	bcf	3,5	;RP0=0, select bank0
  4395  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
  4396  0D10  00AC               	movwf	??_Encoded_To_Actual_Analog_Val_Calc
  4397  0D11  0871               	movf	?___lmul+1,w
  4398  0D12  00AD               	movwf	??_Encoded_To_Actual_Analog_Val_Calc+1
  4399  0D13  0872               	movf	?___lmul+2,w
  4400  0D14  00AE               	movwf	??_Encoded_To_Actual_Analog_Val_Calc+2
  4401  0D15  0873               	movf	?___lmul+3,w
  4402  0D16  00AF               	movwf	??_Encoded_To_Actual_Analog_Val_Calc+3
  4403  0D17  300A               	movlw	10
  4404  0D18                     u1295:	
  4405  0D18  1003               	clrc
  4406  0D19  0CAF               	rrf	??_Encoded_To_Actual_Analog_Val_Calc+3,f
  4407  0D1A  0CAE               	rrf	??_Encoded_To_Actual_Analog_Val_Calc+2,f
  4408  0D1B  0CAD               	rrf	??_Encoded_To_Actual_Analog_Val_Calc+1,f
  4409  0D1C  0CAC               	rrf	??_Encoded_To_Actual_Analog_Val_Calc,f
  4410  0D1D  3EFF               	addlw	-1
  4411  0D1E  1D03               	skipz
  4412  0D1F  2D18               	goto	u1295
  4413  0D20  082B               	movf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac,w
  4414  0D21  0084               	movwf	4
  4415  0D22  082C               	movf	??_Encoded_To_Actual_Analog_Val_Calc,w
  4416  0D23  1383               	bcf	3,7	;select IRP bank0
  4417  0D24  0080               	movwf	0
  4418  0D25  0A84               	incf	4,f
  4419  0D26  082D               	movf	??_Encoded_To_Actual_Analog_Val_Calc+1,w
  4420  0D27  0080               	movwf	0
  4421  0D28  0A84               	incf	4,f
  4422  0D29  082E               	movf	??_Encoded_To_Actual_Analog_Val_Calc+2,w
  4423  0D2A  0080               	movwf	0
  4424  0D2B  0A84               	incf	4,f
  4425  0D2C  082F               	movf	??_Encoded_To_Actual_Analog_Val_Calc+3,w
  4426  0D2D  0080               	movwf	0
  4427  0D2E  0008               	return
  4428  0D2F                     __end_of_Encoded_To_Actual_Analog_Val_Calc:	
  4429                           
  4430                           	psect	text13
  4431  08E1                     __ptext13:	
  4432 ;; *************** function ___lmul *****************
  4433 ;; Defined at:
  4434 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;  multiplier      4    0[COMMON] unsigned long 
  4437 ;;  multiplicand    4    4[COMMON] unsigned long 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  product         4    9[COMMON] unsigned long 
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  4    0[COMMON] unsigned long 
  4442 ;; Registers used:
  4443 ;;		wreg, status,2, status,0
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4449 ;;      Params:         8       0       0       0       0
  4450 ;;      Locals:         4       0       0       0       0
  4451 ;;      Temps:          1       0       0       0       0
  4452 ;;      Totals:        13       0       0       0       0
  4453 ;;Total ram usage:       13 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; This function calls:
  4456 ;;		Nothing
  4457 ;; This function is called by:
  4458 ;;		_Encoded_To_Actual_Analog_Val_Calc
  4459 ;;		_Encoded_To_Percent_Calc
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           
  4464                           ;psect for function ___lmul
  4465  08E1                     ___lmul:	
  4466                           
  4467                           ;incstack = 0
  4468                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4469  08E1  3000               	movlw	0
  4470  08E2  00FC               	movwf	___lmul@product+3
  4471  08E3  3000               	movlw	0
  4472  08E4  00FB               	movwf	___lmul@product+2
  4473  08E5  3000               	movlw	0
  4474  08E6  00FA               	movwf	___lmul@product+1
  4475  08E7  3000               	movlw	0
  4476  08E8  00F9               	movwf	___lmul@product
  4477  08E9                     l1791:	
  4478  08E9  1C70               	btfss	___lmul@multiplier,0
  4479  08EA  28FF               	goto	l1795
  4480  08EB  0874               	movf	___lmul@multiplicand,w
  4481  08EC  07F9               	addwf	___lmul@product,f
  4482  08ED  0875               	movf	___lmul@multiplicand+1,w
  4483  08EE  1103               	clrz
  4484  08EF  1803               	skipnc
  4485  08F0  3E01               	addlw	1
  4486  08F1  1D03               	btfss	3,2
  4487  08F2  07FA               	addwf	___lmul@product+1,f
  4488  08F3  0876               	movf	___lmul@multiplicand+2,w
  4489  08F4  1103               	clrz
  4490  08F5  1803               	skipnc
  4491  08F6  3E01               	addlw	1
  4492  08F7  1D03               	btfss	3,2
  4493  08F8  07FB               	addwf	___lmul@product+2,f
  4494  08F9  0877               	movf	___lmul@multiplicand+3,w
  4495  08FA  1103               	clrz
  4496  08FB  1803               	skipnc
  4497  08FC  3E01               	addlw	1
  4498  08FD  1D03               	btfss	3,2
  4499  08FE  07FC               	addwf	___lmul@product+3,f
  4500  08FF                     l1795:	
  4501  08FF  3001               	movlw	1
  4502  0900  00F8               	movwf	??___lmul
  4503  0901                     u1215:	
  4504  0901  1003               	clrc
  4505  0902  0DF4               	rlf	___lmul@multiplicand,f
  4506  0903  0DF5               	rlf	___lmul@multiplicand+1,f
  4507  0904  0DF6               	rlf	___lmul@multiplicand+2,f
  4508  0905  0DF7               	rlf	___lmul@multiplicand+3,f
  4509  0906  0BF8               	decfsz	??___lmul,f
  4510  0907  2901               	goto	u1215
  4511  0908  3001               	movlw	1
  4512  0909                     u1225:	
  4513  0909  1003               	clrc
  4514  090A  0CF3               	rrf	___lmul@multiplier+3,f
  4515  090B  0CF2               	rrf	___lmul@multiplier+2,f
  4516  090C  0CF1               	rrf	___lmul@multiplier+1,f
  4517  090D  0CF0               	rrf	___lmul@multiplier,f
  4518  090E  3EFF               	addlw	-1
  4519  090F  1D03               	skipz
  4520  0910  2909               	goto	u1225
  4521  0911  0873               	movf	___lmul@multiplier+3,w
  4522  0912  0472               	iorwf	___lmul@multiplier+2,w
  4523  0913  0471               	iorwf	___lmul@multiplier+1,w
  4524  0914  0470               	iorwf	___lmul@multiplier,w
  4525  0915  1D03               	skipz
  4526  0916  28E9               	goto	l1791
  4527  0917  087C               	movf	___lmul@product+3,w
  4528  0918  00F3               	movwf	?___lmul+3
  4529  0919  087B               	movf	___lmul@product+2,w
  4530  091A  00F2               	movwf	?___lmul+2
  4531  091B  087A               	movf	___lmul@product+1,w
  4532  091C  00F1               	movwf	?___lmul+1
  4533  091D  0879               	movf	___lmul@product,w
  4534  091E  00F0               	movwf	?___lmul
  4535  091F  0008               	return
  4536  0920                     __end_of___lmul:	
  4537                           
  4538                           	psect	text14
  4539  08A3                     __ptext14:	
  4540 ;; *************** function _LCD_Init *****************
  4541 ;; Defined at:
  4542 ;;		line 915 in file "adc7.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;		None
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;		None
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  1    wreg      void 
  4549 ;; Registers used:
  4550 ;;		wreg, status,2, status,0, pclath, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4556 ;;      Params:         0       0       0       0       0
  4557 ;;      Locals:         0       0       0       0       0
  4558 ;;      Temps:          0       0       0       0       0
  4559 ;;      Totals:         0       0       0       0       0
  4560 ;;Total ram usage:        0 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    1
  4563 ;; This function calls:
  4564 ;;		_Write_LCD_Command
  4565 ;; This function is called by:
  4566 ;;		_main
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           
  4571                           ;psect for function _LCD_Init
  4572  08A3                     _LCD_Init:	
  4573                           
  4574                           ;adc7.c: 917: Write_LCD_Command(0x30);
  4575                           
  4576                           ;incstack = 0
  4577                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  4578  08A3  3030               	movlw	48
  4579  08A4  00F0               	movwf	Write_LCD_Command@cmd
  4580  08A5  3000               	movlw	0
  4581  08A6  00F1               	movwf	Write_LCD_Command@cmd+1
  4582  08A7  120A  158A  2281  120A  158A  	fcall	_Write_LCD_Command
  4583                           
  4584                           ;adc7.c: 918: Write_LCD_Command(0x30);
  4585  08AC  3030               	movlw	48
  4586  08AD  00F0               	movwf	Write_LCD_Command@cmd
  4587  08AE  3000               	movlw	0
  4588  08AF  00F1               	movwf	Write_LCD_Command@cmd+1
  4589  08B0  120A  158A  2281  120A  158A  	fcall	_Write_LCD_Command
  4590                           
  4591                           ;adc7.c: 919: Write_LCD_Command(0x30);
  4592  08B5  3030               	movlw	48
  4593  08B6  00F0               	movwf	Write_LCD_Command@cmd
  4594  08B7  3000               	movlw	0
  4595  08B8  00F1               	movwf	Write_LCD_Command@cmd+1
  4596  08B9  120A  158A  2281  120A  158A  	fcall	_Write_LCD_Command
  4597                           
  4598                           ;adc7.c: 920: Write_LCD_Command(0x38);
  4599  08BE  3038               	movlw	56
  4600  08BF  00F0               	movwf	Write_LCD_Command@cmd
  4601  08C0  3000               	movlw	0
  4602  08C1  00F1               	movwf	Write_LCD_Command@cmd+1
  4603  08C2  120A  158A  2281  120A  158A  	fcall	_Write_LCD_Command
  4604                           
  4605                           ;adc7.c: 921: Write_LCD_Command(0x01);
  4606  08C7  3001               	movlw	1
  4607  08C8  00F0               	movwf	Write_LCD_Command@cmd
  4608  08C9  3000               	movlw	0
  4609  08CA  00F1               	movwf	Write_LCD_Command@cmd+1
  4610  08CB  120A  158A  2281  120A  158A  	fcall	_Write_LCD_Command
  4611                           
  4612                           ;adc7.c: 922: Write_LCD_Command(0x0E);
  4613  08D0  300E               	movlw	14
  4614  08D1  00F0               	movwf	Write_LCD_Command@cmd
  4615  08D2  3000               	movlw	0
  4616  08D3  00F1               	movwf	Write_LCD_Command@cmd+1
  4617  08D4  120A  158A  2281  120A  158A  	fcall	_Write_LCD_Command
  4618                           
  4619                           ;adc7.c: 924: Write_LCD_Command(0x06);
  4620  08D9  3006               	movlw	6
  4621  08DA  00F0               	movwf	Write_LCD_Command@cmd
  4622  08DB  3000               	movlw	0
  4623  08DC  00F1               	movwf	Write_LCD_Command@cmd+1
  4624  08DD  120A  158A  2281   	fcall	_Write_LCD_Command
  4625  08E0  0008               	return
  4626  08E1                     __end_of_LCD_Init:	
  4627                           
  4628                           	psect	text15
  4629  0D2F                     __ptext15:	
  4630 ;; *************** function _Cur_Stage_Time_Run_Proc *****************
  4631 ;; Defined at:
  4632 ;;		line 583 in file "adc7.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;		None
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;		None
  4637 ;; Return value:  Size  Location     Type
  4638 ;;                  1    wreg      void 
  4639 ;; Registers used:
  4640 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4646 ;;      Params:         0       0       0       0       0
  4647 ;;      Locals:         0       0       0       0       0
  4648 ;;      Temps:          0       8       0       0       0
  4649 ;;      Totals:         0       8       0       0       0
  4650 ;;Total ram usage:        8 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:    3
  4653 ;; This function calls:
  4654 ;;		_Cur_Stage_Time_Proc
  4655 ;;		___lldiv
  4656 ;; This function is called by:
  4657 ;;		_main
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           
  4662                           ;psect for function _Cur_Stage_Time_Run_Proc
  4663  0D2F                     _Cur_Stage_Time_Run_Proc:	
  4664  0D2F                     l203:	
  4665                           ;adc7.c: 585: while(TMR1IF == 0);
  4666                           
  4667                           ;incstack = 0
  4668                           ; Regs used in _Cur_Stage_Time_Run_Proc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4669                           
  4670  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  4671  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  4672  0D31  1C0C               	btfss	12,0	;volatile
  4673  0D32  2D2F               	goto	l203
  4674                           
  4675                           ;adc7.c: 587: TMR1IF = 0;
  4676  0D33  100C               	bcf	12,0	;volatile
  4677                           
  4678                           ;adc7.c: 588: timer1_init = (65536) - ((unsigned long)((unsigned long)((4000000UL) * (50
      +                          UL)) / (unsigned long)((4) * (1000UL)))/prescale_timer1);
  4679  0D34  3000               	movlw	0
  4680  0D35  00E0               	movwf	??_Cur_Stage_Time_Run_Proc
  4681  0D36  3000               	movlw	0
  4682  0D37  00E1               	movwf	??_Cur_Stage_Time_Run_Proc+1
  4683  0D38  3001               	movlw	1
  4684  0D39  00E2               	movwf	??_Cur_Stage_Time_Run_Proc+2
  4685  0D3A  3000               	movlw	0
  4686  0D3B  00E3               	movwf	??_Cur_Stage_Time_Run_Proc+3
  4687  0D3C  086B               	movf	_prescale_timer1,w
  4688  0D3D  00A0               	movwf	___lldiv@divisor
  4689  0D3E  086C               	movf	_prescale_timer1+1,w
  4690  0D3F  00A1               	movwf	___lldiv@divisor+1
  4691  0D40  01A2               	clrf	___lldiv@divisor+2
  4692  0D41  01A3               	clrf	___lldiv@divisor+3
  4693  0D42  3000               	movlw	0
  4694  0D43  00A7               	movwf	___lldiv@dividend+3
  4695  0D44  3000               	movlw	0
  4696  0D45  00A6               	movwf	___lldiv@dividend+2
  4697  0D46  30C3               	movlw	195
  4698  0D47  00A5               	movwf	___lldiv@dividend+1
  4699  0D48  3050               	movlw	80
  4700  0D49  00A4               	movwf	___lldiv@dividend
  4701  0D4A  120A  158A  21BB  120A  158A  	fcall	___lldiv
  4702  0D4F  1283               	bcf	3,5	;RP0=0, select bank0
  4703  0D50  1303               	bcf	3,6	;RP1=0, select bank0
  4704  0D51  0920               	comf	?___lldiv,w
  4705  0D52  00E4               	movwf	??_Cur_Stage_Time_Run_Proc+4
  4706  0D53  0921               	comf	?___lldiv+1,w
  4707  0D54  00E5               	movwf	??_Cur_Stage_Time_Run_Proc+5
  4708  0D55  0922               	comf	?___lldiv+2,w
  4709  0D56  00E6               	movwf	??_Cur_Stage_Time_Run_Proc+6
  4710  0D57  0923               	comf	?___lldiv+3,w
  4711  0D58  00E7               	movwf	??_Cur_Stage_Time_Run_Proc+7
  4712  0D59  0AE4               	incf	??_Cur_Stage_Time_Run_Proc+4,f
  4713  0D5A  1903               	skipnz
  4714  0D5B  0AE5               	incf	??_Cur_Stage_Time_Run_Proc+5,f
  4715  0D5C  1903               	skipnz
  4716  0D5D  0AE6               	incf	??_Cur_Stage_Time_Run_Proc+6,f
  4717  0D5E  1903               	skipnz
  4718  0D5F  0AE7               	incf	??_Cur_Stage_Time_Run_Proc+7,f
  4719  0D60  0864               	movf	??_Cur_Stage_Time_Run_Proc+4,w
  4720  0D61  07E0               	addwf	??_Cur_Stage_Time_Run_Proc,f
  4721  0D62  0865               	movf	??_Cur_Stage_Time_Run_Proc+5,w
  4722  0D63  1803               	skipnc
  4723  0D64  0F65               	incfsz	??_Cur_Stage_Time_Run_Proc+5,w
  4724  0D65  2D67               	goto	u1510
  4725  0D66  2D68               	goto	u1511
  4726  0D67                     u1510:	
  4727  0D67  07E1               	addwf	??_Cur_Stage_Time_Run_Proc+1,f
  4728  0D68                     u1511:	
  4729  0D68  0866               	movf	??_Cur_Stage_Time_Run_Proc+6,w
  4730  0D69  1803               	skipnc
  4731  0D6A  0F66               	incfsz	??_Cur_Stage_Time_Run_Proc+6,w
  4732  0D6B  2D6D               	goto	u1512
  4733  0D6C  2D6E               	goto	u1513
  4734  0D6D                     u1512:	
  4735  0D6D  07E2               	addwf	??_Cur_Stage_Time_Run_Proc+2,f
  4736  0D6E                     u1513:	
  4737  0D6E  0867               	movf	??_Cur_Stage_Time_Run_Proc+7,w
  4738  0D6F  1803               	skipnc
  4739  0D70  0A67               	incf	??_Cur_Stage_Time_Run_Proc+7,w
  4740  0D71  07E3               	addwf	??_Cur_Stage_Time_Run_Proc+3,f
  4741  0D72  0863               	movf	??_Cur_Stage_Time_Run_Proc+3,w
  4742  0D73  1683               	bsf	3,5	;RP0=1, select bank1
  4743  0D74  1303               	bcf	3,6	;RP1=0, select bank1
  4744  0D75  00E1               	movwf	(_timer1_init+3)^(0+128)
  4745  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  4746  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  4747  0D78  0862               	movf	??_Cur_Stage_Time_Run_Proc+2,w
  4748  0D79  1683               	bsf	3,5	;RP0=1, select bank1
  4749  0D7A  1303               	bcf	3,6	;RP1=0, select bank1
  4750  0D7B  00E0               	movwf	(_timer1_init+2)^(0+128)
  4751  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  4752  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  4753  0D7E  0861               	movf	??_Cur_Stage_Time_Run_Proc+1,w
  4754  0D7F  1683               	bsf	3,5	;RP0=1, select bank1
  4755  0D80  1303               	bcf	3,6	;RP1=0, select bank1
  4756  0D81  00DF               	movwf	(_timer1_init+1)^(0+128)
  4757  0D82  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0D83  1303               	bcf	3,6	;RP1=0, select bank0
  4759  0D84  0860               	movf	??_Cur_Stage_Time_Run_Proc,w
  4760  0D85  1683               	bsf	3,5	;RP0=1, select bank1
  4761  0D86  1303               	bcf	3,6	;RP1=0, select bank1
  4762  0D87  00DE               	movwf	_timer1_init^(0+128)
  4763                           
  4764                           ;adc7.c: 589: TMR1H = timer1_init / 256;
  4765  0D88  085E               	movf	_timer1_init^(0+128),w
  4766  0D89  1283               	bcf	3,5	;RP0=0, select bank0
  4767  0D8A  1303               	bcf	3,6	;RP1=0, select bank0
  4768  0D8B  00E0               	movwf	??_Cur_Stage_Time_Run_Proc
  4769  0D8C  1683               	bsf	3,5	;RP0=1, select bank1
  4770  0D8D  1303               	bcf	3,6	;RP1=0, select bank1
  4771  0D8E  085F               	movf	(_timer1_init+1)^(0+128),w
  4772  0D8F  1283               	bcf	3,5	;RP0=0, select bank0
  4773  0D90  1303               	bcf	3,6	;RP1=0, select bank0
  4774  0D91  00E1               	movwf	??_Cur_Stage_Time_Run_Proc+1
  4775  0D92  1683               	bsf	3,5	;RP0=1, select bank1
  4776  0D93  1303               	bcf	3,6	;RP1=0, select bank1
  4777  0D94  0860               	movf	(_timer1_init+2)^(0+128),w
  4778  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  4779  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  4780  0D97  00E2               	movwf	??_Cur_Stage_Time_Run_Proc+2
  4781  0D98  1683               	bsf	3,5	;RP0=1, select bank1
  4782  0D99  1303               	bcf	3,6	;RP1=0, select bank1
  4783  0D9A  0861               	movf	(_timer1_init+3)^(0+128),w
  4784  0D9B  1283               	bcf	3,5	;RP0=0, select bank0
  4785  0D9C  1303               	bcf	3,6	;RP1=0, select bank0
  4786  0D9D  00E3               	movwf	??_Cur_Stage_Time_Run_Proc+3
  4787  0D9E  3008               	movlw	8
  4788  0D9F                     u1525:	
  4789  0D9F  1003               	clrc
  4790  0DA0  0CE3               	rrf	??_Cur_Stage_Time_Run_Proc+3,f
  4791  0DA1  0CE2               	rrf	??_Cur_Stage_Time_Run_Proc+2,f
  4792  0DA2  0CE1               	rrf	??_Cur_Stage_Time_Run_Proc+1,f
  4793  0DA3  0CE0               	rrf	??_Cur_Stage_Time_Run_Proc,f
  4794  0DA4  3EFF               	addlw	-1
  4795  0DA5  1D03               	skipz
  4796  0DA6  2D9F               	goto	u1525
  4797  0DA7  0860               	movf	??_Cur_Stage_Time_Run_Proc,w
  4798  0DA8  008F               	movwf	15	;volatile
  4799                           
  4800                           ;adc7.c: 590: TMR1L = timer1_init % 256;
  4801  0DA9  1683               	bsf	3,5	;RP0=1, select bank1
  4802  0DAA  1303               	bcf	3,6	;RP1=0, select bank1
  4803  0DAB  085E               	movf	_timer1_init^(0+128),w
  4804  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  4805  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  4806  0DAE  008E               	movwf	14	;volatile
  4807                           
  4808                           ;adc7.c: 592: if(++num_calls_timer1 >= ((500UL)/(50UL)))
  4809  0DAF  3001               	movlw	1
  4810  0DB0  1683               	bsf	3,5	;RP0=1, select bank3
  4811  0DB1  1703               	bsf	3,6	;RP1=1, select bank3
  4812  0DB2  07BC               	addwf	_num_calls_timer1^(0+384),f
  4813  0DB3  3000               	movlw	0
  4814  0DB4  1803               	skipnc
  4815  0DB5  3001               	movlw	1
  4816  0DB6  07BD               	addwf	(_num_calls_timer1+1)^(0+384),f
  4817  0DB7  3000               	movlw	0
  4818  0DB8  1803               	skipnc
  4819  0DB9  3001               	movlw	1
  4820  0DBA  07BE               	addwf	(_num_calls_timer1+2)^(0+384),f
  4821  0DBB  3000               	movlw	0
  4822  0DBC  1803               	skipnc
  4823  0DBD  3001               	movlw	1
  4824  0DBE  07BF               	addwf	(_num_calls_timer1+3)^(0+384),f
  4825  0DBF  083F               	movf	(_num_calls_timer1+3)^(0+384),w
  4826  0DC0  1D03               	btfss	3,2
  4827  0DC1  2DCE               	goto	l2245
  4828  0DC2  083E               	movf	(_num_calls_timer1+2)^(0+384),w
  4829  0DC3  1D03               	btfss	3,2
  4830  0DC4  2DCE               	goto	l2245
  4831  0DC5  083D               	movf	(_num_calls_timer1+1)^(0+384),w
  4832  0DC6  1D03               	btfss	3,2
  4833  0DC7  2DCE               	goto	l2245
  4834  0DC8  300A               	movlw	10
  4835  0DC9  023C               	subwf	_num_calls_timer1^(0+384),w
  4836  0DCA  1D03               	skipz
  4837  0DCB  2DCC               	goto	u1533
  4838  0DCC                     u1533:	
  4839  0DCC  1C03               	btfss	3,0
  4840  0DCD  0008               	return
  4841  0DCE                     l2245:	
  4842                           
  4843                           ;adc7.c: 593: {
  4844                           ;adc7.c: 594: Cur_Stage_Time_Proc();
  4845  0DCE  120A  118A  2120   	fcall	_Cur_Stage_Time_Proc
  4846                           
  4847                           ;adc7.c: 595: num_calls_timer1 = 0;
  4848  0DD1  3000               	movlw	0
  4849  0DD2  1683               	bsf	3,5	;RP0=1, select bank3
  4850  0DD3  1703               	bsf	3,6	;RP1=1, select bank3
  4851  0DD4  00BF               	movwf	(_num_calls_timer1+3)^(0+384)
  4852  0DD5  3000               	movlw	0
  4853  0DD6  00BE               	movwf	(_num_calls_timer1+2)^(0+384)
  4854  0DD7  3000               	movlw	0
  4855  0DD8  00BD               	movwf	(_num_calls_timer1+1)^(0+384)
  4856  0DD9  3000               	movlw	0
  4857  0DDA  00BC               	movwf	_num_calls_timer1^(0+384)
  4858  0DDB  0008               	return
  4859  0DDC                     __end_of_Cur_Stage_Time_Run_Proc:	
  4860                           
  4861                           	psect	text16
  4862  0120                     __ptext16:	
  4863 ;; *************** function _Cur_Stage_Time_Proc *****************
  4864 ;; Defined at:
  4865 ;;		line 612 in file "adc7.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;		None
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;		None
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4879 ;;      Params:         0       0       0       0       0
  4880 ;;      Locals:         0       0       0       0       0
  4881 ;;      Temps:          0       1       0       0       0
  4882 ;;      Totals:         0       1       0       0       0
  4883 ;;Total ram usage:        1 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    2
  4886 ;; This function calls:
  4887 ;;		_Data_Num_Disp_LCD
  4888 ;;		_Data_Str_Disp_LCD
  4889 ;;		_Goto_XY_LCD_Disp
  4890 ;; This function is called by:
  4891 ;;		_Cur_Stage_Time_Run_Proc
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function _Cur_Stage_Time_Proc
  4897  0120                     _Cur_Stage_Time_Proc:	
  4898                           
  4899                           ;adc7.c: 615: const char time_msg_disp[] = "T:", count_msg_disp[] = " C:", motor_msg_dis
      +                          p[] = " M: ";
  4900                           ;adc7.c: 618: if(++count_update_cur_stage_per_sec % (1000UL/(500UL)) == 0 )
  4901                           
  4902                           ;incstack = 0
  4903                           ; Regs used in _Cur_Stage_Time_Proc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4904  0120  3001               	movlw	1
  4905  0121  1683               	bsf	3,5	;RP0=1, select bank3
  4906  0122  1703               	bsf	3,6	;RP1=1, select bank3
  4907  0123  07C2               	addwf	_count_update_cur_stage_per_sec^(0+384),f
  4908  0124  1803               	skipnc
  4909  0125  0AC3               	incf	(_count_update_cur_stage_per_sec+1)^(0+384),f
  4910  0126  3000               	movlw	0
  4911  0127  07C3               	addwf	(_count_update_cur_stage_per_sec+1)^(0+384),f
  4912  0128  1842               	btfsc	_count_update_cur_stage_per_sec^(0+384),0
  4913  0129  0008               	return
  4914                           
  4915                           ;adc7.c: 619: {
  4916                           ;adc7.c: 620: count_update_cur_stage_per_sec = 0;
  4917  012A  01C2               	clrf	_count_update_cur_stage_per_sec^(0+384)
  4918  012B  01C3               	clrf	(_count_update_cur_stage_per_sec+1)^(0+384)
  4919                           
  4920                           ;adc7.c: 621: --cur_stage_time_left;
  4921  012C  3001               	movlw	1
  4922  012D  1683               	bsf	3,5	;RP0=1, select bank1
  4923  012E  1303               	bcf	3,6	;RP1=0, select bank1
  4924  012F  02E4               	subwf	_cur_stage_time_left^(0+128),f
  4925  0130  3000               	movlw	0
  4926  0131  1C03               	skipc
  4927  0132  03E5               	decf	(_cur_stage_time_left+1)^(0+128),f
  4928  0133  02E5               	subwf	(_cur_stage_time_left+1)^(0+128),f
  4929                           
  4930                           ;adc7.c: 624: if(disp_status_time_or_error[(1U)] == (1) && cur_line_disp_data[((3U))] ==
      +                           (2U))
  4931  0134  1683               	bsf	3,5	;RP0=1, select bank3
  4932  0135  1703               	bsf	3,6	;RP1=1, select bank3
  4933  0136  0336               	decf	(_disp_status_time_or_error^(0+384)+2),w
  4934  0137  0437               	iorwf	((_disp_status_time_or_error+1)^(0+384)+2),w
  4935  0138  1D03               	btfss	3,2
  4936  0139  2989               	goto	l1901
  4937  013A  3002               	movlw	2
  4938  013B  0630               	xorwf	(_cur_line_disp_data^(0+384)+6),w
  4939  013C  0431               	iorwf	((_cur_line_disp_data+1)^(0+384)+6),w
  4940  013D  1D03               	btfss	3,2
  4941  013E  2989               	goto	l1901
  4942                           
  4943                           ;adc7.c: 626: {
  4944                           ;adc7.c: 627: Goto_XY_LCD_Disp(((3U)), (1U));
  4945  013F  3003               	movlw	3
  4946  0140  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  4947  0141  3000               	movlw	0
  4948  0142  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  4949  0143  3001               	movlw	1
  4950  0144  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  4951  0145  3000               	movlw	0
  4952  0146  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  4953  0147  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  4954                           
  4955                           ;adc7.c: 628: Data_Str_Disp_LCD(time_msg_disp);
  4956  014C  3021               	movlw	(low ((Cur_Stage_Time_Proc@time_msg_disp-__stringbase)| (0+32768)))& (0+255)
  4957  014D  160A  118A  27A0  120A  118A  	fcall	_Data_Str_Disp_LCD
  4958                           
  4959                           ;adc7.c: 629: if( mix_fsm_state == (4U))
  4960  0152  3004               	movlw	4
  4961  0153  1683               	bsf	3,5	;RP0=1, select bank1
  4962  0154  1303               	bcf	3,6	;RP1=0, select bank1
  4963  0155  0666               	xorwf	_mix_fsm_state^(0+128),w
  4964  0156  0467               	iorwf	(_mix_fsm_state+1)^(0+128),w
  4965  0157  1D03               	btfss	3,2
  4966  0158  296C               	goto	l218
  4967                           
  4968                           ;adc7.c: 630: {
  4969                           ;adc7.c: 631: Goto_XY_LCD_Disp(((3U)), (((1U) + 2) + 3));
  4970  0159  3003               	movlw	3
  4971  015A  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  4972  015B  3000               	movlw	0
  4973  015C  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  4974  015D  3006               	movlw	6
  4975  015E  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  4976  015F  3000               	movlw	0
  4977  0160  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  4978  0161  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  4979                           
  4980                           ;adc7.c: 632: Data_Str_Disp_LCD(count_msg_disp);
  4981  0166  3017               	movlw	(low ((Cur_Stage_Time_Proc@count_msg_disp-__stringbase)| (0+32768)))& (0+255)
  4982  0167  160A  118A  27A0  120A  118A  	fcall	_Data_Str_Disp_LCD
  4983  016C                     l218:	
  4984                           
  4985                           ;adc7.c: 633: }
  4986                           ;adc7.c: 634: Goto_XY_LCD_Disp(((3U)), (((((1U) + 2) + 3) + 3) + 2));
  4987  016C  3003               	movlw	3
  4988  016D  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  4989  016E  3000               	movlw	0
  4990  016F  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  4991  0170  300B               	movlw	11
  4992  0171  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  4993  0172  3000               	movlw	0
  4994  0173  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  4995  0174  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  4996                           
  4997                           ;adc7.c: 635: Data_Str_Disp_LCD(motor_msg_disp);
  4998  0179  3012               	movlw	(low ((Cur_Stage_Time_Proc@motor_msg_disp-__stringbase)| (0+32768)))& (0+255)
  4999  017A  160A  118A  27A0  120A  118A  	fcall	_Data_Str_Disp_LCD
  5000                           
  5001                           ;adc7.c: 636: cur_line_disp_data[((3U))] = (4U);
  5002  017F  3004               	movlw	4
  5003  0180  1683               	bsf	3,5	;RP0=1, select bank3
  5004  0181  1703               	bsf	3,6	;RP1=1, select bank3
  5005  0182  00B0               	movwf	(_cur_line_disp_data^(0+384)+6)
  5006  0183  3000               	movlw	0
  5007  0184  00B1               	movwf	(_cur_line_disp_data^(0+384)+7)
  5008                           
  5009                           ;adc7.c: 637: cur_line_disp_data[((3U))] = (3U);
  5010  0185  3003               	movlw	3
  5011  0186  00B0               	movwf	(_cur_line_disp_data^(0+384)+6)
  5012  0187  3000               	movlw	0
  5013  0188  00B1               	movwf	(_cur_line_disp_data^(0+384)+7)
  5014  0189                     l1901:	
  5015                           
  5016                           ;adc7.c: 638: }
  5017                           ;adc7.c: 640: if( disp_status_time_or_error[(1U)] == (1) && cur_line_disp_data[((3U))] =
      +                          = (3U))
  5018  0189  0336               	decf	(_disp_status_time_or_error^(0+384)+2),w
  5019  018A  0437               	iorwf	((_disp_status_time_or_error+1)^(0+384)+2),w
  5020  018B  1D03               	btfss	3,2
  5021  018C  29E5               	goto	l1911
  5022  018D  3003               	movlw	3
  5023  018E  0630               	xorwf	(_cur_line_disp_data^(0+384)+6),w
  5024  018F  0431               	iorwf	((_cur_line_disp_data+1)^(0+384)+6),w
  5025  0190  1D03               	btfss	3,2
  5026  0191  29E5               	goto	l1911
  5027                           
  5028                           ;adc7.c: 642: {
  5029                           ;adc7.c: 643: Goto_XY_LCD_Disp(((3U)), ((1U) + 2) );
  5030  0192  3003               	movlw	3
  5031  0193  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  5032  0194  3000               	movlw	0
  5033  0195  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  5034  0196  3003               	movlw	3
  5035  0197  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  5036  0198  3000               	movlw	0
  5037  0199  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  5038  019A  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  5039                           
  5040                           ;adc7.c: 644: Data_Num_Disp_LCD((3), cur_stage_time_left);
  5041  019F  3003               	movlw	3
  5042  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  5043  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  5044  01A2  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  5045  01A3  3000               	movlw	0
  5046  01A4  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  5047  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  5048  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  5049  01A7  0864               	movf	_cur_stage_time_left^(0+128),w
  5050  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  5051  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  5052  01AA  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  5053  01AB  1683               	bsf	3,5	;RP0=1, select bank1
  5054  01AC  1303               	bcf	3,6	;RP1=0, select bank1
  5055  01AD  0865               	movf	(_cur_stage_time_left+1)^(0+128),w
  5056  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  5057  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  5058  01B0  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  5059  01B1  01B1               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  5060  01B2  01B2               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  5061  01B3  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  5062                           
  5063                           ;adc7.c: 645: if( mix_fsm_state == (4U))
  5064  01B8  3004               	movlw	4
  5065  01B9  1683               	bsf	3,5	;RP0=1, select bank1
  5066  01BA  1303               	bcf	3,6	;RP1=0, select bank1
  5067  01BB  0666               	xorwf	_mix_fsm_state^(0+128),w
  5068  01BC  0467               	iorwf	(_mix_fsm_state+1)^(0+128),w
  5069  01BD  1D03               	btfss	3,2
  5070  01BE  29E5               	goto	l1911
  5071                           
  5072                           ;adc7.c: 646: {
  5073                           ;adc7.c: 647: Goto_XY_LCD_Disp(((3U)), ((((1U) + 2) + 3) + 3) );
  5074  01BF  3003               	movlw	3
  5075  01C0  00FA               	movwf	Goto_XY_LCD_Disp@start_line_num
  5076  01C1  3000               	movlw	0
  5077  01C2  00FB               	movwf	Goto_XY_LCD_Disp@start_line_num+1
  5078  01C3  3009               	movlw	9
  5079  01C4  00FC               	movwf	Goto_XY_LCD_Disp@start_col_num
  5080  01C5  3000               	movlw	0
  5081  01C6  00FD               	movwf	Goto_XY_LCD_Disp@start_col_num+1
  5082  01C7  120A  158A  216C  120A  118A  	fcall	_Goto_XY_LCD_Disp
  5083                           
  5084                           ;adc7.c: 648: Data_Num_Disp_LCD((2), count_left_vsl_fwd_rev_process);
  5085  01CC  3002               	movlw	2
  5086  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  5087  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  5088  01CF  00AD               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format
  5089  01D0  3000               	movlw	0
  5090  01D1  00AE               	movwf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1
  5091  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  5092  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  5093  01D4  0862               	movf	_count_left_vsl_fwd_rev_process^(0+128),w
  5094  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  5095  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  5096  01D7  00AF               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int
  5097  01D8  1683               	bsf	3,5	;RP0=1, select bank1
  5098  01D9  1303               	bcf	3,6	;RP1=0, select bank1
  5099  01DA  0863               	movf	(_count_left_vsl_fwd_rev_process+1)^(0+128),w
  5100  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  5101  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  5102  01DD  00B0               	movwf	Data_Num_Disp_LCD@lcd_disp_data_int+1
  5103  01DE  01B1               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+2
  5104  01DF  01B2               	clrf	Data_Num_Disp_LCD@lcd_disp_data_int+3
  5105  01E0  120A  158A  25DC  120A  118A  	fcall	_Data_Num_Disp_LCD
  5106  01E5                     l1911:	
  5107                           
  5108                           ;adc7.c: 649: }
  5109                           ;adc7.c: 650: }
  5110                           ;adc7.c: 651: if(cur_stage_time_left == 0)
  5111  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  5112  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  5113  01E7  0864               	movf	_cur_stage_time_left^(0+128),w
  5114  01E8  0465               	iorwf	(_cur_stage_time_left+1)^(0+128),w
  5115  01E9  1D03               	btfss	3,2
  5116  01EA  0008               	return
  5117                           
  5118                           ;adc7.c: 652: {
  5119                           ;adc7.c: 653: cur_stage_time_expiry_flag = ('y');
  5120  01EB  3079               	movlw	121
  5121  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  5122  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  5123  01EE  00DF               	movwf	??_Cur_Stage_Time_Proc
  5124  01EF  085F               	movf	??_Cur_Stage_Time_Proc,w
  5125  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  5126  01F1  1303               	bcf	3,6	;RP1=0, select bank1
  5127  01F2  00EC               	movwf	_cur_stage_time_expiry_flag^(0+128)
  5128  01F3  0008               	return
  5129  01F4                     __end_of_Cur_Stage_Time_Proc:	
  5130                           
  5131                           	psect	text17
  5132  096C                     __ptext17:	
  5133 ;; *************** function _Goto_XY_LCD_Disp *****************
  5134 ;; Defined at:
  5135 ;;		line 843 in file "adc7.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  start_line_n    2   10[COMMON] const unsigned int 
  5138 ;;  start_col_nu    2   12[COMMON] const unsigned int 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  start_col_lc    2    2[BANK0 ] unsigned int 
  5141 ;;  start_line_l    2    0[BANK0 ] unsigned int 
  5142 ;;  error_disp_s    2    0        unsigned int 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  1    wreg      void 
  5145 ;; Registers used:
  5146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5152 ;;      Params:         4       0       0       0       0
  5153 ;;      Locals:         0       4       0       0       0
  5154 ;;      Temps:          0       0       0       0       0
  5155 ;;      Totals:         4       4       0       0       0
  5156 ;;Total ram usage:        8 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    1
  5159 ;; This function calls:
  5160 ;;		_Write_LCD_Command
  5161 ;; This function is called by:
  5162 ;;		_Mix_Fsm_Proc
  5163 ;;		_Cur_Stage_Time_Proc
  5164 ;;		_LCD_Const_Disp
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           
  5169                           ;psect for function _Goto_XY_LCD_Disp
  5170  096C                     _Goto_XY_LCD_Disp:	
  5171                           
  5172                           ;adc7.c: 848: unsigned int start_line_lcd = start_line_num - 1, start_col_lcd = start_co
      +                          l_num - 1, error_disp_start_loc;
  5173                           
  5174                           ;incstack = 0
  5175                           ; Regs used in _Goto_XY_LCD_Disp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5176  096C  087A               	movf	Goto_XY_LCD_Disp@start_line_num,w
  5177  096D  3EFF               	addlw	255
  5178  096E  1283               	bcf	3,5	;RP0=0, select bank0
  5179  096F  1303               	bcf	3,6	;RP1=0, select bank0
  5180  0970  00A0               	movwf	Goto_XY_LCD_Disp@start_line_lcd
  5181  0971  087B               	movf	Goto_XY_LCD_Disp@start_line_num+1,w
  5182  0972  1803               	skipnc
  5183  0973  3E01               	addlw	1
  5184  0974  3EFF               	addlw	255
  5185  0975  00A1               	movwf	Goto_XY_LCD_Disp@start_line_lcd+1
  5186  0976  087C               	movf	Goto_XY_LCD_Disp@start_col_num,w
  5187  0977  3EFF               	addlw	255
  5188  0978  00A2               	movwf	Goto_XY_LCD_Disp@start_col_lcd
  5189  0979  087D               	movf	Goto_XY_LCD_Disp@start_col_num+1,w
  5190  097A  1803               	skipnc
  5191  097B  3E01               	addlw	1
  5192  097C  3EFF               	addlw	255
  5193  097D  00A3               	movwf	Goto_XY_LCD_Disp@start_col_lcd+1
  5194                           
  5195                           ;adc7.c: 850: if(start_line_num <= (4U) && start_col_num <= ((20U)) )
  5196  097E  3000               	movlw	0
  5197  097F  027B               	subwf	Goto_XY_LCD_Disp@start_line_num+1,w
  5198  0980  3005               	movlw	5
  5199  0981  1903               	skipnz
  5200  0982  027A               	subwf	Goto_XY_LCD_Disp@start_line_num,w
  5201  0983  1803               	skipnc
  5202  0984  0008               	return
  5203  0985  3000               	movlw	0
  5204  0986  027D               	subwf	Goto_XY_LCD_Disp@start_col_num+1,w
  5205  0987  3015               	movlw	21
  5206  0988  1903               	skipnz
  5207  0989  027C               	subwf	Goto_XY_LCD_Disp@start_col_num,w
  5208  098A  1803               	skipnc
  5209  098B  0008               	return
  5210  098C  2998               	goto	l1689
  5211  098D                     l1679:	
  5212                           ;adc7.c: 853: {
  5213                           ;adc7.c: 854: case (1U):
  5214                           
  5215                           ;adc7.c: 851: {
  5216                           ;adc7.c: 852: switch(start_line_num)
  5217                           
  5218                           
  5219                           ;adc7.c: 855: cur_disp_lcd_loc = (0X80);
  5220  098D  3080               	movlw	128
  5221  098E  2994               	goto	L6
  5222  098F                     l1681:	
  5223                           ;adc7.c: 857: case (2U):
  5224                           
  5225                           ;adc7.c: 856: break;
  5226                           
  5227                           
  5228                           ;adc7.c: 858: cur_disp_lcd_loc = (0xC0);
  5229  098F  30C0               	movlw	192
  5230  0990  2994               	goto	L6
  5231  0991                     l1683:	
  5232                           ;adc7.c: 860: case (3U):
  5233                           
  5234                           ;adc7.c: 859: break;
  5235                           
  5236                           
  5237                           ;adc7.c: 861: cur_disp_lcd_loc = (0x94);
  5238  0991  3094               	movlw	148
  5239  0992  2994               	goto	L6
  5240  0993                     l1685:	
  5241                           ;adc7.c: 863: case (4U):
  5242                           
  5243                           ;adc7.c: 862: break;
  5244                           
  5245                           
  5246                           ;adc7.c: 864: cur_disp_lcd_loc = (0xD4);
  5247  0993  30D4               	movlw	212
  5248  0994                     L6:	
  5249  0994  00E9               	movwf	_cur_disp_lcd_loc
  5250  0995  3000               	movlw	0
  5251  0996  00EA               	movwf	_cur_disp_lcd_loc+1
  5252                           
  5253                           ;adc7.c: 866: }
  5254                           
  5255                           ;adc7.c: 865: break;
  5256  0997  29AB               	goto	l1691
  5257  0998                     l1689:	
  5258                           
  5259                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5260                           ; Switch size 1, requested type "space"
  5261                           ; Number of cases is 1, Range of values is 0 to 0
  5262                           ; switch strategies available:
  5263                           ; Name         Instructions Cycles
  5264                           ; simple_byte            4     3 (average)
  5265                           ; direct_byte           11     8 (fixed)
  5266                           ; jumptable            260     6 (fixed)
  5267                           ;	Chosen strategy is simple_byte
  5268  0998  087B               	movf	Goto_XY_LCD_Disp@start_line_num+1,w
  5269  0999  3A00               	xorlw	0	; case 0
  5270  099A  1903               	skipnz
  5271  099B  299D               	goto	l2405
  5272  099C  29AB               	goto	l1691
  5273  099D                     l2405:	
  5274                           
  5275                           ; Switch size 1, requested type "space"
  5276                           ; Number of cases is 4, Range of values is 1 to 4
  5277                           ; switch strategies available:
  5278                           ; Name         Instructions Cycles
  5279                           ; simple_byte           13     7 (average)
  5280                           ; direct_byte           23    11 (fixed)
  5281                           ; jumptable            263     9 (fixed)
  5282                           ;	Chosen strategy is simple_byte
  5283  099D  087A               	movf	Goto_XY_LCD_Disp@start_line_num,w
  5284  099E  3A01               	xorlw	1	; case 1
  5285  099F  1903               	skipnz
  5286  09A0  298D               	goto	l1679
  5287  09A1  3A03               	xorlw	3	; case 2
  5288  09A2  1903               	skipnz
  5289  09A3  298F               	goto	l1681
  5290  09A4  3A01               	xorlw	1	; case 3
  5291  09A5  1903               	skipnz
  5292  09A6  2991               	goto	l1683
  5293  09A7  3A07               	xorlw	7	; case 4
  5294  09A8  1903               	skipnz
  5295  09A9  2993               	goto	l1685
  5296  09AA  29AB               	goto	l1691
  5297  09AB                     l1691:	
  5298                           
  5299                           ;adc7.c: 867: cur_disp_lcd_loc = cur_disp_lcd_loc + start_col_lcd;
  5300  09AB  0822               	movf	Goto_XY_LCD_Disp@start_col_lcd,w
  5301  09AC  0769               	addwf	_cur_disp_lcd_loc,w
  5302  09AD  00E9               	movwf	_cur_disp_lcd_loc
  5303  09AE  0823               	movf	Goto_XY_LCD_Disp@start_col_lcd+1,w
  5304  09AF  1803               	skipnc
  5305  09B0  0A23               	incf	Goto_XY_LCD_Disp@start_col_lcd+1,w
  5306  09B1  076A               	addwf	_cur_disp_lcd_loc+1,w
  5307  09B2  00EA               	movwf	_cur_disp_lcd_loc+1
  5308                           
  5309                           ;adc7.c: 868: Write_LCD_Command(cur_disp_lcd_loc);
  5310  09B3  086A               	movf	_cur_disp_lcd_loc+1,w
  5311  09B4  00F1               	movwf	Write_LCD_Command@cmd+1
  5312  09B5  0869               	movf	_cur_disp_lcd_loc,w
  5313  09B6  00F0               	movwf	Write_LCD_Command@cmd
  5314  09B7  120A  158A  2281   	fcall	_Write_LCD_Command
  5315                           
  5316                           ;adc7.c: 869: }
  5317  09BA  0008               	return
  5318  09BB                     __end_of_Goto_XY_LCD_Disp:	
  5319                           ;adc7.c: 870: else
  5320                           ;adc7.c: 871: {
  5321                           
  5322                           
  5323                           	psect	text18
  5324  0A81                     __ptext18:	
  5325 ;; *************** function _Write_LCD_Command *****************
  5326 ;; Defined at:
  5327 ;;		line 940 in file "adc7.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  cmd             2    0[COMMON] unsigned int 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  time_delay      4    6[COMMON] unsigned long 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  1    wreg      void 
  5334 ;; Registers used:
  5335 ;;		wreg, status,2, status,0
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5341 ;;      Params:         2       0       0       0       0
  5342 ;;      Locals:         4       0       0       0       0
  5343 ;;      Temps:          4       0       0       0       0
  5344 ;;      Totals:        10       0       0       0       0
  5345 ;;Total ram usage:       10 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		_Reset_Process
  5351 ;;		_Goto_XY_LCD_Disp
  5352 ;;		_LCD_Init
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           
  5357                           ;psect for function _Write_LCD_Command
  5358  0A81                     _Write_LCD_Command:	
  5359                           
  5360                           ;adc7.c: 942: unsigned long int time_delay = (100UL);
  5361                           
  5362                           ;incstack = 0
  5363                           ; Regs used in _Write_LCD_Command: [wreg+status,2+status,0]
  5364  0A81  3000               	movlw	0
  5365  0A82  00F9               	movwf	Write_LCD_Command@time_delay+3
  5366  0A83  3000               	movlw	0
  5367  0A84  00F8               	movwf	Write_LCD_Command@time_delay+2
  5368  0A85  3000               	movlw	0
  5369  0A86  00F7               	movwf	Write_LCD_Command@time_delay+1
  5370  0A87  3064               	movlw	100
  5371  0A88  00F6               	movwf	Write_LCD_Command@time_delay
  5372                           
  5373                           ;adc7.c: 944: RD1 = 0;
  5374  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  5375  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  5376  0A8B  1088               	bcf	8,1	;volatile
  5377                           
  5378                           ;adc7.c: 945: RD0 = 0;
  5379  0A8C  1008               	bcf	8,0	;volatile
  5380                           
  5381                           ;adc7.c: 946: PORTC = cmd;
  5382  0A8D  0870               	movf	Write_LCD_Command@cmd,w
  5383  0A8E  0087               	movwf	7	;volatile
  5384                           
  5385                           ;adc7.c: 948: RD2 = 1;
  5386  0A8F  1508               	bsf	8,2	;volatile
  5387  0A90                     l1601:	
  5388                           ;adc7.c: 949: while(time_delay--);
  5389                           
  5390  0A90  3001               	movlw	1
  5391  0A91  00F2               	movwf	??_Write_LCD_Command
  5392  0A92  3000               	movlw	0
  5393  0A93  00F3               	movwf	??_Write_LCD_Command+1
  5394  0A94  3000               	movlw	0
  5395  0A95  00F4               	movwf	??_Write_LCD_Command+2
  5396  0A96  3000               	movlw	0
  5397  0A97  00F5               	movwf	??_Write_LCD_Command+3
  5398  0A98  0872               	movf	??_Write_LCD_Command,w
  5399  0A99  02F6               	subwf	Write_LCD_Command@time_delay,f
  5400  0A9A  0873               	movf	??_Write_LCD_Command+1,w
  5401  0A9B  1C03               	skipc
  5402  0A9C  0F73               	incfsz	??_Write_LCD_Command+1,w
  5403  0A9D  2A9F               	goto	u815
  5404  0A9E  2AA0               	goto	u816
  5405  0A9F                     u815:	
  5406  0A9F  02F7               	subwf	Write_LCD_Command@time_delay+1,f
  5407  0AA0                     u816:	
  5408  0AA0  0874               	movf	??_Write_LCD_Command+2,w
  5409  0AA1  1C03               	skipc
  5410  0AA2  0F74               	incfsz	??_Write_LCD_Command+2,w
  5411  0AA3  2AA5               	goto	u817
  5412  0AA4  2AA6               	goto	u818
  5413  0AA5                     u817:	
  5414  0AA5  02F8               	subwf	Write_LCD_Command@time_delay+2,f
  5415  0AA6                     u818:	
  5416  0AA6  0875               	movf	??_Write_LCD_Command+3,w
  5417  0AA7  1C03               	skipc
  5418  0AA8  0F75               	incfsz	??_Write_LCD_Command+3,w
  5419  0AA9  2AAB               	goto	u819
  5420  0AAA  2AAC               	goto	u810
  5421  0AAB                     u819:	
  5422  0AAB  02F9               	subwf	Write_LCD_Command@time_delay+3,f
  5423  0AAC                     u810:	
  5424  0AAC  0A76               	incf	Write_LCD_Command@time_delay,w
  5425  0AAD  1D03               	skipz
  5426  0AAE  2A90               	goto	l1601
  5427  0AAF  0A77               	incf	Write_LCD_Command@time_delay+1,w
  5428  0AB0  1D03               	skipz
  5429  0AB1  2A90               	goto	l1601
  5430  0AB2  0A78               	incf	Write_LCD_Command@time_delay+2,w
  5431  0AB3  1D03               	skipz
  5432  0AB4  2A90               	goto	l1601
  5433  0AB5  0A79               	incf	Write_LCD_Command@time_delay+3,w
  5434  0AB6  1D03               	btfss	3,2
  5435  0AB7  2A90               	goto	l1601
  5436                           
  5437                           ;adc7.c: 951: RD2 = 0;
  5438  0AB8  1283               	bcf	3,5	;RP0=0, select bank0
  5439  0AB9  1303               	bcf	3,6	;RP1=0, select bank0
  5440  0ABA  1108               	bcf	8,2	;volatile
  5441                           
  5442                           ;adc7.c: 952: time_delay = (100UL);
  5443  0ABB  3000               	movlw	0
  5444  0ABC  00F9               	movwf	Write_LCD_Command@time_delay+3
  5445  0ABD  3000               	movlw	0
  5446  0ABE  00F8               	movwf	Write_LCD_Command@time_delay+2
  5447  0ABF  3000               	movlw	0
  5448  0AC0  00F7               	movwf	Write_LCD_Command@time_delay+1
  5449  0AC1  3064               	movlw	100
  5450  0AC2  00F6               	movwf	Write_LCD_Command@time_delay
  5451  0AC3                     l1605:	
  5452                           ;adc7.c: 953: while(time_delay--);
  5453                           
  5454  0AC3  3001               	movlw	1
  5455  0AC4  00F2               	movwf	??_Write_LCD_Command
  5456  0AC5  3000               	movlw	0
  5457  0AC6  00F3               	movwf	??_Write_LCD_Command+1
  5458  0AC7  3000               	movlw	0
  5459  0AC8  00F4               	movwf	??_Write_LCD_Command+2
  5460  0AC9  3000               	movlw	0
  5461  0ACA  00F5               	movwf	??_Write_LCD_Command+3
  5462  0ACB  0872               	movf	??_Write_LCD_Command,w
  5463  0ACC  02F6               	subwf	Write_LCD_Command@time_delay,f
  5464  0ACD  0873               	movf	??_Write_LCD_Command+1,w
  5465  0ACE  1C03               	skipc
  5466  0ACF  0F73               	incfsz	??_Write_LCD_Command+1,w
  5467  0AD0  2AD2               	goto	u835
  5468  0AD1  2AD3               	goto	u836
  5469  0AD2                     u835:	
  5470  0AD2  02F7               	subwf	Write_LCD_Command@time_delay+1,f
  5471  0AD3                     u836:	
  5472  0AD3  0874               	movf	??_Write_LCD_Command+2,w
  5473  0AD4  1C03               	skipc
  5474  0AD5  0F74               	incfsz	??_Write_LCD_Command+2,w
  5475  0AD6  2AD8               	goto	u837
  5476  0AD7  2AD9               	goto	u838
  5477  0AD8                     u837:	
  5478  0AD8  02F8               	subwf	Write_LCD_Command@time_delay+2,f
  5479  0AD9                     u838:	
  5480  0AD9  0875               	movf	??_Write_LCD_Command+3,w
  5481  0ADA  1C03               	skipc
  5482  0ADB  0F75               	incfsz	??_Write_LCD_Command+3,w
  5483  0ADC  2ADE               	goto	u839
  5484  0ADD  2ADF               	goto	u830
  5485  0ADE                     u839:	
  5486  0ADE  02F9               	subwf	Write_LCD_Command@time_delay+3,f
  5487  0ADF                     u830:	
  5488  0ADF  0A76               	incf	Write_LCD_Command@time_delay,w
  5489  0AE0  1D03               	skipz
  5490  0AE1  2AC3               	goto	l1605
  5491  0AE2  0A77               	incf	Write_LCD_Command@time_delay+1,w
  5492  0AE3  1D03               	skipz
  5493  0AE4  2AC3               	goto	l1605
  5494  0AE5  0A78               	incf	Write_LCD_Command@time_delay+2,w
  5495  0AE6  1D03               	skipz
  5496  0AE7  2AC3               	goto	l1605
  5497  0AE8  0A79               	incf	Write_LCD_Command@time_delay+3,w
  5498  0AE9  1903               	btfsc	3,2
  5499  0AEA  0008               	return
  5500  0AEB  2AC3               	goto	l1605
  5501  0AEC                     __end_of_Write_LCD_Command:	
  5502                           
  5503                           	psect	text19
  5504  17A0                     __ptext19:	
  5505 ;; *************** function _Data_Str_Disp_LCD *****************
  5506 ;; Defined at:
  5507 ;;		line 1002 in file "adc7.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;  char_ptr        1    wreg     PTR const unsigned char 
  5510 ;;		 -> LCD_Const_Disp@vol_signal_rep_disp(5), LCD_Const_Disp@vessel_msg_disp(3), STR_5(2), LCD_Const_Disp@reseveriour_m
      +sg_disp(3), 
  5511 ;;		 -> Cur_Stage_Time_Proc@motor_msg_disp(5), Cur_Stage_Time_Proc@count_msg_disp(4), Cur_Stage_Time_Proc@time_msg_disp(
      +3), STR_4(3), 
  5512 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  char_ptr        1   10[COMMON] PTR const unsigned char 
  5515 ;;		 -> LCD_Const_Disp@vol_signal_rep_disp(5), LCD_Const_Disp@vessel_msg_disp(3), STR_5(2), LCD_Const_Disp@reseveriour_m
      +sg_disp(3), 
  5516 ;;		 -> Cur_Stage_Time_Proc@motor_msg_disp(5), Cur_Stage_Time_Proc@count_msg_disp(4), Cur_Stage_Time_Proc@time_msg_disp(
      +3), STR_4(3), 
  5517 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5527 ;;      Params:         0       0       0       0       0
  5528 ;;      Locals:         1       0       0       0       0
  5529 ;;      Temps:          1       0       0       0       0
  5530 ;;      Totals:         2       0       0       0       0
  5531 ;;Total ram usage:        2 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    1
  5534 ;; This function calls:
  5535 ;;		_Write_LCD_Data
  5536 ;; This function is called by:
  5537 ;;		_Mix_Fsm_Proc
  5538 ;;		_Cur_Stage_Time_Proc
  5539 ;;		_LCD_Const_Disp
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _Data_Str_Disp_LCD
  5545  17A0                     _Data_Str_Disp_LCD:	
  5546                           
  5547                           ;incstack = 0
  5548                           ; Regs used in _Data_Str_Disp_LCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5549                           ;Data_Str_Disp_LCD@char_ptr stored from wreg
  5550  17A0  00FA               	movwf	Data_Str_Disp_LCD@char_ptr
  5551  17A1                     l1759:	
  5552                           ;adc7.c: 1004: while(*char_ptr)
  5553                           
  5554  17A1  087A               	movf	Data_Str_Disp_LCD@char_ptr,w
  5555  17A2  0084               	movwf	4
  5556  17A3  120A  158A  2000  160A  118A  	fcall	stringdir
  5557  17A8  3A00               	xorlw	0
  5558  17A9  1903               	btfsc	3,2
  5559  17AA  0008               	return
  5560                           
  5561                           ;adc7.c: 1005: {
  5562                           ;adc7.c: 1006: Write_LCD_Data(*(char_ptr++));
  5563  17AB  087A               	movf	Data_Str_Disp_LCD@char_ptr,w
  5564  17AC  0084               	movwf	4
  5565  17AD  120A  158A  2000  160A  118A  	fcall	stringdir
  5566  17B2  120A  118A  2005  160A  118A  	fcall	_Write_LCD_Data
  5567  17B7  3001               	movlw	1
  5568  17B8  00F9               	movwf	??_Data_Str_Disp_LCD
  5569  17B9  0879               	movf	??_Data_Str_Disp_LCD,w
  5570  17BA  07FA               	addwf	Data_Str_Disp_LCD@char_ptr,f
  5571  17BB  2FA1               	goto	l1759
  5572  17BC                     __end_of_Data_Str_Disp_LCD:	
  5573                           
  5574                           	psect	text20
  5575  0DDC                     __ptext20:	
  5576 ;; *************** function _Data_Num_Disp_LCD *****************
  5577 ;; Defined at:
  5578 ;;		line 1040 in file "adc7.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;  lcd_datanum_    2   13[BANK0 ] const unsigned int 
  5581 ;;  lcd_disp_dat    4   15[BANK0 ] const unsigned long 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;  hex_data       16   23[BANK0 ] unsigned char [16]
  5584 ;;  num_data       10   39[BANK0 ] unsigned char [10]
  5585 ;;  num             4   59[BANK0 ] unsigned long 
  5586 ;;  unit_digit      2   57[BANK0 ] unsigned int 
  5587 ;;  tens_digit      2   55[BANK0 ] unsigned int 
  5588 ;;  hundreds_dig    2   53[BANK0 ] unsigned int 
  5589 ;;  thousands_di    2   51[BANK0 ] unsigned int 
  5590 ;;  tens_thousan    2   49[BANK0 ] unsigned int 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5600 ;;      Params:         0       6       0       0       0
  5601 ;;      Locals:         0      40       0       0       0
  5602 ;;      Temps:          0       4       0       0       0
  5603 ;;      Totals:         0      50       0       0       0
  5604 ;;Total ram usage:       50 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    1
  5607 ;; This function calls:
  5608 ;;		_Write_LCD_Data
  5609 ;;		___lldiv
  5610 ;;		___llmod
  5611 ;; This function is called by:
  5612 ;;		_Mix_Fsm_Proc
  5613 ;;		_Cur_Stage_Time_Proc
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           
  5618                           ;psect for function _Data_Num_Disp_LCD
  5619  0DDC                     _Data_Num_Disp_LCD:	
  5620                           
  5621                           ;adc7.c: 1042: unsigned int tens_thousand_digit,thousands_digit, hundreds_digit,tens_dig
      +                          it, unit_digit;
  5622                           ;adc7.c: 1043: unsigned long num = lcd_disp_data_int;
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _Data_Num_Disp_LCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5626  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  5627  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  5628  0DDE  0832               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+3,w
  5629  0DDF  00DE               	movwf	Data_Num_Disp_LCD@num+3
  5630  0DE0  0831               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+2,w
  5631  0DE1  00DD               	movwf	Data_Num_Disp_LCD@num+2
  5632  0DE2  0830               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+1,w
  5633  0DE3  00DC               	movwf	Data_Num_Disp_LCD@num+1
  5634  0DE4  082F               	movf	Data_Num_Disp_LCD@lcd_disp_data_int,w
  5635  0DE5  00DB               	movwf	Data_Num_Disp_LCD@num
  5636                           
  5637                           ;adc7.c: 1044: char num_data[] ={'0','1','2','3','4','5','6','7','8','9'};
  5638  0DE6  3047               	movlw	Data_Num_Disp_LCD@num_data& (0+255)
  5639  0DE7  0084               	movwf	4
  5640  0DE8  30A0               	movlw	low Data_Num_Disp_LCD@F1790
  5641  0DE9  00B3               	movwf	??_Data_Num_Disp_LCD
  5642  0DEA  0804               	movf	4,w
  5643  0DEB  00B4               	movwf	??_Data_Num_Disp_LCD+1
  5644  0DEC  300A               	movlw	10
  5645  0DED  00B5               	movwf	??_Data_Num_Disp_LCD+2
  5646  0DEE                     u1050:	
  5647  0DEE  0833               	movf	??_Data_Num_Disp_LCD,w
  5648  0DEF  0084               	movwf	4
  5649  0DF0  1783               	bsf	3,7	;select IRP bank3
  5650  0DF1  0800               	movf	0,w
  5651  0DF2  00B6               	movwf	??_Data_Num_Disp_LCD+3
  5652  0DF3  0AB3               	incf	??_Data_Num_Disp_LCD,f
  5653  0DF4  0834               	movf	??_Data_Num_Disp_LCD+1,w
  5654  0DF5  0084               	movwf	4
  5655  0DF6  1383               	bcf	3,7	;select IRP bank0
  5656  0DF7  0836               	movf	??_Data_Num_Disp_LCD+3,w
  5657  0DF8  0080               	movwf	0
  5658  0DF9  0AB4               	incf	??_Data_Num_Disp_LCD+1,f
  5659  0DFA  0BB5               	decfsz	??_Data_Num_Disp_LCD+2,f
  5660  0DFB  2DEE               	goto	u1050
  5661                           
  5662                           ;adc7.c: 1045: char hex_data[] ={'0','1','2','3','4','5','6','7','8','9','A','B','C','D'
      +                          ,'E','F'};
  5663  0DFC  3037               	movlw	Data_Num_Disp_LCD@hex_data& (0+255)
  5664  0DFD  0084               	movwf	4
  5665  0DFE  3090               	movlw	low Data_Num_Disp_LCD@F1792
  5666  0DFF  00B3               	movwf	??_Data_Num_Disp_LCD
  5667  0E00  0804               	movf	4,w
  5668  0E01  00B4               	movwf	??_Data_Num_Disp_LCD+1
  5669  0E02  3010               	movlw	16
  5670  0E03  00B5               	movwf	??_Data_Num_Disp_LCD+2
  5671  0E04                     u1060:	
  5672  0E04  0833               	movf	??_Data_Num_Disp_LCD,w
  5673  0E05  0084               	movwf	4
  5674  0E06  1783               	bsf	3,7	;select IRP bank3
  5675  0E07  0800               	movf	0,w
  5676  0E08  00B6               	movwf	??_Data_Num_Disp_LCD+3
  5677  0E09  0AB3               	incf	??_Data_Num_Disp_LCD,f
  5678  0E0A  0834               	movf	??_Data_Num_Disp_LCD+1,w
  5679  0E0B  0084               	movwf	4
  5680  0E0C  1383               	bcf	3,7	;select IRP bank0
  5681  0E0D  0836               	movf	??_Data_Num_Disp_LCD+3,w
  5682  0E0E  0080               	movwf	0
  5683  0E0F  0AB4               	incf	??_Data_Num_Disp_LCD+1,f
  5684  0E10  0BB5               	decfsz	??_Data_Num_Disp_LCD+2,f
  5685  0E11  2E04               	goto	u1060
  5686                           
  5687                           ;adc7.c: 1046: switch(lcd_datanum_disp_format)
  5688  0E12  2FDB               	goto	l1743
  5689  0E13                     l1705:	
  5690                           ;adc7.c: 1047: {
  5691                           ;adc7.c: 1048: case (5):
  5692                           
  5693                           
  5694                           ;adc7.c: 1049: num = lcd_disp_data_int % 100000;
  5695  0E13  3000               	movlw	0
  5696  0E14  00F3               	movwf	___llmod@divisor+3
  5697  0E15  3001               	movlw	1
  5698  0E16  00F2               	movwf	___llmod@divisor+2
  5699  0E17  3086               	movlw	134
  5700  0E18  00F1               	movwf	___llmod@divisor+1
  5701  0E19  30A0               	movlw	160
  5702  0E1A  00F0               	movwf	___llmod@divisor
  5703  0E1B  0832               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+3,w
  5704  0E1C  00F7               	movwf	___llmod@dividend+3
  5705  0E1D  0831               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+2,w
  5706  0E1E  00F6               	movwf	___llmod@dividend+2
  5707  0E1F  0830               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+1,w
  5708  0E20  00F5               	movwf	___llmod@dividend+1
  5709  0E21  082F               	movf	Data_Num_Disp_LCD@lcd_disp_data_int,w
  5710  0E22  00F4               	movwf	___llmod@dividend
  5711  0E23  120A  158A  2120  120A  158A  	fcall	___llmod
  5712  0E28  0873               	movf	?___llmod+3,w
  5713  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5714  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5715  0E2B  00DE               	movwf	Data_Num_Disp_LCD@num+3
  5716  0E2C  0872               	movf	?___llmod+2,w
  5717  0E2D  00DD               	movwf	Data_Num_Disp_LCD@num+2
  5718  0E2E  0871               	movf	?___llmod+1,w
  5719  0E2F  00DC               	movwf	Data_Num_Disp_LCD@num+1
  5720  0E30  0870               	movf	?___llmod,w
  5721  0E31  00DB               	movwf	Data_Num_Disp_LCD@num
  5722                           
  5723                           ;adc7.c: 1050: tens_thousand_digit = (unsigned int)(num / (unsigned long)(10000));
  5724  0E32  3000               	movlw	0
  5725  0E33  00A3               	movwf	___lldiv@divisor+3
  5726  0E34  3000               	movlw	0
  5727  0E35  00A2               	movwf	___lldiv@divisor+2
  5728  0E36  3027               	movlw	39
  5729  0E37  00A1               	movwf	___lldiv@divisor+1
  5730  0E38  3010               	movlw	16
  5731  0E39  00A0               	movwf	___lldiv@divisor
  5732  0E3A  085E               	movf	Data_Num_Disp_LCD@num+3,w
  5733  0E3B  00A7               	movwf	___lldiv@dividend+3
  5734  0E3C  085D               	movf	Data_Num_Disp_LCD@num+2,w
  5735  0E3D  00A6               	movwf	___lldiv@dividend+2
  5736  0E3E  085C               	movf	Data_Num_Disp_LCD@num+1,w
  5737  0E3F  00A5               	movwf	___lldiv@dividend+1
  5738  0E40  085B               	movf	Data_Num_Disp_LCD@num,w
  5739  0E41  00A4               	movwf	___lldiv@dividend
  5740  0E42  120A  158A  21BB  120A  158A  	fcall	___lldiv
  5741  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  5742  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  5743  0E49  0821               	movf	?___lldiv+1,w
  5744  0E4A  00D2               	movwf	Data_Num_Disp_LCD@tens_thousand_digit+1
  5745  0E4B  0820               	movf	?___lldiv,w
  5746  0E4C  00D1               	movwf	Data_Num_Disp_LCD@tens_thousand_digit
  5747                           
  5748                           ;adc7.c: 1051: Write_LCD_Data(num_data[tens_thousand_digit]);
  5749  0E4D  0851               	movf	Data_Num_Disp_LCD@tens_thousand_digit,w
  5750  0E4E  3E47               	addlw	(low (Data_Num_Disp_LCD@num_data| 0))& (0+255)
  5751  0E4F  0084               	movwf	4
  5752  0E50  1383               	bcf	3,7	;select IRP bank0
  5753  0E51  0800               	movf	0,w
  5754  0E52  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  5755  0E57                     l1709:	
  5756                           ;adc7.c: 1052: case (4):
  5757                           
  5758                           
  5759                           ;adc7.c: 1053: num = lcd_disp_data_int % 10000;
  5760  0E57  3000               	movlw	0
  5761  0E58  00F3               	movwf	___llmod@divisor+3
  5762  0E59  3000               	movlw	0
  5763  0E5A  00F2               	movwf	___llmod@divisor+2
  5764  0E5B  3027               	movlw	39
  5765  0E5C  00F1               	movwf	___llmod@divisor+1
  5766  0E5D  3010               	movlw	16
  5767  0E5E  00F0               	movwf	___llmod@divisor
  5768  0E5F  1283               	bcf	3,5	;RP0=0, select bank0
  5769  0E60  1303               	bcf	3,6	;RP1=0, select bank0
  5770  0E61  0832               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+3,w
  5771  0E62  00F7               	movwf	___llmod@dividend+3
  5772  0E63  0831               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+2,w
  5773  0E64  00F6               	movwf	___llmod@dividend+2
  5774  0E65  0830               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+1,w
  5775  0E66  00F5               	movwf	___llmod@dividend+1
  5776  0E67  082F               	movf	Data_Num_Disp_LCD@lcd_disp_data_int,w
  5777  0E68  00F4               	movwf	___llmod@dividend
  5778  0E69  120A  158A  2120  120A  158A  	fcall	___llmod
  5779  0E6E  0873               	movf	?___llmod+3,w
  5780  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  5781  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  5782  0E71  00DE               	movwf	Data_Num_Disp_LCD@num+3
  5783  0E72  0872               	movf	?___llmod+2,w
  5784  0E73  00DD               	movwf	Data_Num_Disp_LCD@num+2
  5785  0E74  0871               	movf	?___llmod+1,w
  5786  0E75  00DC               	movwf	Data_Num_Disp_LCD@num+1
  5787  0E76  0870               	movf	?___llmod,w
  5788  0E77  00DB               	movwf	Data_Num_Disp_LCD@num
  5789                           
  5790                           ;adc7.c: 1054: thousands_digit = (unsigned int)(num / (unsigned long)(1000));
  5791  0E78  3000               	movlw	0
  5792  0E79  00A3               	movwf	___lldiv@divisor+3
  5793  0E7A  3000               	movlw	0
  5794  0E7B  00A2               	movwf	___lldiv@divisor+2
  5795  0E7C  3003               	movlw	3
  5796  0E7D  00A1               	movwf	___lldiv@divisor+1
  5797  0E7E  30E8               	movlw	232
  5798  0E7F  00A0               	movwf	___lldiv@divisor
  5799  0E80  085E               	movf	Data_Num_Disp_LCD@num+3,w
  5800  0E81  00A7               	movwf	___lldiv@dividend+3
  5801  0E82  085D               	movf	Data_Num_Disp_LCD@num+2,w
  5802  0E83  00A6               	movwf	___lldiv@dividend+2
  5803  0E84  085C               	movf	Data_Num_Disp_LCD@num+1,w
  5804  0E85  00A5               	movwf	___lldiv@dividend+1
  5805  0E86  085B               	movf	Data_Num_Disp_LCD@num,w
  5806  0E87  00A4               	movwf	___lldiv@dividend
  5807  0E88  120A  158A  21BB  120A  158A  	fcall	___lldiv
  5808  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  5809  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  5810  0E8F  0821               	movf	?___lldiv+1,w
  5811  0E90  00D4               	movwf	Data_Num_Disp_LCD@thousands_digit+1
  5812  0E91  0820               	movf	?___lldiv,w
  5813  0E92  00D3               	movwf	Data_Num_Disp_LCD@thousands_digit
  5814                           
  5815                           ;adc7.c: 1055: Write_LCD_Data(num_data[thousands_digit]);
  5816  0E93  0853               	movf	Data_Num_Disp_LCD@thousands_digit,w
  5817  0E94  3E47               	addlw	(low (Data_Num_Disp_LCD@num_data| 0))& (0+255)
  5818  0E95  0084               	movwf	4
  5819  0E96  1383               	bcf	3,7	;select IRP bank0
  5820  0E97  0800               	movf	0,w
  5821  0E98  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  5822  0E9D                     l318:	
  5823                           ;adc7.c: 1056: case (3):
  5824                           
  5825                           
  5826                           ;adc7.c: 1057: num = lcd_disp_data_int % 1000;
  5827  0E9D  3000               	movlw	0
  5828  0E9E  00F3               	movwf	___llmod@divisor+3
  5829  0E9F  3000               	movlw	0
  5830  0EA0  00F2               	movwf	___llmod@divisor+2
  5831  0EA1  3003               	movlw	3
  5832  0EA2  00F1               	movwf	___llmod@divisor+1
  5833  0EA3  30E8               	movlw	232
  5834  0EA4  00F0               	movwf	___llmod@divisor
  5835  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  5836  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  5837  0EA7  0832               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+3,w
  5838  0EA8  00F7               	movwf	___llmod@dividend+3
  5839  0EA9  0831               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+2,w
  5840  0EAA  00F6               	movwf	___llmod@dividend+2
  5841  0EAB  0830               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+1,w
  5842  0EAC  00F5               	movwf	___llmod@dividend+1
  5843  0EAD  082F               	movf	Data_Num_Disp_LCD@lcd_disp_data_int,w
  5844  0EAE  00F4               	movwf	___llmod@dividend
  5845  0EAF  120A  158A  2120  120A  158A  	fcall	___llmod
  5846  0EB4  0873               	movf	?___llmod+3,w
  5847  0EB5  1283               	bcf	3,5	;RP0=0, select bank0
  5848  0EB6  1303               	bcf	3,6	;RP1=0, select bank0
  5849  0EB7  00DE               	movwf	Data_Num_Disp_LCD@num+3
  5850  0EB8  0872               	movf	?___llmod+2,w
  5851  0EB9  00DD               	movwf	Data_Num_Disp_LCD@num+2
  5852  0EBA  0871               	movf	?___llmod+1,w
  5853  0EBB  00DC               	movwf	Data_Num_Disp_LCD@num+1
  5854  0EBC  0870               	movf	?___llmod,w
  5855  0EBD  00DB               	movwf	Data_Num_Disp_LCD@num
  5856                           
  5857                           ;adc7.c: 1058: hundreds_digit = (unsigned int) (num / (unsigned long) (100));
  5858  0EBE  3000               	movlw	0
  5859  0EBF  00A3               	movwf	___lldiv@divisor+3
  5860  0EC0  3000               	movlw	0
  5861  0EC1  00A2               	movwf	___lldiv@divisor+2
  5862  0EC2  3000               	movlw	0
  5863  0EC3  00A1               	movwf	___lldiv@divisor+1
  5864  0EC4  3064               	movlw	100
  5865  0EC5  00A0               	movwf	___lldiv@divisor
  5866  0EC6  085E               	movf	Data_Num_Disp_LCD@num+3,w
  5867  0EC7  00A7               	movwf	___lldiv@dividend+3
  5868  0EC8  085D               	movf	Data_Num_Disp_LCD@num+2,w
  5869  0EC9  00A6               	movwf	___lldiv@dividend+2
  5870  0ECA  085C               	movf	Data_Num_Disp_LCD@num+1,w
  5871  0ECB  00A5               	movwf	___lldiv@dividend+1
  5872  0ECC  085B               	movf	Data_Num_Disp_LCD@num,w
  5873  0ECD  00A4               	movwf	___lldiv@dividend
  5874  0ECE  120A  158A  21BB  120A  158A  	fcall	___lldiv
  5875  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  5876  0ED4  1303               	bcf	3,6	;RP1=0, select bank0
  5877  0ED5  0821               	movf	?___lldiv+1,w
  5878  0ED6  00D6               	movwf	Data_Num_Disp_LCD@hundreds_digit+1
  5879  0ED7  0820               	movf	?___lldiv,w
  5880  0ED8  00D5               	movwf	Data_Num_Disp_LCD@hundreds_digit
  5881                           
  5882                           ;adc7.c: 1059: Write_LCD_Data(num_data[hundreds_digit]);
  5883  0ED9  0855               	movf	Data_Num_Disp_LCD@hundreds_digit,w
  5884  0EDA  3E47               	addlw	(low (Data_Num_Disp_LCD@num_data| 0))& (0+255)
  5885  0EDB  0084               	movwf	4
  5886  0EDC  1383               	bcf	3,7	;select IRP bank0
  5887  0EDD  0800               	movf	0,w
  5888  0EDE  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  5889  0EE3                     l1717:	
  5890                           ;adc7.c: 1060: case (2):
  5891                           
  5892                           
  5893                           ;adc7.c: 1061: num = lcd_disp_data_int % 100;
  5894  0EE3  3000               	movlw	0
  5895  0EE4  00F3               	movwf	___llmod@divisor+3
  5896  0EE5  3000               	movlw	0
  5897  0EE6  00F2               	movwf	___llmod@divisor+2
  5898  0EE7  3000               	movlw	0
  5899  0EE8  00F1               	movwf	___llmod@divisor+1
  5900  0EE9  3064               	movlw	100
  5901  0EEA  00F0               	movwf	___llmod@divisor
  5902  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  5903  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  5904  0EED  0832               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+3,w
  5905  0EEE  00F7               	movwf	___llmod@dividend+3
  5906  0EEF  0831               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+2,w
  5907  0EF0  00F6               	movwf	___llmod@dividend+2
  5908  0EF1  0830               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+1,w
  5909  0EF2  00F5               	movwf	___llmod@dividend+1
  5910  0EF3  082F               	movf	Data_Num_Disp_LCD@lcd_disp_data_int,w
  5911  0EF4  00F4               	movwf	___llmod@dividend
  5912  0EF5  120A  158A  2120  120A  158A  	fcall	___llmod
  5913  0EFA  0873               	movf	?___llmod+3,w
  5914  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  5915  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  5916  0EFD  00DE               	movwf	Data_Num_Disp_LCD@num+3
  5917  0EFE  0872               	movf	?___llmod+2,w
  5918  0EFF  00DD               	movwf	Data_Num_Disp_LCD@num+2
  5919  0F00  0871               	movf	?___llmod+1,w
  5920  0F01  00DC               	movwf	Data_Num_Disp_LCD@num+1
  5921  0F02  0870               	movf	?___llmod,w
  5922  0F03  00DB               	movwf	Data_Num_Disp_LCD@num
  5923                           
  5924                           ;adc7.c: 1062: tens_digit = (unsigned int) (num / 10);
  5925  0F04  3000               	movlw	0
  5926  0F05  00A3               	movwf	___lldiv@divisor+3
  5927  0F06  3000               	movlw	0
  5928  0F07  00A2               	movwf	___lldiv@divisor+2
  5929  0F08  3000               	movlw	0
  5930  0F09  00A1               	movwf	___lldiv@divisor+1
  5931  0F0A  300A               	movlw	10
  5932  0F0B  00A0               	movwf	___lldiv@divisor
  5933  0F0C  085E               	movf	Data_Num_Disp_LCD@num+3,w
  5934  0F0D  00A7               	movwf	___lldiv@dividend+3
  5935  0F0E  085D               	movf	Data_Num_Disp_LCD@num+2,w
  5936  0F0F  00A6               	movwf	___lldiv@dividend+2
  5937  0F10  085C               	movf	Data_Num_Disp_LCD@num+1,w
  5938  0F11  00A5               	movwf	___lldiv@dividend+1
  5939  0F12  085B               	movf	Data_Num_Disp_LCD@num,w
  5940  0F13  00A4               	movwf	___lldiv@dividend
  5941  0F14  120A  158A  21BB  120A  158A  	fcall	___lldiv
  5942  0F19  1283               	bcf	3,5	;RP0=0, select bank0
  5943  0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  5944  0F1B  0821               	movf	?___lldiv+1,w
  5945  0F1C  00D8               	movwf	Data_Num_Disp_LCD@tens_digit+1
  5946  0F1D  0820               	movf	?___lldiv,w
  5947  0F1E  00D7               	movwf	Data_Num_Disp_LCD@tens_digit
  5948                           
  5949                           ;adc7.c: 1063: Write_LCD_Data(num_data[tens_digit]);
  5950  0F1F  0857               	movf	Data_Num_Disp_LCD@tens_digit,w
  5951  0F20  3E47               	addlw	(low (Data_Num_Disp_LCD@num_data| 0))& (0+255)
  5952  0F21  0084               	movwf	4
  5953  0F22  1383               	bcf	3,7	;select IRP bank0
  5954  0F23  0800               	movf	0,w
  5955  0F24  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  5956  0F29                     l320:	
  5957                           ;adc7.c: 1064: case (1):
  5958                           
  5959                           
  5960                           ;adc7.c: 1065: unit_digit = (unsigned int) (lcd_disp_data_int % 10);
  5961  0F29  3000               	movlw	0
  5962  0F2A  00F3               	movwf	___llmod@divisor+3
  5963  0F2B  3000               	movlw	0
  5964  0F2C  00F2               	movwf	___llmod@divisor+2
  5965  0F2D  3000               	movlw	0
  5966  0F2E  00F1               	movwf	___llmod@divisor+1
  5967  0F2F  300A               	movlw	10
  5968  0F30  00F0               	movwf	___llmod@divisor
  5969  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  5970  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  5971  0F33  0832               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+3,w
  5972  0F34  00F7               	movwf	___llmod@dividend+3
  5973  0F35  0831               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+2,w
  5974  0F36  00F6               	movwf	___llmod@dividend+2
  5975  0F37  0830               	movf	Data_Num_Disp_LCD@lcd_disp_data_int+1,w
  5976  0F38  00F5               	movwf	___llmod@dividend+1
  5977  0F39  082F               	movf	Data_Num_Disp_LCD@lcd_disp_data_int,w
  5978  0F3A  00F4               	movwf	___llmod@dividend
  5979  0F3B  120A  158A  2120  120A  158A  	fcall	___llmod
  5980  0F40  0871               	movf	?___llmod+1,w
  5981  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  5982  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  5983  0F43  00DA               	movwf	Data_Num_Disp_LCD@unit_digit+1
  5984  0F44  0870               	movf	?___llmod,w
  5985  0F45  00D9               	movwf	Data_Num_Disp_LCD@unit_digit
  5986                           
  5987                           ;adc7.c: 1066: Write_LCD_Data(num_data[unit_digit]);
  5988  0F46  0859               	movf	Data_Num_Disp_LCD@unit_digit,w
  5989  0F47  3E47               	addlw	(low (Data_Num_Disp_LCD@num_data| 0))& (0+255)
  5990  0F48  0084               	movwf	4
  5991  0F49  1383               	bcf	3,7	;select IRP bank0
  5992  0F4A  0800               	movf	0,w
  5993  0F4B  120A  118A  2005   	fcall	_Write_LCD_Data
  5994                           
  5995                           ;adc7.c: 1067: break;
  5996  0F4E  0008               	return
  5997  0F4F                     l1725:	
  5998                           ;adc7.c: 1068: case (9):
  5999                           
  6000                           
  6001                           ;adc7.c: 1071: thousands_digit = (num / (16 * 16 * 16));
  6002  0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  6003  0F50  1303               	bcf	3,6	;RP1=0, select bank0
  6004  0F51  085B               	movf	Data_Num_Disp_LCD@num,w
  6005  0F52  00B3               	movwf	??_Data_Num_Disp_LCD
  6006  0F53  085C               	movf	Data_Num_Disp_LCD@num+1,w
  6007  0F54  00B4               	movwf	??_Data_Num_Disp_LCD+1
  6008  0F55  085D               	movf	Data_Num_Disp_LCD@num+2,w
  6009  0F56  00B5               	movwf	??_Data_Num_Disp_LCD+2
  6010  0F57  085E               	movf	Data_Num_Disp_LCD@num+3,w
  6011  0F58  00B6               	movwf	??_Data_Num_Disp_LCD+3
  6012  0F59  300C               	movlw	12
  6013  0F5A                     u1075:	
  6014  0F5A  1003               	clrc
  6015  0F5B  0CB6               	rrf	??_Data_Num_Disp_LCD+3,f
  6016  0F5C  0CB5               	rrf	??_Data_Num_Disp_LCD+2,f
  6017  0F5D  0CB4               	rrf	??_Data_Num_Disp_LCD+1,f
  6018  0F5E  0CB3               	rrf	??_Data_Num_Disp_LCD,f
  6019  0F5F  3EFF               	addlw	-1
  6020  0F60  1D03               	skipz
  6021  0F61  2F5A               	goto	u1075
  6022  0F62  0834               	movf	??_Data_Num_Disp_LCD+1,w
  6023  0F63  00D4               	movwf	Data_Num_Disp_LCD@thousands_digit+1
  6024  0F64  0833               	movf	??_Data_Num_Disp_LCD,w
  6025  0F65  00D3               	movwf	Data_Num_Disp_LCD@thousands_digit
  6026                           
  6027                           ;adc7.c: 1072: Write_LCD_Data(hex_data[thousands_digit]);
  6028  0F66  0853               	movf	Data_Num_Disp_LCD@thousands_digit,w
  6029  0F67  3E37               	addlw	(low (Data_Num_Disp_LCD@hex_data| 0))& (0+255)
  6030  0F68  0084               	movwf	4
  6031  0F69  1383               	bcf	3,7	;select IRP bank0
  6032  0F6A  0800               	movf	0,w
  6033  0F6B  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  6034  0F70                     l1729:	
  6035                           ;adc7.c: 1073: case (8):
  6036                           
  6037                           
  6038                           ;adc7.c: 1074: num = lcd_disp_data_int %(unsigned long)(16 * 16 * 16);
  6039  0F70  30FF               	movlw	255
  6040  0F71  1283               	bcf	3,5	;RP0=0, select bank0
  6041  0F72  1303               	bcf	3,6	;RP1=0, select bank0
  6042  0F73  052F               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int,w
  6043  0F74  00DB               	movwf	Data_Num_Disp_LCD@num
  6044  0F75  300F               	movlw	15
  6045  0F76  0530               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int+1,w
  6046  0F77  00DC               	movwf	Data_Num_Disp_LCD@num+1
  6047  0F78  3000               	movlw	0
  6048  0F79  0531               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int+2,w
  6049  0F7A  00DD               	movwf	Data_Num_Disp_LCD@num+2
  6050  0F7B  3000               	movlw	0
  6051  0F7C  0532               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int+3,w
  6052  0F7D  00DE               	movwf	Data_Num_Disp_LCD@num+3
  6053                           
  6054                           ;adc7.c: 1075: hundreds_digit = (unsigned int) (num / (unsigned long) (16 * 16));
  6055  0F7E  085B               	movf	Data_Num_Disp_LCD@num,w
  6056  0F7F  00B3               	movwf	??_Data_Num_Disp_LCD
  6057  0F80  085C               	movf	Data_Num_Disp_LCD@num+1,w
  6058  0F81  00B4               	movwf	??_Data_Num_Disp_LCD+1
  6059  0F82  085D               	movf	Data_Num_Disp_LCD@num+2,w
  6060  0F83  00B5               	movwf	??_Data_Num_Disp_LCD+2
  6061  0F84  085E               	movf	Data_Num_Disp_LCD@num+3,w
  6062  0F85  00B6               	movwf	??_Data_Num_Disp_LCD+3
  6063  0F86  3008               	movlw	8
  6064  0F87                     u1085:	
  6065  0F87  1003               	clrc
  6066  0F88  0CB6               	rrf	??_Data_Num_Disp_LCD+3,f
  6067  0F89  0CB5               	rrf	??_Data_Num_Disp_LCD+2,f
  6068  0F8A  0CB4               	rrf	??_Data_Num_Disp_LCD+1,f
  6069  0F8B  0CB3               	rrf	??_Data_Num_Disp_LCD,f
  6070  0F8C  3EFF               	addlw	-1
  6071  0F8D  1D03               	skipz
  6072  0F8E  2F87               	goto	u1085
  6073  0F8F  0834               	movf	??_Data_Num_Disp_LCD+1,w
  6074  0F90  00D6               	movwf	Data_Num_Disp_LCD@hundreds_digit+1
  6075  0F91  0833               	movf	??_Data_Num_Disp_LCD,w
  6076  0F92  00D5               	movwf	Data_Num_Disp_LCD@hundreds_digit
  6077                           
  6078                           ;adc7.c: 1076: Write_LCD_Data(hex_data[hundreds_digit]);
  6079  0F93  0855               	movf	Data_Num_Disp_LCD@hundreds_digit,w
  6080  0F94  3E37               	addlw	(low (Data_Num_Disp_LCD@hex_data| 0))& (0+255)
  6081  0F95  0084               	movwf	4
  6082  0F96  1383               	bcf	3,7	;select IRP bank0
  6083  0F97  0800               	movf	0,w
  6084  0F98  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  6085  0F9D                     l324:	
  6086                           ;adc7.c: 1077: case (7):
  6087                           
  6088                           
  6089                           ;adc7.c: 1078: num = lcd_disp_data_int %(unsigned long)(16 * 16);
  6090  0F9D  30FF               	movlw	255
  6091  0F9E  1283               	bcf	3,5	;RP0=0, select bank0
  6092  0F9F  1303               	bcf	3,6	;RP1=0, select bank0
  6093  0FA0  052F               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int,w
  6094  0FA1  00DB               	movwf	Data_Num_Disp_LCD@num
  6095  0FA2  3000               	movlw	0
  6096  0FA3  0530               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int+1,w
  6097  0FA4  00DC               	movwf	Data_Num_Disp_LCD@num+1
  6098  0FA5  3000               	movlw	0
  6099  0FA6  0531               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int+2,w
  6100  0FA7  00DD               	movwf	Data_Num_Disp_LCD@num+2
  6101  0FA8  3000               	movlw	0
  6102  0FA9  0532               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int+3,w
  6103  0FAA  00DE               	movwf	Data_Num_Disp_LCD@num+3
  6104                           
  6105                           ;adc7.c: 1079: tens_digit = (unsigned int) (num / 16);
  6106  0FAB  085B               	movf	Data_Num_Disp_LCD@num,w
  6107  0FAC  00B3               	movwf	??_Data_Num_Disp_LCD
  6108  0FAD  085C               	movf	Data_Num_Disp_LCD@num+1,w
  6109  0FAE  00B4               	movwf	??_Data_Num_Disp_LCD+1
  6110  0FAF  085D               	movf	Data_Num_Disp_LCD@num+2,w
  6111  0FB0  00B5               	movwf	??_Data_Num_Disp_LCD+2
  6112  0FB1  085E               	movf	Data_Num_Disp_LCD@num+3,w
  6113  0FB2  00B6               	movwf	??_Data_Num_Disp_LCD+3
  6114  0FB3  3004               	movlw	4
  6115  0FB4                     u1095:	
  6116  0FB4  1003               	clrc
  6117  0FB5  0CB6               	rrf	??_Data_Num_Disp_LCD+3,f
  6118  0FB6  0CB5               	rrf	??_Data_Num_Disp_LCD+2,f
  6119  0FB7  0CB4               	rrf	??_Data_Num_Disp_LCD+1,f
  6120  0FB8  0CB3               	rrf	??_Data_Num_Disp_LCD,f
  6121  0FB9  3EFF               	addlw	-1
  6122  0FBA  1D03               	skipz
  6123  0FBB  2FB4               	goto	u1095
  6124  0FBC  0834               	movf	??_Data_Num_Disp_LCD+1,w
  6125  0FBD  00D8               	movwf	Data_Num_Disp_LCD@tens_digit+1
  6126  0FBE  0833               	movf	??_Data_Num_Disp_LCD,w
  6127  0FBF  00D7               	movwf	Data_Num_Disp_LCD@tens_digit
  6128                           
  6129                           ;adc7.c: 1080: Write_LCD_Data(hex_data[tens_digit]);
  6130  0FC0  0857               	movf	Data_Num_Disp_LCD@tens_digit,w
  6131  0FC1  3E37               	addlw	(low (Data_Num_Disp_LCD@hex_data| 0))& (0+255)
  6132  0FC2  0084               	movwf	4
  6133  0FC3  1383               	bcf	3,7	;select IRP bank0
  6134  0FC4  0800               	movf	0,w
  6135  0FC5  120A  118A  2005  120A  158A  	fcall	_Write_LCD_Data
  6136  0FCA                     l1739:	
  6137                           ;adc7.c: 1081: case (6):
  6138                           
  6139                           
  6140                           ;adc7.c: 1082: unit_digit = (unsigned int) (lcd_disp_data_int % 16);
  6141  0FCA  300F               	movlw	15
  6142  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  6143  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  6144  0FCD  052F               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int,w
  6145  0FCE  00D9               	movwf	Data_Num_Disp_LCD@unit_digit
  6146  0FCF  3000               	movlw	0
  6147  0FD0  0530               	andwf	Data_Num_Disp_LCD@lcd_disp_data_int+1,w
  6148  0FD1  00DA               	movwf	Data_Num_Disp_LCD@unit_digit+1
  6149                           
  6150                           ;adc7.c: 1083: Write_LCD_Data(hex_data[unit_digit]);
  6151  0FD2  0859               	movf	Data_Num_Disp_LCD@unit_digit,w
  6152  0FD3  3E37               	addlw	(low (Data_Num_Disp_LCD@hex_data| 0))& (0+255)
  6153  0FD4  0084               	movwf	4
  6154  0FD5  1383               	bcf	3,7	;select IRP bank0
  6155  0FD6  0800               	movf	0,w
  6156  0FD7  120A  118A  2005   	fcall	_Write_LCD_Data
  6157                           
  6158                           ;adc7.c: 1087: ;
  6159                           ;adc7.c: 1088: }
  6160                           
  6161                           ;adc7.c: 1085: default:
  6162                           
  6163                           ;adc7.c: 1084: break;
  6164  0FDA  0008               	return
  6165  0FDB                     l1743:	
  6166                           
  6167                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6168                           ; Switch size 1, requested type "space"
  6169                           ; Number of cases is 1, Range of values is 0 to 0
  6170                           ; switch strategies available:
  6171                           ; Name         Instructions Cycles
  6172                           ; simple_byte            4     3 (average)
  6173                           ; direct_byte           11     8 (fixed)
  6174                           ; jumptable            260     6 (fixed)
  6175                           ;	Chosen strategy is simple_byte
  6176  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  6177  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  6178  0FDD  082E               	movf	Data_Num_Disp_LCD@lcd_datanum_disp_format+1,w
  6179  0FDE  3A00               	xorlw	0	; case 0
  6180  0FDF  1903               	skipnz
  6181  0FE0  2FE2               	goto	l2407
  6182  0FE1  2FFF               	goto	l327
  6183  0FE2                     l2407:	
  6184                           
  6185                           ; Switch size 1, requested type "space"
  6186                           ; Number of cases is 9, Range of values is 1 to 9
  6187                           ; switch strategies available:
  6188                           ; Name         Instructions Cycles
  6189                           ; simple_byte           28    15 (average)
  6190                           ; direct_byte           38    11 (fixed)
  6191                           ; jumptable            263     9 (fixed)
  6192                           ;	Chosen strategy is simple_byte
  6193  0FE2  082D               	movf	Data_Num_Disp_LCD@lcd_datanum_disp_format,w
  6194  0FE3  3A01               	xorlw	1	; case 1
  6195  0FE4  1903               	skipnz
  6196  0FE5  2F29               	goto	l320
  6197  0FE6  3A03               	xorlw	3	; case 2
  6198  0FE7  1903               	skipnz
  6199  0FE8  2EE3               	goto	l1717
  6200  0FE9  3A01               	xorlw	1	; case 3
  6201  0FEA  1903               	skipnz
  6202  0FEB  2E9D               	goto	l318
  6203  0FEC  3A07               	xorlw	7	; case 4
  6204  0FED  1903               	skipnz
  6205  0FEE  2E57               	goto	l1709
  6206  0FEF  3A01               	xorlw	1	; case 5
  6207  0FF0  1903               	skipnz
  6208  0FF1  2E13               	goto	l1705
  6209  0FF2  3A03               	xorlw	3	; case 6
  6210  0FF3  1903               	skipnz
  6211  0FF4  2FCA               	goto	l1739
  6212  0FF5  3A01               	xorlw	1	; case 7
  6213  0FF6  1903               	skipnz
  6214  0FF7  2F9D               	goto	l324
  6215  0FF8  3A0F               	xorlw	15	; case 8
  6216  0FF9  1903               	skipnz
  6217  0FFA  2F70               	goto	l1729
  6218  0FFB  3A01               	xorlw	1	; case 9
  6219  0FFC  1903               	skipnz
  6220  0FFD  2F4F               	goto	l1725
  6221  0FFE  2FFF               	goto	l327
  6222  0FFF                     l327:	
  6223  0FFF  0008               	return
  6224  1000                     __end_of_Data_Num_Disp_LCD:	
  6225                           
  6226                           	psect	text21
  6227  0920                     __ptext21:	
  6228 ;; *************** function ___llmod *****************
  6229 ;; Defined at:
  6230 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  divisor         4    0[COMMON] unsigned long 
  6233 ;;  dividend        4    4[COMMON] unsigned long 
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;  counter         1    9[COMMON] unsigned char 
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  4    0[COMMON] unsigned long 
  6238 ;; Registers used:
  6239 ;;		wreg, status,2, status,0
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6245 ;;      Params:         8       0       0       0       0
  6246 ;;      Locals:         1       0       0       0       0
  6247 ;;      Temps:          1       0       0       0       0
  6248 ;;      Totals:        10       0       0       0       0
  6249 ;;Total ram usage:       10 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_Encoded_To_Percent_Calc
  6255 ;;		_Data_Num_Disp_LCD
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           
  6260                           ;psect for function ___llmod
  6261  0920                     ___llmod:	
  6262                           
  6263                           ;incstack = 0
  6264                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6265  0920  0873               	movf	___llmod@divisor+3,w
  6266  0921  0472               	iorwf	___llmod@divisor+2,w
  6267  0922  0471               	iorwf	___llmod@divisor+1,w
  6268  0923  0470               	iorwf	___llmod@divisor,w
  6269  0924  1903               	skipnz
  6270  0925  2963               	goto	l1661
  6271  0926  01F9               	clrf	___llmod@counter
  6272  0927  0AF9               	incf	___llmod@counter,f
  6273  0928                     l1651:	
  6274  0928  1BF3               	btfsc	___llmod@divisor+3,7
  6275  0929  2938               	goto	l1653
  6276  092A  3001               	movlw	1
  6277  092B  00F8               	movwf	??___llmod
  6278  092C                     u975:	
  6279  092C  1003               	clrc
  6280  092D  0DF0               	rlf	___llmod@divisor,f
  6281  092E  0DF1               	rlf	___llmod@divisor+1,f
  6282  092F  0DF2               	rlf	___llmod@divisor+2,f
  6283  0930  0DF3               	rlf	___llmod@divisor+3,f
  6284  0931  0BF8               	decfsz	??___llmod,f
  6285  0932  292C               	goto	u975
  6286  0933  3001               	movlw	1
  6287  0934  00F8               	movwf	??___llmod
  6288  0935  0878               	movf	??___llmod,w
  6289  0936  07F9               	addwf	___llmod@counter,f
  6290  0937  2928               	goto	l1651
  6291  0938                     l1653:	
  6292  0938  0873               	movf	___llmod@divisor+3,w
  6293  0939  0277               	subwf	___llmod@dividend+3,w
  6294  093A  1D03               	skipz
  6295  093B  2946               	goto	u995
  6296  093C  0872               	movf	___llmod@divisor+2,w
  6297  093D  0276               	subwf	___llmod@dividend+2,w
  6298  093E  1D03               	skipz
  6299  093F  2946               	goto	u995
  6300  0940  0871               	movf	___llmod@divisor+1,w
  6301  0941  0275               	subwf	___llmod@dividend+1,w
  6302  0942  1D03               	skipz
  6303  0943  2946               	goto	u995
  6304  0944  0870               	movf	___llmod@divisor,w
  6305  0945  0274               	subwf	___llmod@dividend,w
  6306  0946                     u995:	
  6307  0946  1C03               	skipc
  6308  0947  2956               	goto	l1657
  6309  0948  0870               	movf	___llmod@divisor,w
  6310  0949  02F4               	subwf	___llmod@dividend,f
  6311  094A  0871               	movf	___llmod@divisor+1,w
  6312  094B  1C03               	skipc
  6313  094C  0F71               	incfsz	___llmod@divisor+1,w
  6314  094D  02F5               	subwf	___llmod@dividend+1,f
  6315  094E  0872               	movf	___llmod@divisor+2,w
  6316  094F  1C03               	skipc
  6317  0950  0F72               	incfsz	___llmod@divisor+2,w
  6318  0951  02F6               	subwf	___llmod@dividend+2,f
  6319  0952  0873               	movf	___llmod@divisor+3,w
  6320  0953  1C03               	skipc
  6321  0954  0F73               	incfsz	___llmod@divisor+3,w
  6322  0955  02F7               	subwf	___llmod@dividend+3,f
  6323  0956                     l1657:	
  6324  0956  3001               	movlw	1
  6325  0957                     u1005:	
  6326  0957  1003               	clrc
  6327  0958  0CF3               	rrf	___llmod@divisor+3,f
  6328  0959  0CF2               	rrf	___llmod@divisor+2,f
  6329  095A  0CF1               	rrf	___llmod@divisor+1,f
  6330  095B  0CF0               	rrf	___llmod@divisor,f
  6331  095C  3EFF               	addlw	-1
  6332  095D  1D03               	skipz
  6333  095E  2957               	goto	u1005
  6334  095F  3001               	movlw	1
  6335  0960  02F9               	subwf	___llmod@counter,f
  6336  0961  1D03               	btfss	3,2
  6337  0962  2938               	goto	l1653
  6338  0963                     l1661:	
  6339  0963  0877               	movf	___llmod@dividend+3,w
  6340  0964  00F3               	movwf	?___llmod+3
  6341  0965  0876               	movf	___llmod@dividend+2,w
  6342  0966  00F2               	movwf	?___llmod+2
  6343  0967  0875               	movf	___llmod@dividend+1,w
  6344  0968  00F1               	movwf	?___llmod+1
  6345  0969  0874               	movf	___llmod@dividend,w
  6346  096A  00F0               	movwf	?___llmod
  6347  096B  0008               	return
  6348  096C                     __end_of___llmod:	
  6349                           
  6350                           	psect	text22
  6351  09BB                     __ptext22:	
  6352 ;; *************** function ___lldiv *****************
  6353 ;; Defined at:
  6354 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  divisor         4    0[BANK0 ] unsigned long 
  6357 ;;  dividend        4    4[BANK0 ] unsigned long 
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;  quotient        4    8[BANK0 ] unsigned long 
  6360 ;;  counter         1   12[BANK0 ] unsigned char 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  4    0[BANK0 ] unsigned long 
  6363 ;; Registers used:
  6364 ;;		wreg, status,2, status,0
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6370 ;;      Params:         0       8       0       0       0
  6371 ;;      Locals:         0       5       0       0       0
  6372 ;;      Temps:          1       0       0       0       0
  6373 ;;      Totals:         1      13       0       0       0
  6374 ;;Total ram usage:       14 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; This function calls:
  6377 ;;		Nothing
  6378 ;; This function is called by:
  6379 ;;		_Cur_Stage_Time_Run_Proc
  6380 ;;		_Encoded_To_Percent_Calc
  6381 ;;		_Run_Timer1
  6382 ;;		_Data_Num_Disp_LCD
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           
  6387                           ;psect for function ___lldiv
  6388  09BB                     ___lldiv:	
  6389                           
  6390                           ;incstack = 0
  6391                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6392  09BB  3000               	movlw	0
  6393  09BC  1283               	bcf	3,5	;RP0=0, select bank0
  6394  09BD  1303               	bcf	3,6	;RP1=0, select bank0
  6395  09BE  00AB               	movwf	___lldiv@quotient+3
  6396  09BF  3000               	movlw	0
  6397  09C0  00AA               	movwf	___lldiv@quotient+2
  6398  09C1  3000               	movlw	0
  6399  09C2  00A9               	movwf	___lldiv@quotient+1
  6400  09C3  3000               	movlw	0
  6401  09C4  00A8               	movwf	___lldiv@quotient
  6402  09C5  0823               	movf	___lldiv@divisor+3,w
  6403  09C6  0422               	iorwf	___lldiv@divisor+2,w
  6404  09C7  0421               	iorwf	___lldiv@divisor+1,w
  6405  09C8  0420               	iorwf	___lldiv@divisor,w
  6406  09C9  1903               	skipnz
  6407  09CA  2A12               	goto	l1641
  6408  09CB  01AC               	clrf	___lldiv@counter
  6409  09CC  0AAC               	incf	___lldiv@counter,f
  6410  09CD                     l1627:	
  6411  09CD  1BA3               	btfsc	___lldiv@divisor+3,7
  6412  09CE  29DD               	goto	l1629
  6413  09CF  3001               	movlw	1
  6414  09D0  00FD               	movwf	??___lldiv
  6415  09D1                     u905:	
  6416  09D1  1003               	clrc
  6417  09D2  0DA0               	rlf	___lldiv@divisor,f
  6418  09D3  0DA1               	rlf	___lldiv@divisor+1,f
  6419  09D4  0DA2               	rlf	___lldiv@divisor+2,f
  6420  09D5  0DA3               	rlf	___lldiv@divisor+3,f
  6421  09D6  0BFD               	decfsz	??___lldiv,f
  6422  09D7  29D1               	goto	u905
  6423  09D8  3001               	movlw	1
  6424  09D9  00FD               	movwf	??___lldiv
  6425  09DA  087D               	movf	??___lldiv,w
  6426  09DB  07AC               	addwf	___lldiv@counter,f
  6427  09DC  29CD               	goto	l1627
  6428  09DD                     l1629:	
  6429  09DD  3001               	movlw	1
  6430  09DE  00FD               	movwf	??___lldiv
  6431  09DF                     u925:	
  6432  09DF  1003               	clrc
  6433  09E0  0DA8               	rlf	___lldiv@quotient,f
  6434  09E1  0DA9               	rlf	___lldiv@quotient+1,f
  6435  09E2  0DAA               	rlf	___lldiv@quotient+2,f
  6436  09E3  0DAB               	rlf	___lldiv@quotient+3,f
  6437  09E4  0BFD               	decfsz	??___lldiv,f
  6438  09E5  29DF               	goto	u925
  6439  09E6  0823               	movf	___lldiv@divisor+3,w
  6440  09E7  0227               	subwf	___lldiv@dividend+3,w
  6441  09E8  1D03               	skipz
  6442  09E9  29F4               	goto	u935
  6443  09EA  0822               	movf	___lldiv@divisor+2,w
  6444  09EB  0226               	subwf	___lldiv@dividend+2,w
  6445  09EC  1D03               	skipz
  6446  09ED  29F4               	goto	u935
  6447  09EE  0821               	movf	___lldiv@divisor+1,w
  6448  09EF  0225               	subwf	___lldiv@dividend+1,w
  6449  09F0  1D03               	skipz
  6450  09F1  29F4               	goto	u935
  6451  09F2  0820               	movf	___lldiv@divisor,w
  6452  09F3  0224               	subwf	___lldiv@dividend,w
  6453  09F4                     u935:	
  6454  09F4  1C03               	skipc
  6455  09F5  2A05               	goto	l1637
  6456  09F6  0820               	movf	___lldiv@divisor,w
  6457  09F7  02A4               	subwf	___lldiv@dividend,f
  6458  09F8  0821               	movf	___lldiv@divisor+1,w
  6459  09F9  1C03               	skipc
  6460  09FA  0F21               	incfsz	___lldiv@divisor+1,w
  6461  09FB  02A5               	subwf	___lldiv@dividend+1,f
  6462  09FC  0822               	movf	___lldiv@divisor+2,w
  6463  09FD  1C03               	skipc
  6464  09FE  0F22               	incfsz	___lldiv@divisor+2,w
  6465  09FF  02A6               	subwf	___lldiv@dividend+2,f
  6466  0A00  0823               	movf	___lldiv@divisor+3,w
  6467  0A01  1C03               	skipc
  6468  0A02  0F23               	incfsz	___lldiv@divisor+3,w
  6469  0A03  02A7               	subwf	___lldiv@dividend+3,f
  6470  0A04  1428               	bsf	___lldiv@quotient,0
  6471  0A05                     l1637:	
  6472  0A05  3001               	movlw	1
  6473  0A06                     u945:	
  6474  0A06  1003               	clrc
  6475  0A07  0CA3               	rrf	___lldiv@divisor+3,f
  6476  0A08  0CA2               	rrf	___lldiv@divisor+2,f
  6477  0A09  0CA1               	rrf	___lldiv@divisor+1,f
  6478  0A0A  0CA0               	rrf	___lldiv@divisor,f
  6479  0A0B  3EFF               	addlw	-1
  6480  0A0C  1D03               	skipz
  6481  0A0D  2A06               	goto	u945
  6482  0A0E  3001               	movlw	1
  6483  0A0F  02AC               	subwf	___lldiv@counter,f
  6484  0A10  1D03               	btfss	3,2
  6485  0A11  29DD               	goto	l1629
  6486  0A12                     l1641:	
  6487  0A12  082B               	movf	___lldiv@quotient+3,w
  6488  0A13  00A3               	movwf	?___lldiv+3
  6489  0A14  082A               	movf	___lldiv@quotient+2,w
  6490  0A15  00A2               	movwf	?___lldiv+2
  6491  0A16  0829               	movf	___lldiv@quotient+1,w
  6492  0A17  00A1               	movwf	?___lldiv+1
  6493  0A18  0828               	movf	___lldiv@quotient,w
  6494  0A19  00A0               	movwf	?___lldiv
  6495  0A1A  0008               	return
  6496  0A1B                     __end_of___lldiv:	
  6497                           
  6498                           	psect	text23
  6499  0005                     __ptext23:	
  6500 ;; *************** function _Write_LCD_Data *****************
  6501 ;; Defined at:
  6502 ;;		line 969 in file "adc7.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  ch              1    wreg     const unsigned char 
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;  ch              1    4[COMMON] const unsigned char 
  6507 ;;  time_delay      4    5[COMMON] unsigned long 
  6508 ;; Return value:  Size  Location     Type
  6509 ;;                  1    wreg      void 
  6510 ;; Registers used:
  6511 ;;		wreg, status,2, status,0
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6517 ;;      Params:         0       0       0       0       0
  6518 ;;      Locals:         5       0       0       0       0
  6519 ;;      Temps:          4       0       0       0       0
  6520 ;;      Totals:         9       0       0       0       0
  6521 ;;Total ram usage:        9 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; This function calls:
  6524 ;;		Nothing
  6525 ;; This function is called by:
  6526 ;;		_LCD_Const_Disp
  6527 ;;		_Data_Str_Disp_LCD
  6528 ;;		_Data_Num_Disp_LCD
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           
  6533                           ;psect for function _Write_LCD_Data
  6534  0005                     _Write_LCD_Data:	
  6535                           
  6536                           ;incstack = 0
  6537                           ; Regs used in _Write_LCD_Data: [wreg+status,2+status,0]
  6538                           ;Write_LCD_Data@ch stored from wreg
  6539  0005  00F4               	movwf	Write_LCD_Data@ch
  6540                           
  6541                           ;adc7.c: 971: unsigned long int time_delay = (100UL);
  6542  0006  3000               	movlw	0
  6543  0007  00F8               	movwf	Write_LCD_Data@time_delay+3
  6544  0008  3000               	movlw	0
  6545  0009  00F7               	movwf	Write_LCD_Data@time_delay+2
  6546  000A  3000               	movlw	0
  6547  000B  00F6               	movwf	Write_LCD_Data@time_delay+1
  6548  000C  3064               	movlw	100
  6549  000D  00F5               	movwf	Write_LCD_Data@time_delay
  6550                           
  6551                           ;adc7.c: 974: {
  6552                           ;adc7.c: 975: RD1 = 0;
  6553  000E  1283               	bcf	3,5	;RP0=0, select bank0
  6554  000F  1303               	bcf	3,6	;RP1=0, select bank0
  6555  0010  1088               	bcf	8,1	;volatile
  6556                           
  6557                           ;adc7.c: 976: RD0 = 1;
  6558  0011  1408               	bsf	8,0	;volatile
  6559                           
  6560                           ;adc7.c: 977: PORTC =ch;
  6561  0012  0874               	movf	Write_LCD_Data@ch,w
  6562  0013  0087               	movwf	7	;volatile
  6563                           
  6564                           ;adc7.c: 979: RD2 = 1;
  6565  0014  1508               	bsf	8,2	;volatile
  6566  0015                     l1615:	
  6567                           ;adc7.c: 980: while(time_delay--);
  6568                           
  6569  0015  3001               	movlw	1
  6570  0016  00F0               	movwf	??_Write_LCD_Data
  6571  0017  3000               	movlw	0
  6572  0018  00F1               	movwf	??_Write_LCD_Data+1
  6573  0019  3000               	movlw	0
  6574  001A  00F2               	movwf	??_Write_LCD_Data+2
  6575  001B  3000               	movlw	0
  6576  001C  00F3               	movwf	??_Write_LCD_Data+3
  6577  001D  0870               	movf	??_Write_LCD_Data,w
  6578  001E  02F5               	subwf	Write_LCD_Data@time_delay,f
  6579  001F  0871               	movf	??_Write_LCD_Data+1,w
  6580  0020  1C03               	skipc
  6581  0021  0F71               	incfsz	??_Write_LCD_Data+1,w
  6582  0022  2824               	goto	u855
  6583  0023  2825               	goto	u856
  6584  0024                     u855:	
  6585  0024  02F6               	subwf	Write_LCD_Data@time_delay+1,f
  6586  0025                     u856:	
  6587  0025  0872               	movf	??_Write_LCD_Data+2,w
  6588  0026  1C03               	skipc
  6589  0027  0F72               	incfsz	??_Write_LCD_Data+2,w
  6590  0028  282A               	goto	u857
  6591  0029  282B               	goto	u858
  6592  002A                     u857:	
  6593  002A  02F7               	subwf	Write_LCD_Data@time_delay+2,f
  6594  002B                     u858:	
  6595  002B  0873               	movf	??_Write_LCD_Data+3,w
  6596  002C  1C03               	skipc
  6597  002D  0F73               	incfsz	??_Write_LCD_Data+3,w
  6598  002E  2830               	goto	u859
  6599  002F  2831               	goto	u850
  6600  0030                     u859:	
  6601  0030  02F8               	subwf	Write_LCD_Data@time_delay+3,f
  6602  0031                     u850:	
  6603  0031  0A75               	incf	Write_LCD_Data@time_delay,w
  6604  0032  1D03               	skipz
  6605  0033  2815               	goto	l1615
  6606  0034  0A76               	incf	Write_LCD_Data@time_delay+1,w
  6607  0035  1D03               	skipz
  6608  0036  2815               	goto	l1615
  6609  0037  0A77               	incf	Write_LCD_Data@time_delay+2,w
  6610  0038  1D03               	skipz
  6611  0039  2815               	goto	l1615
  6612  003A  0A78               	incf	Write_LCD_Data@time_delay+3,w
  6613  003B  1D03               	btfss	3,2
  6614  003C  2815               	goto	l1615
  6615                           
  6616                           ;adc7.c: 982: RD2 = 0;
  6617  003D  1283               	bcf	3,5	;RP0=0, select bank0
  6618  003E  1303               	bcf	3,6	;RP1=0, select bank0
  6619  003F  1108               	bcf	8,2	;volatile
  6620                           
  6621                           ;adc7.c: 983: time_delay = (100UL);
  6622  0040  3000               	movlw	0
  6623  0041  00F8               	movwf	Write_LCD_Data@time_delay+3
  6624  0042  3000               	movlw	0
  6625  0043  00F7               	movwf	Write_LCD_Data@time_delay+2
  6626  0044  3000               	movlw	0
  6627  0045  00F6               	movwf	Write_LCD_Data@time_delay+1
  6628  0046  3064               	movlw	100
  6629  0047  00F5               	movwf	Write_LCD_Data@time_delay
  6630  0048                     l1619:	
  6631                           ;adc7.c: 984: while(time_delay--);
  6632                           
  6633  0048  3001               	movlw	1
  6634  0049  00F0               	movwf	??_Write_LCD_Data
  6635  004A  3000               	movlw	0
  6636  004B  00F1               	movwf	??_Write_LCD_Data+1
  6637  004C  3000               	movlw	0
  6638  004D  00F2               	movwf	??_Write_LCD_Data+2
  6639  004E  3000               	movlw	0
  6640  004F  00F3               	movwf	??_Write_LCD_Data+3
  6641  0050  0870               	movf	??_Write_LCD_Data,w
  6642  0051  02F5               	subwf	Write_LCD_Data@time_delay,f
  6643  0052  0871               	movf	??_Write_LCD_Data+1,w
  6644  0053  1C03               	skipc
  6645  0054  0F71               	incfsz	??_Write_LCD_Data+1,w
  6646  0055  2857               	goto	u875
  6647  0056  2858               	goto	u876
  6648  0057                     u875:	
  6649  0057  02F6               	subwf	Write_LCD_Data@time_delay+1,f
  6650  0058                     u876:	
  6651  0058  0872               	movf	??_Write_LCD_Data+2,w
  6652  0059  1C03               	skipc
  6653  005A  0F72               	incfsz	??_Write_LCD_Data+2,w
  6654  005B  285D               	goto	u877
  6655  005C  285E               	goto	u878
  6656  005D                     u877:	
  6657  005D  02F7               	subwf	Write_LCD_Data@time_delay+2,f
  6658  005E                     u878:	
  6659  005E  0873               	movf	??_Write_LCD_Data+3,w
  6660  005F  1C03               	skipc
  6661  0060  0F73               	incfsz	??_Write_LCD_Data+3,w
  6662  0061  2863               	goto	u879
  6663  0062  2864               	goto	u870
  6664  0063                     u879:	
  6665  0063  02F8               	subwf	Write_LCD_Data@time_delay+3,f
  6666  0064                     u870:	
  6667  0064  0A75               	incf	Write_LCD_Data@time_delay,w
  6668  0065  1D03               	skipz
  6669  0066  2848               	goto	l1619
  6670  0067  0A76               	incf	Write_LCD_Data@time_delay+1,w
  6671  0068  1D03               	skipz
  6672  0069  2848               	goto	l1619
  6673  006A  0A77               	incf	Write_LCD_Data@time_delay+2,w
  6674  006B  1D03               	skipz
  6675  006C  2848               	goto	l1619
  6676  006D  0A78               	incf	Write_LCD_Data@time_delay+3,w
  6677  006E  1903               	btfsc	3,2
  6678  006F  0008               	return
  6679  0070  2848               	goto	l1619
  6680  0071                     __end_of_Write_LCD_Data:	
  6681  007E                     btemp	set	126	;btemp
  6682  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    35
    Data        52
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     73      77
    BANK1            80     62      79
    BANK3            96      0      54
    BANK2            96      0       0

Pointer List with Targets:

    Data_Str_Disp_LCD@char_ptr	PTR const unsigned char  size(1) Largest target is 5
		 -> LCD_Const_Disp@vol_signal_rep_disp(CODE[5]), LCD_Const_Disp@vessel_msg_disp(CODE[3]), STR_5(CODE[2]), LCD_Const_Disp@reseveriour_msg_disp(CODE[3]), 
		 -> Cur_Stage_Time_Proc@motor_msg_disp(CODE[5]), Cur_Stage_Time_Proc@count_msg_disp(CODE[4]), Cur_Stage_Time_Proc@time_msg_disp(CODE[3]), STR_4(CODE[3]), 
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 

    Encoded_To_Percent_Calc@percent_frac	const PTR unsigned int  size(1) Largest target is 2
		 -> Mix_Fsm_Proc@percent_frac_rsvwater_ch(BANK1[2]), Mix_Fsm_Proc@percent_frac_rsvsand_ch(BANK1[2]), Mix_Fsm_Proc@percent_frac_rsvcmt_ch(BANK1[2]), 

    Encoded_To_Percent_Calc@percent_int	const PTR unsigned int  size(1) Largest target is 2
		 -> Mix_Fsm_Proc@percent_int_rsvwater_ch(BANK1[2]), Mix_Fsm_Proc@percent_int_rsvsand_ch(BANK1[2]), Mix_Fsm_Proc@percent_int_rsvcmt_ch(BANK1[2]), 

    Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac	const PTR unsigned long  size(1) Largest target is 4
		 -> Mix_Fsm_Proc@analog_val_in_digital_frac_vslwater_ch(BANK1[4]), Mix_Fsm_Proc@analog_val_in_digital_frac_vslsand_ch(BANK1[4]), Mix_Fsm_Proc@analog_val_in_digital_frac_vslcmt_ch(BANK1[4]), 

    Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int	const PTR unsigned long  size(1) Largest target is 4
		 -> Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch(BANK1[4]), Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch(BANK1[4]), Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch(BANK1[4]), 


Critical Paths under _main in COMMON

    _LCD_Const_Disp->_Goto_XY_LCD_Disp
    _Mix_Fsm_Proc->_Goto_XY_LCD_Disp
    _Run_Timer1->___lldiv
    _Read_ADC_Channel->_Init_ADC_Channel
    _Encoded_To_Percent_Calc->___lldiv
    _Encoded_To_Actual_Analog_Val_Calc->___lmul
    _LCD_Init->_Write_LCD_Command
    _Cur_Stage_Time_Run_Proc->___lldiv
    _Cur_Stage_Time_Proc->_Goto_XY_LCD_Disp
    _Goto_XY_LCD_Disp->_Write_LCD_Command
    _Data_Str_Disp_LCD->_Write_LCD_Data
    _Data_Num_Disp_LCD->___lldiv
    ___lldiv->___lmul

Critical Paths under _main in BANK0

    _main->_Cur_Stage_Time_Run_Proc
    _LCD_Const_Disp->_Goto_XY_LCD_Disp
    _Mix_Fsm_Proc->_Data_Num_Disp_LCD
    _Run_Timer1->___lldiv
    _Encoded_To_Percent_Calc->___lldiv
    _Cur_Stage_Time_Run_Proc->_Cur_Stage_Time_Proc
    _Cur_Stage_Time_Proc->_Data_Num_Disp_LCD
    _Data_Num_Disp_LCD->___lldiv

Critical Paths under _main in BANK1

    _main->_Mix_Fsm_Proc

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   32956
                                             72 BANK0      1     1      0
            _Cur_Stage_Time_Run_Proc
                     _LCD_Const_Disp
                           _LCD_Init
                       _Mix_Fsm_Proc
                      _Reset_Process
 ---------------------------------------------------------------------------------
 (1) _Reset_Process                                        1     1      0    4352
                                              4 BANK0      1     1      0
                     _LCD_Const_Disp
                        _Stop_Timer1
                  _Write_LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Const_Disp                                       0     0      0    3807
                  _Data_Str_Disp_LCD
                   _Goto_XY_LCD_Disp
                     _Write_LCD_Data
 ---------------------------------------------------------------------------------
 (1) _Mix_Fsm_Proc                                        64    64      0   15667
                                             63 BANK0      2     2      0
                                              0 BANK1     62    62      0
                  _Data_Num_Disp_LCD
                  _Data_Str_Disp_LCD
                 _Delay_Time_ByCount
  _Encoded_To_Actual_Analog_Val_Calc
            _Encoded_To_Percent_Calc
                   _Goto_XY_LCD_Disp
                   _Read_ADC_Channel
                         _Run_Timer1
                        _Stop_Timer1
 ---------------------------------------------------------------------------------
 (2) _Run_Timer1                                          10     8      2    1244
                                             13 BANK0     10     8      2
                    _Prescale_Timer1
                        _Stop_Timer1
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _Stop_Timer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Prescale_Timer1                                      3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Read_ADC_Channel                                    14    10      4     916
                                              6 COMMON     6     2      4
                                              0 BANK0      8     8      0
                 _Delay_Time_ByCount
                   _Init_ADC_Channel
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Channel                                     6     4      2      98
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _Delay_Time_ByCount                                   2     0      2     340
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Encoded_To_Percent_Calc                             16    10      6    3236
                                             13 BANK0     16    10      6
                            ___lldiv
                            ___llmod
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Encoded_To_Actual_Analog_Val_Calc                   24    12     12    1594
                                              0 BANK0     24    12     12
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     622
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0     545
                  _Write_LCD_Command
 ---------------------------------------------------------------------------------
 (1) _Cur_Stage_Time_Run_Proc                              8     8      0    8585
                                             64 BANK0      8     8      0
                _Cur_Stage_Time_Proc
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _Cur_Stage_Time_Proc                                  1     1      0    7575
                                             63 BANK0      1     1      0
                  _Data_Num_Disp_LCD
                  _Data_Str_Disp_LCD
                   _Goto_XY_LCD_Disp
 ---------------------------------------------------------------------------------
 (3) _Goto_XY_LCD_Disp                                    10     6      4    3329
                                             10 COMMON     4     0      4
                                              0 BANK0      4     4      0
                  _Write_LCD_Command
 ---------------------------------------------------------------------------------
 (2) _Write_LCD_Command                                   10     8      2     545
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (3) _Data_Str_Disp_LCD                                    2     2      0     410
                                              9 COMMON     2     2      0
                     _Write_LCD_Data
 ---------------------------------------------------------------------------------
 (2) _Data_Num_Disp_LCD                                   50    44      6    3836
                                             13 BANK0     50    44      6
                     _Write_LCD_Data
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     795
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8    1010
                                             13 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Write_LCD_Data                                       9     9      0      68
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Cur_Stage_Time_Run_Proc
     _Cur_Stage_Time_Proc
       _Data_Num_Disp_LCD
         _Write_LCD_Data
         ___lldiv
           ___lmul (ARG)
           ___wmul (ARG)
         ___llmod
       _Data_Str_Disp_LCD
         _Write_LCD_Data
       _Goto_XY_LCD_Disp
         _Write_LCD_Command
     ___lldiv
       ___lmul (ARG)
       ___wmul (ARG)
   _LCD_Const_Disp
     _Data_Str_Disp_LCD
       _Write_LCD_Data
     _Goto_XY_LCD_Disp
       _Write_LCD_Command
     _Write_LCD_Data
   _LCD_Init
     _Write_LCD_Command
   _Mix_Fsm_Proc
     _Data_Num_Disp_LCD
       _Write_LCD_Data
       ___lldiv
         ___lmul (ARG)
         ___wmul (ARG)
       ___llmod
     _Data_Str_Disp_LCD
       _Write_LCD_Data
     _Delay_Time_ByCount
     _Encoded_To_Actual_Analog_Val_Calc
       ___lmul
     _Encoded_To_Percent_Calc
       ___lldiv
         ___lmul (ARG)
         ___wmul (ARG)
       ___llmod
       ___lmul
       ___wmul
     _Goto_XY_LCD_Disp
       _Write_LCD_Command
     _Read_ADC_Channel
       _Delay_Time_ByCount
       _Init_ADC_Channel
     _Run_Timer1
       _Prescale_Timer1
       _Stop_Timer1
       ___lldiv
         ___lmul (ARG)
         ___wmul (ARG)
     _Stop_Timer1
   _Reset_Process
     _LCD_Const_Disp
       _Data_Str_Disp_LCD
         _Write_LCD_Data
       _Goto_XY_LCD_Disp
         _Write_LCD_Command
       _Write_LCD_Data
     _Stop_Timer1
     _Write_LCD_Command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      36       9       56.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     3E      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     49      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      E0      12        0.0%
ABS                  0      0      E0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Nov 22 18:01:16 2017

                             _count_left_vsl_fwd_rev_process 00E2  
                                                          pc 0002  
                          Mix_Fsm_Proc@adc_value_vslwater_ch 00B4  
                   __end_ofCur_Stage_Time_Proc@time_msg_disp 0829  
                           Cur_Stage_Time_Proc@time_msg_disp 0826  
                                                         _GO 00F9  
                                                         fsr 0004  
                                        ___wmul@multiplicand 0072  
                 __end_ofLCD_Const_Disp@reseveriour_msg_disp 0826  
                         LCD_Const_Disp@reseveriour_msg_disp 0823  
                                                        l200 07C2  
                                                        l203 0D2F  
                                                        l320 0F29  
                                                        l218 016C  
                                                        l411 17C6  
                                                        l163 0B26  
                                                        l324 0F9D  
                                                        l228 0A30  
                                                        l253 17E4  
                                                        l181 02E0  
                                                        l318 0E9D  
                                                        l327 0FFF  
                                                        l185 047C  
                                                        l189 0616  
                                                        _RB1 0031  
                                                        _RB2 0032  
                                                        _RB3 0033  
                                                        _RB4 0034  
                                                        _RD0 0040  
                                                        _RB5 0035  
                                                        _RD1 0041  
                                                        _RB6 0036  
                                                        _RE0 0048  
                                                        _RD2 0042  
                                                        _RB7 0037  
                                                        _RE1 0049  
                                                        _RE2 004A  
                                                        _RD4 0044  
                                                        _RD5 0045  
                                                        _RD6 0046  
                                                        u810 0AAC  
                                                        u830 0ADF  
                                                        u815 0A9F  
                                                        u816 0AA0  
                                                        u905 09D1  
                                                        u817 0AA5  
                                                        u850 0031  
                                                        u818 0AA6  
                                                        u835 0AD2  
                                                        u819 0AAB  
                                                        u836 0AD3  
                                                        u925 09DF  
                                                        u837 0AD8  
                                                        u870 0064  
                                                        u838 0AD9  
                                                        u855 0024  
                                                        u935 09F4  
                                                        u839 0ADE  
                                                        u856 0025  
                                                        u857 002A  
                                                        u945 0A06  
                                                        u858 002B  
                                                        u875 0057  
                                                        u859 0030  
                                                        u876 0058  
                                                        u877 005D  
                                                        u878 005E  
                                                        u879 0063  
                                                        u975 092C  
                                                        u995 0946  
                                                        fsr0 0004  
                                                        indf 0000  
                                     __end_of_LCD_Const_Disp 0BE0  
                            Init_ADC_Channel@adc_channel_reg 0074  
                                                       l2025 03B3  
                                                       l2009 0374  
                                                       l2051 0462  
                                                       l2205 075E  
                                                       l2207 076E  
                                                       l2119 05FC  
                                                       l1601 0A90  
                                                       l2401 07AB  
                                                       l2217 0791  
                                                       l2145 06AA  
                                                       l2225 07A4  
                                                       l2403 0A6A  
                                                       l1605 0AC3  
                                                       l2405 099D  
                                                       l2245 0DCE  
                                                       l2173 06FE  
                                                       l2093 054F  
                                                       l2077 0510  
                                                       l1615 0015  
                                                       l2407 0FE2  
                                                       l1641 0A12  
                                                       l1705 0E13  
                                                       l2169 06F7  
                                                       l1619 0048  
                                                       l1627 09CD  
                                                       l1651 0928  
                                                       l2187 0739  
                                                       l2179 0715  
                                                       l2291 0B48  
                                                       l2275 0B1C  
                                                       l1637 0A05  
                                                       l1629 09DD  
                                                       l1653 0938  
                                                       l1661 0963  
                                                       l1725 0F4F  
                                                       l1717 0EE3  
                                                       l1709 0E57  
                                                       l1901 0189  
                                                       l1743 0FDB  
                                                       l1911 01E5  
                                                       l1751 175D  
                                                       l2287 0B3D  
                                                       l1657 0956  
                                                       l1729 0F70  
                                                       l1681 098F  
                                                       l1739 0FCA  
                                                       l1683 0991  
                                                       l1691 09AB  
                                                       l1851 0A4A  
                                                       l1685 0993  
                                                       l1853 0A52  
                                                       l1861 0A78  
                                                       l1773 17EB  
                                                       l1759 17A1  
                                                       l1679 098D  
                                                       l1791 08E9  
                                                       l1855 0A5A  
                                                       l2399 0765  
                                                       l1689 0998  
                                                       l1777 17BE  
                                                       l1849 0A46  
                                                       l1795 08FF  
                                                       l1859 0A65  
                                                       l1949 01F5  
                                                       l1983 02C6  
                                                       l1959 021F  
                                                       STR_1 0832  
                                                       STR_2 0829  
                                                       STR_3 082C  
                                                       STR_4 082F  
                                                       STR_5 0835  
                           Encoded_To_Percent_Calc@adc_value 002D  
                                                       u1005 0957  
                                                       u1050 0DEE  
                                                       u1060 0E04  
                                                       u1215 0901  
                                                       u1144 17F9  
                                                       u1240 00CB  
                                                       u1225 0909  
                                                       u1145 17F6  
                                                       u1241 00CC  
                                                       u1242 00D1  
                                                       u1075 0F5A  
                                                       u1243 00D2  
                                                       u1085 0F87  
                                                       u1165 17C7  
                                                       u1413 0372  
                                                       u1510 0D67  
                                                       u1095 0FB4  
                                                       u1511 0D68  
                                                       u1175 17CE  
                                                       u1255 0103  
                                                       u1512 0D6D  
                                                       u1280 0CBC  
                                                       u1513 0D6E  
                                                       u1281 0CBD  
                                                       u1282 0CC2  
                                                       u1283 0CC3  
                                                       u1275 0CAD  
                                                       u1443 050E  
                                                       u1533 0DCC  
                                                       u1525 0D9F  
                                                       u1295 0D18  
                                                       u1473 06A8  
                      __end_ofLCD_Const_Disp@vessel_msg_disp 0823  
                              LCD_Const_Disp@vessel_msg_disp 0820  
                                                       _main 0AEC  
                                                       btemp 007E  
                                                       start 0000  
                                      __end_of_Reset_Process 08A3  
                                  Run_Timer1@set_timer1_mode 002D  
                                   __end_of_Goto_XY_LCD_Disp 09BB  
                                           __end_of_LCD_Init 08E1  
                                                      ?_main 0070  
                                                      _ANSEL 0188  
                                            __end_of___lldiv 0A1B  
                                 __end_of_Delay_Time_ByCount 176A  
                                                      _T1CON 0010  
                                            __end_of___llmod 096C  
                            Mix_Fsm_Proc@adc_value_rsvcmt_ch 00A0  
                                                      _TMR1H 000F  
                                                      _TMR1L 000E  
                                                      _PORTA 0005  
                                                      _PORTB 0006  
                                                      _PORTC 0007  
                                                      _PORTD 0008  
                                                      _PORTE 0009  
                                                      _TRISA 0085  
                                                      _TRISB 0086  
                                                      _TRISC 0087  
                                                      _TRISD 0088  
                                                      _TRISE 0089  
                                            ?_LCD_Const_Disp 0070  
                            Mix_Fsm_Proc@adc_value_vslcmt_ch 00AC  
                                        ___lmul@multiplicand 0074  
                                   ?_Cur_Stage_Time_Run_Proc 0070  
                                  Data_Str_Disp_LCD@char_ptr 007A  
                                                      pclath 000A  
                        Mix_Fsm_Proc@percent_int_rsvwater_ch 00DC  
                                                      status 0003  
                                   __end_of_Init_ADC_Channel 17A0  
                                                      wtemp0 007E  
                                    __size_of_Write_LCD_Data 006C  
                                            __initialization 07C3  
                                           _cur_disp_lcd_loc 0069  
                                               __end_of_main 0B5C  
                                __end_of_Cur_Stage_Time_Proc 01F4  
                                              ?_Mix_Fsm_Proc 0070  
                                                     ??_main 0068  
                                           _Read_ADC_Channel 0A1B  
 Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int 002A  
                                Init_ADC_Channel@adc_channel 0070  
                                                     _ADCON0 001F  
                                                     _ADCON1 009F  
                                           ___llmod@dividend 0074  
                                                     _ADRESH 001E  
                                                     _ADRESL 009E  
                                                     _ANSELH 0189  
                                       Data_Num_Disp_LCD@num 005B  
                                                     _TMR1IF 0060  
                           Mix_Fsm_Proc@adc_value_rsvsand_ch 00A4  
                                   Write_LCD_Data@time_delay 0075  
            Mix_Fsm_Proc@analog_val_in_digital_int_vslcmt_ch 00CC  
                                        _cur_stage_time_left 00E4  
                         __end_ofmain@motor_fwd_run_msg_disp 080E  
                                 main@motor_fwd_run_msg_disp 080A  
                           Mix_Fsm_Proc@adc_value_vslsand_ch 00B0  
                                                     ___lmul 08E1  
                                                     ___wmul 17BC  
                                             ??_Mix_Fsm_Proc 005F  
                                                  ??___lldiv 007D  
                                                  ??___llmod 0078  
                                           _num_calls_timer1 01BC  
                            __end_of_Cur_Stage_Time_Run_Proc 0DDC  
                                                 _Run_Timer1 0071  
                                    __end_of__initialization 07FC  
                                                  ?_LCD_Init 0070  
                                    Mix_Fsm_Proc@adc_channel 00C4  
                  __end_ofCur_Stage_Time_Proc@count_msg_disp 0820  
                          Cur_Stage_Time_Proc@count_msg_disp 081C  
                         __end_ofmain@motor_rev_run_msg_disp 080A  
                                 main@motor_rev_run_msg_disp 0806  
                                             __pcstackCOMMON 0070  
                                 _cur_stage_time_enable_flag 00ED  
                                   __size_of_Prescale_Timer1 0023  
                                         _cur_line_disp_data 01AA  
                                               __pidataBANK0 083A  
                                               __pidataBANK1 1751  
                                               __pidataBANK3 083E  
                           Data_Num_Disp_LCD@thousands_digit 0053  
                                      _prescale_shift_timer1 01C4  
                             Goto_XY_LCD_Disp@start_line_lcd 0020  
                             Goto_XY_LCD_Disp@start_line_num 007A  
                                              ??_Stop_Timer1 0070  
                                                 __pbssBANK1 00DE  
                                                 __pbssBANK3 01BC  
                        Read_ADC_Channel@adc_value_most_byte 0020  
                                                 ??_LCD_Init 007A  
                                             _Write_LCD_Data 0005  
                   Data_Num_Disp_LCD@lcd_datanum_disp_format 002D  
                                   ?_Encoded_To_Percent_Calc 002D  
                                          _vsl_run_fsm_state 01C0  
Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac 002B  
                                                 __pmaintext 0AEC  
                                                    ?___lmul 0070  
                                                    ?___wmul 0070  
                                       _restart_pressed_flag 00EA  
                                             ___lmul@product 0079  
                                           ??_LCD_Const_Disp 007E  
                                          ?_Goto_XY_LCD_Disp 007A  
                                            _prescale_timer1 006B  
                                          _Data_Num_Disp_LCD 0DDC  
                                                    _T1CKPS0 0084  
                                                    _T1CKPS1 0085  
                                         ??_Goto_XY_LCD_Disp 007E  
                                         ?_Data_Num_Disp_LCD 002D  
                        Mix_Fsm_Proc@percent_frac_rsvsand_ch 00C8  
                                                ?_Run_Timer1 002D  
             Encoded_To_Actual_Analog_Val_Calc@remainder_val 0034  
                                        ??_Data_Num_Disp_LCD 0033  
                                       __end_of_Mix_Fsm_Proc 07C3  
                                                 __stringtab 0800  
                                     __end_of_Write_LCD_Data 0071  
                               Delay_Time_ByCount@time_delay 0070  
                                         _Delay_Time_ByCount 175D  
                                          ?_Init_ADC_Channel 0070  
                                   __end_of_Read_ADC_Channel 0A81  
                 Encoded_To_Actual_Analog_Val_Calc@adc_value 0020  
                                        __end_of_Stop_Timer1 1777  
                           __size_of_Cur_Stage_Time_Run_Proc 00AD  
                                        ?_Delay_Time_ByCount 0070  
                                         ??_Init_ADC_Channel 0072  
           Mix_Fsm_Proc@analog_val_in_digital_int_vslsand_ch 00D0  
                                            __size_of___lmul 003F  
                                                    ___lldiv 09BB  
                                            __size_of___wmul 0021  
                                                    ___llmod 0920  
                                  __end_of_Data_Num_Disp_LCD 1000  
          Mix_Fsm_Proc@analog_val_in_digital_int_vslwater_ch 00D4  
                                                    __ptext1 086A  
                                                    __ptext2 0B5C  
                                                    __ptext3 01F4  
                                                    __ptext4 0071  
                                                    __ptext5 176A  
                                                    __ptext6 17DD  
                                                    __ptext7 0A1B  
                                                    __ptext8 1788  
                                                    __ptext9 175D  
                                          ??_Prescale_Timer1 0070  
                                       ??_Delay_Time_ByCount 0072  
                                     __size_of_Reset_Process 0039  
                                                    clrloop0 1756  
                                    _mix_process_enable_flag 00EB  
                                       end_of_initialization 07FC  
                                            ?_Write_LCD_Data 0070  
                                 _cur_stage_time_expiry_flag 00EC  
                            __end_of_Encoded_To_Percent_Calc 0C85  
                                  Data_Num_Disp_LCD@hex_data 0037  
                                            ___lldiv@divisor 0020  
                                            ___lldiv@counter 002C  
                                        __size_of_Run_Timer1 00AF  
                                  Data_Num_Disp_LCD@num_data 0047  
          Encoded_To_Actual_Analog_Val_Calc@min_input_analog 0028  
                                     main@motor_off_msg_disp 080E  
                               __size_of_Cur_Stage_Time_Proc 00D4  
                         Encoded_To_Percent_Calc@percent_int 0031  
                                Data_Num_Disp_LCD@tens_digit 0057  
                                                _Stop_Timer1 176A  
           Mix_Fsm_Proc@analog_val_in_digital_frac_vslcmt_ch 00B8  
                                          __size_of_LCD_Init 003E  
                                              _Reset_Process 086A  
                                              _mix_fsm_state 00E6  
                                Read_ADC_Channel@adc_channel 0076  
                                Data_Num_Disp_LCD@unit_digit 0059  
                                 __size_of_Data_Num_Disp_LCD 0224  
                                             __end_of___lmul 0920  
                                          _Data_Str_Disp_LCD 17A0  
                                             __end_of___wmul 17DD  
                         Mix_Fsm_Proc@percent_int_rsvsand_ch 00DA  
                       Read_ADC_Channel@adc_value_least_byte 0026  
                                         ?_Data_Str_Disp_LCD 0070  
                          Read_ADC_Channel@adc_value_channel 0022  
                                      __size_of_Mix_Fsm_Proc 05CF  
                                        start_initialization 07C3  
                                        ??_Data_Str_Disp_LCD 0079  
                                          _Write_LCD_Command 0A81  
                  __end_ofCur_Stage_Time_Proc@motor_msg_disp 081C  
                          Cur_Stage_Time_Proc@motor_msg_disp 0817  
                                         ?_Write_LCD_Command 0070  
                                            ___llmod@divisor 0070  
                                    _Cur_Stage_Time_Run_Proc 0D2F  
                                            ___llmod@counter 0079  
                                             ?_Reset_Process 0070  
                             _count_update_cur_stage_per_sec 01C2  
                                        ??_Write_LCD_Command 0072  
                                  __end_of_Data_Str_Disp_LCD 17BC  
                                                   ??___lmul 0078  
                                                   ??___wmul 0074  
                                                 init_fetch0 1777  
                                                __pdataBANK0 0069  
                                                __pdataBANK1 00EB  
                                                __pdataBANK3 0190  
                                               _Mix_Fsm_Proc 01F4  
                           __size_of_Encoded_To_Percent_Calc 00A5  
                                               ??_Run_Timer1 002F  
                                                  ___latbits 0002  
                       Encoded_To_Percent_Calc@remainder_val 003B  
                                              __pcstackBANK0 0020  
                                              __pcstackBANK1 00A0  
                                  __end_of_Write_LCD_Command 0AEC  
                                     _restart_sw_enable_flag 00EE  
                                  __size_of_Goto_XY_LCD_Disp 004F  
          Mix_Fsm_Proc@analog_val_in_digital_frac_vslsand_ch 00BC  
                                          ?_Read_ADC_Channel 0076  
                                            _Prescale_Timer1 17DD  
                                         ??_Read_ADC_Channel 007A  
                                         __end_of_Run_Timer1 0120  
                  __end_ofLCD_Const_Disp@vol_signal_rep_disp 0817  
                          LCD_Const_Disp@vol_signal_rep_disp 0812  
                                                   ?___lldiv 0020  
                         Mix_Fsm_Proc@percent_frac_rsvcmt_ch 00C6  
                  __end_of_Encoded_To_Actual_Analog_Val_Calc 0D2F  
                 __size_of_Encoded_To_Actual_Analog_Val_Calc 00AA  
                        ??_Encoded_To_Actual_Analog_Val_Calc 002C  
                         ?_Encoded_To_Actual_Analog_Val_Calc 0020  
                          _Encoded_To_Actual_Analog_Val_Calc 0C85  
                                                   ?___llmod 0070  
                                  _disp_status_time_or_error 01B4  
                                                  __pstrings 0800  
                                  __size_of_Init_ADC_Channel 0018  
                                           ??_Write_LCD_Data 0070  
                                     Data_Num_Disp_LCD@F1790 01A0  
                                     Data_Num_Disp_LCD@F1792 0190  
                                  ??_Cur_Stage_Time_Run_Proc 0060  
                                                   _LCD_Init 08A3  
                                             ___wmul@product 0074  
                                            ??_Reset_Process 0024  
                                        _Cur_Stage_Time_Proc 0120  
                                                  clear_ram0 1755  
                                           Write_LCD_Data@ch 0074  
                       Mix_Fsm_Proc@percent_frac_rsvwater_ch 00CA  
                                 __size_of_Data_Str_Disp_LCD 001C  
   Encoded_To_Actual_Analog_Val_Calc@full_scale_input_analog 0024  
                                                __stringbase 0805  
                                          ___wmul@multiplier 0070  
                                       ?_Cur_Stage_Time_Proc 0070  
                                       Write_LCD_Command@cmd 0070  
                                __size_of_Delay_Time_ByCount 000D  
                                 __size_of_Write_LCD_Command 006B  
                          Mix_Fsm_Proc@percent_int_rsvcmt_ch 00D8  
                                    __size_of_LCD_Const_Disp 0084  
                                          ___lmul@multiplier 0070  
                                               ?_Stop_Timer1 0070  
                            Data_Num_Disp_LCD@hundreds_digit 0055  
                                    __end_of_Prescale_Timer1 1800  
                         Data_Num_Disp_LCD@lcd_disp_data_int 002F  
                             __end_ofmain@motor_off_msg_disp 0812  
                                           __size_of___lldiv 0060  
                                           __size_of___llmod 004C  
                                         __end_of__stringtab 0806  
                                    _Encoded_To_Percent_Calc 0BE0  
                                      ??_Cur_Stage_Time_Proc 005F  
                                                   __ptext10 0BE0  
                                                   __ptext11 17BC  
                                                   __ptext20 0DDC  
                                                   __ptext12 0C85  
                                                   __ptext21 0920  
                                                   __ptext13 08E1  
                                                   __ptext22 09BB  
                                                   __ptext14 08A3  
                                                   __ptext23 0005  
                                                   __ptext15 0D2F  
                                                   __ptext16 0120  
                                                   __ptext17 096C  
                                                   __ptext18 0A81  
                                                   __ptext19 17A0  
                       Data_Num_Disp_LCD@tens_thousand_digit 0051  
                                           _Goto_XY_LCD_Disp 096C  
                              Goto_XY_LCD_Disp@start_col_lcd 0022  
                              Goto_XY_LCD_Disp@start_col_num 007C  
                                Write_LCD_Command@time_delay 0076  
                                              __size_of_main 0070  
                    Encoded_To_Percent_Calc@temp_percent_int 0037  
                                           _Init_ADC_Channel 1788  
         Mix_Fsm_Proc@analog_val_in_digital_frac_vslwater_ch 00C0  
                                                   init_ram0 177B  
                                           ?_Prescale_Timer1 0070  
                                           ___lldiv@dividend 0024  
                                                  stringcode 0800  
                                  ??_Encoded_To_Percent_Calc 0033  
                                                _timer1_init 00DE  
                                                _timer1_mode 00E8  
                                  __size_of_Read_ADC_Channel 0066  
                                           ___lldiv@quotient 0028  
                                                   stringdir 0800  
                                                   stringtab 0800  
                                             _LCD_Const_Disp 0B5C  
                          Mix_Fsm_Proc@adc_value_rsvwater_ch 00A8  
                                       __size_of_Stop_Timer1 000D  
                        Encoded_To_Percent_Calc@percent_frac 0032  
